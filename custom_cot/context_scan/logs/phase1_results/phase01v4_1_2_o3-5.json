{
  "findings": [
    {
      "Issue": "Negative bonus arithmetic can mint MAX_UINT Schnibbles",
      "Severity": "High",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "WHAT:\nIf the summed bonus in `_farmPlots` (`finalBonus`) is **–100 or less**, the intermediate arithmetic becomes negative. The result is cast to `uint256`, silently wrapping to a huge positive number (≈ 2^256-1) and crediting gigantic Schnibbles balances.\n\nHOW / CODE:\n```solidity\n// LandManager.sol, _farmPlots()\nfinalBonus = int16(REALM_BONUSES[index]) + int16(int8(RARITY_BONUSES[rarity]));\n...\nschnibblesTotal = uint256(\n    (int256(schnibblesTotal) + (int256(schnibblesTotal) * finalBonus)) / 100\n);   // <-- negative → wrap to huge uint\n```\nBecause Solidity 0.8 allows converting a negative `int256` to `uint256` by two’s-complement wrapping, the contract never reverts; instead it mints an astronomically large reward that can be harvested and withdrawn.\n\nWHY IT MATTERS:\nAn attacker only needs configuration values (`REALM_BONUSES` / `RARITY_BONUSES`) or NFT attributes that push `finalBonus ≤ -100`. These arrays are loaded from the externally-governed `ConfigStorage`, so a malicious / compromised admin or a mistake can enable the attack and break the economy instantly.\n",
      "Recommendation": ""
    },
    {
      "Issue": "No re-entrancy guard around external calls (AccountManager & NFT transfers)",
      "Severity": "Medium",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "WHAT:\n`stakeMunchable`, `unstakeMunchable`, `transferToUnoccupiedPlot`, and the `forceFarmPlots` modifier make **state-changing external calls** (e.g. `accountManager.updatePlayer`, `munchNFT.transferFrom`) without any re-entrancy protection.\n\nHOW / CODE:\n```solidity\n// inside _farmPlots(), executed *before* core actions via modifier\naccountManager.updatePlayer(landlord, landlordMetadata);   // external & un-guarded\n...\n// stakeMunchable() continues here with fresh external input but old state\n```\nIf `AccountManager` or a malicious ERC-721 implementation calls back into LandManager (e.g. by invoking `unstakeMunchable`), the contract’s invariants can be bypassed (double-farm, exceed staking limits, etc.).\n\nWHY IT MATTERS:\nAlthough the project controls `AccountManager`, upgradeability or a compromised key can turn it hostile. Because critical state is already updated **before** the call, re-entrancy can corrupt mappings and reward logic.\n",
      "Recommendation": ""
    },
    {
      "Issue": "PRICE_PER_PLOT == 0 bricks every staking action (division by zero)",
      "Severity": "Medium",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "WHAT:\n`_getNumPlots()` divides by `PRICE_PER_PLOT`, which is fetched from `ConfigStorage` without validation. A zero value reverts every call that needs plot counts, freezing staking, transfer and farming.\n\nHOW / CODE:\n```solidity\nfunction _getNumPlots(address _account) internal view returns (uint256) {\n    return lockManager.getLockedWeightedValue(_account) / PRICE_PER_PLOT; // div 0 possible\n}\n```\nAny function guarded by `forceFarmPlots`, or validation such as `stakeMunchable`, will revert forever once the misconfiguration exists.\n\nWHY IT MATTERS:\nA single bad governance update or an attacker with config privileges can irreversibly DoS the protocol.\n",
      "Recommendation": ""
    },
    {
      "Issue": "Array-index assumptions can trigger global DoS via config update",
      "Severity": "Low",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "WHAT:\n`REALM_BONUSES` and `RARITY_BONUSES` are used without length checks. If `ConfigStorage` supplies arrays shorter than required, every call that executes `_farmPlots` will revert, thanks to the `forceFarmPlots` modifier that precedes *all* staking and unstaking functions.\n\nHOW / CODE:\n```solidity\nuint256 idx = uint256(immutableAttributes.realm) * 5 + uint256(landlordMetadata.snuggeryRealm);\nint16 realmBonus = REALM_BONUSES[idx];      // unchecked index\n...\nint8 rarityBonus = int8(RARITY_BONUSES[rarity]);\n```\n\nWHY IT MATTERS:\nA faulty or malicious configuration upgrade bricks the entire LandManager contract and blocks all users (global DoS).\n",
      "Recommendation": ""
    },
    {
      "Issue": "Off-by-one lets each player stake 11 (not 10) Munchables",
      "Severity": "Low",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "WHAT:\nThe limit check in `stakeMunchable` uses `>` instead of `>=`, allowing a player to hold 11 staked NFTs despite the documented maximum of 10.\n\nHOW / CODE:\n```solidity\nif (munchablesStaked[mainAccount].length > 10)  // should be >= 10\n    revert TooManyStakedMunchiesError();\n```\n\nWHY IT MATTERS:\nMinor economic imbalance and invariant violation (`munchablesStaked.length <= 10`) that could propagate to other parts of the system assuming the hard cap.\n",
      "Recommendation": ""
    }
  ]
}