{
  "results": [
    {
      "Issue": "Incorrect staked-NFT limit check allows more than 10 tokens",
      "Severity": "Low",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "The intended invariant (inv-4) limits each player to **10** simultaneously staked Munchables. \n\nIn ```solidity\nif (munchablesStaked[mainAccount].length > 10)\n    revert TooManyStakedMunchiesError();\n``` \n only lengths **> 10** are rejected.  When a player already has exactly 10 tokens, the condition is false, the new token is pushed, and the length becomes 11 – violating the stated limit and any downstream assumptions that rely on it (gas usage, UI, reward calculations, etc.).",
      "Recommendation": ""
    },
    {
      "Issue": "Uint8 → int8 cast can turn positive rarity bonus into large negative value and revert",
      "Severity": "High",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "During farming the contract computes a signed bonus:\n```solidity\nfinalBonus = int16(REALM_BONUSES[index]) + int16(int8(RARITY_BONUSES[rarity]));\n```\n`RARITY_BONUSES` is stored as **uint8** but is cast to **int8** through `int16(int8(...))`.  Any element ≥128 becomes a *negative* number (e.g. 150 ⇒ ‑106).  If `finalBonus` ends up ≤-100 the later arithmetic\n```solidity\nschnibblesTotal = uint256((int256(s) + int256(s) * finalBonus) / 100);\n```\nproduces a **negative int256**, and converting that to `uint256` reverts in Solidity 0.8+.  A landlord / admin who sets a high rarity bonus (>127) in `ConfigStorage` can therefore halt `farmPlots()` for all players – permanently blocking reward harvesting and, by extension, unstaking flows that use the `forceFarmPlots` modifier.\n",
      "Recommendation": ""
    },
    {
      "Issue": "Dirty-plot handling can underflow and block farming if metadata was never updated",
      "Severity": "Medium",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "When a landlord’s number of plots drops below a staker’s `plotId`, the code enters the *dirty* path:\n```solidity\nif (_getNumPlots(landlord) < _toiler.plotId) {\n    timestamp = plotMetadata[landlord].lastUpdated; // may be 0\n    toilerState[tokenId].dirty = true;\n}\n...\nschnibblesTotal = (timestamp - _toiler.lastToilDate) * BASE_SCHNIBBLE_RATE;\n```\nIf the landlord has **never** called `triggerPlotMetadata` / `updatePlotMetadata`, `lastUpdated` is 0.  Because `lastToilDate` is always >0, the subtraction underflows and the whole transaction reverts.  The staker is then unable to harvest, transfer or even **unstake** (all guarded by `forceFarmPlots`), effectively locking the NFT until the landlord cooperates and updates their metadata.",
      "Recommendation": ""
    },
    {
      "Issue": "Division by zero possible when PRICE_PER_PLOT is mis-configured",
      "Severity": "Low",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "`_getNumPlots()` divides by the configurable `PRICE_PER_PLOT`:\n```solidity\nreturn lockManager.getLockedWeightedValue(_account) / PRICE_PER_PLOT;\n```\nIf `ConfigStorage` ever returns 0 for `PRICE_PER_PLOT` (e.g. during an upgrade or bad governance action) every call to this function reverts with a division-by-zero error, disabling staking, transfers, taxation updates, and farming.\n\nAlthough the contract assumes correct configuration (assumption-2), a single mis-configured parameter would break the live system.",
      "Recommendation": ""
    }
  ]
}