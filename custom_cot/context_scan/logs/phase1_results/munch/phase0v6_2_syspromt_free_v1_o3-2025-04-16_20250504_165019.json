{
  "results": [
    {
      "Issue": "plotId not updated in transferToUnoccupiedPlot – leads to double-occupancy & reward inflation",
      "Severity": "High",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "Function ```transferToUnoccupiedPlot()``` moves a staked NFT from one plot to another but **never updates** the stored plot id inside ```toilerState```.\n```solidity\n// occupancy mappings are updated\nplotOccupied[_toiler.landlord][oldPlotId] = Plot({occupied:false, tokenId:0});\nplotOccupied[_toiler.landlord][plotId] = Plot({occupied:true, tokenId:tokenId});\n\n// but this line is missing\n// toilerState[tokenId].plotId = plotId;\n```\nConsequences:\n1. ```toilerState.plotId``` continues to reference the _old_ plot.\n2. The old plot is now marked free, so **another player can stake a second NFT there while the first NFT is still considered to occupy it by the reward algorithm**.\n3. ```_farmPlots``` will keep farming Schnibbles using the stale (old) plot id, causing reward mis-accounting and potentially minting Schnibbles for two different NFTs on a single plot.\n4. This breaks invariants 14–16 in the provided context summary and allows inflation of in-game rewards, harming the economy.\nAttack scenario: an NFT owner calls ```transferToUnoccupiedPlot``` to move to a new plot, then stakes a second NFT into the now-free old plot. Both NFTs farm rewards even though the landlord only has room for one, granting unfair Schnibbles amounts.",
      "Recommendation": ""
    },
    {
      "Issue": "Off-by-one error allows 11 NFTs staked instead of intended 10",
      "Severity": "Low",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "In ```stakeMunchable``` the limit is checked **before** the new token is pushed:\n```solidity\nif (munchablesStaked[mainAccount].length > 10) revert TooManyStakedMunchiesError();\n...\nmunchablesStaked[mainAccount].push(tokenId);\n```\nWhen a player already has exactly 10 NFTs staked, ```length``` equals 10, the check passes, and the 11th NFT is added. Subsequent stakes are blocked at 11. This violates invariant 4 (\"Stake does not increase staked munchables beyond limit\") and gives select players a 10 % advantage in farming capacity.",
      "Recommendation": ""
    },
    {
      "Issue": "Possible division-by-zero if PRICE_PER_PLOT mis-configured",
      "Severity": "Low",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "```_getNumPlots``` divides the value returned from ```lockManager``` by ```PRICE_PER_PLOT```:\n```solidity\nreturn lockManager.getLockedWeightedValue(_account) / PRICE_PER_PLOT;\n```\nIf the config storage returns 0 for ```PRICE_PER_PLOT``` (e.g.\nmis-configuration during an upgrade) every call that queries plot count or performs staking will revert, effectively bricking the LandManager and DoSing users.",
      "Recommendation": ""
    },
    {
      "Issue": "Casting large uint to int in _farmPlots can revert (DoS vector)",
      "Severity": "Low",
      "Contracts": [
        "LandManager.sol"
      ],
      "Description": "Inside ```_farmPlots``` the unsigned total Schnibbles is cast to signed int before applying bonuses:\n```solidity\nschnibblesTotal = (timestamp - _toiler.lastToilDate) * BASE_SCHNIBBLE_RATE;\n...\nint256(schnibblesTotal) + (int256(schnibblesTotal) * finalBonus)\n```\nShould ```schnibblesTotal``` ever exceed ```type(int256).max``` (≈2.3e77), the cast will revert, halting farming for the caller. While unlikely under normal parameters, an unexpectedly large ```BASE_SCHNIBBLE_RATE``` or extreme time delta caused by paused contracts could trigger a denial-of-service.",
      "Recommendation": ""
    }
  ]
}