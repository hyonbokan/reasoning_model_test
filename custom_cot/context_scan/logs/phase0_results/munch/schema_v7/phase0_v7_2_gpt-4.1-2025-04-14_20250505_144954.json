{
  "analyzed_contracts": [
    {
      "id": "LandManager.sol",
      "file_name": "LandManager.sol",
      "core_purpose_raw": "The LandManager contract manages the relationship between landlords (who own plots of land by locking tokens) and users who stake their Munchable NFTs on these plots to earn Schnibbles rewards. It handles land ownership, tax rates, staking/unstaking of NFTs, reward generation and distribution, and integrates with LockManager, AccountManager, MunchNFT, and NFTAttributesManager. The contract enforces limits on staked NFTs, manages plot metadata, and splits rewards between landlords and stakers according to tax rates.",
      "core_purpose_digest": "Manages NFT staking on virtual land, reward distribution, and landlord-tenant logic in a farming game.",
      "upgradeability_pattern": "UUPS",
      "consumed_interfaces": [
        "ILandManager",
        "ILockManager",
        "IAccountManager",
        "INFTAttributesManager",
        "IERC721"
      ],
      "compiler_version": "0.8.25",
      "identified_roles": [
        "admin",
        "landlord",
        "munchable owner",
        "player"
      ],
      "key_state_vars": [
        "BASE_SCHNIBBLE_RATE",
        "DEFAULT_TAX_RATE",
        "MAX_TAX_RATE",
        "MIN_TAX_RATE",
        "PRICE_PER_PLOT",
        "RARITY_BONUSES",
        "REALM_BONUSES",
        "accountManager",
        "lockManager",
        "munchNFT",
        "munchableOwner",
        "munchablesStaked",
        "nftAttributesManager",
        "plotMetadata",
        "plotOccupied",
        "toilerState"
      ],
      "key_functions": [
        "_farmPlots",
        "_getMainAccountRequireRegistered",
        "_getNumPlots",
        "_removeTokenIdFromStakedList",
        "configUpdated",
        "farmPlots",
        "initialize",
        "stakeMunchable",
        "transferToUnoccupiedPlot",
        "triggerPlotMetadata",
        "unstakeMunchable",
        "updatePlotMetadata",
        "updateTaxRate"
      ],
      "external_dependencies": [
        "AccountManager",
        "ConfigStorage",
        "LockManager",
        "MunchNFT",
        "NFTAttributesManager"
      ],
      "security_notes": [
        "Uses UUPS upgradeable pattern; constructor disables initializers.",
        "ERC721 transferFrom is used for NFT transfers; ensure reentrancy safety.",
        "Staking and unstaking require proper approvals and ownership checks.",
        "Tax rate updates and plot metadata initialization are access-controlled.",
        "Limits on staked NFTs per user (max 10) enforced.",
        "Reward calculation uses block.timestamp; ensure no manipulation.",
        "Relies on external contract return values (e.g., getLockedWeightedValue); ensure trusted.",
        "No direct randomness in this contract, but integrates with attribute managers.",
        "No unchecked low-level calls or inline assembly in this contract."
      ],
      "static_findings": [],
      "config_params": [
        {
          "name": "LockManager",
          "storage_key": "StorageKey.LockManager",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:lockManager",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "lockManager = ILockManager(IConfigStorage(configStorage).getAddress(StorageKey.LockManager));"
          },
          "downstream_uses": [
            "LandManager.sol:_getNumPlots"
          ],
          "role": "address_key"
        },
        {
          "name": "AccountManager",
          "storage_key": "StorageKey.AccountManager",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:accountManager",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "accountManager = IAccountManager(IConfigStorage(configStorage).getAddress(StorageKey.AccountManager));"
          },
          "downstream_uses": [
            "LandManager.sol:_getMainAccountRequireRegistered"
          ],
          "role": "address_key"
        },
        {
          "name": "MunchNFT",
          "storage_key": "StorageKey.MunchNFT",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:munchNFT",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "munchNFT = IERC721(configStorage.getAddress(StorageKey.MunchNFT));"
          },
          "downstream_uses": [
            "LandManager.sol:stakeMunchable",
            "LandManager.sol:unstakeMunchable"
          ],
          "role": "address_key"
        },
        {
          "name": "NFTAttributesManager",
          "storage_key": "StorageKey.NFTAttributesManager",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:nftAttributesManager",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "nftAttributesManager = INFTAttributesManager(IConfigStorage(configStorage).getAddress(StorageKey.NFTAttributesManager));"
          },
          "downstream_uses": [
            "LandManager.sol:_farmPlots"
          ],
          "role": "address_key"
        },
        {
          "name": "MIN_TAX_RATE",
          "storage_key": "StorageKey.LockManager",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:MIN_TAX_RATE",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "MIN_TAX_RATE = IConfigStorage(configStorage).getUint(StorageKey.LockManager);"
          },
          "downstream_uses": [
            "LandManager.sol:updateTaxRate"
          ],
          "role": "lower_bound"
        },
        {
          "name": "MAX_TAX_RATE",
          "storage_key": "StorageKey.AccountManager",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:MAX_TAX_RATE",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "MAX_TAX_RATE = IConfigStorage(configStorage).getUint(StorageKey.AccountManager);"
          },
          "downstream_uses": [
            "LandManager.sol:updateTaxRate"
          ],
          "role": "upper_bound"
        },
        {
          "name": "DEFAULT_TAX_RATE",
          "storage_key": "StorageKey.ClaimManager",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:DEFAULT_TAX_RATE",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "DEFAULT_TAX_RATE = IConfigStorage(configStorage).getUint(StorageKey.ClaimManager);"
          },
          "downstream_uses": [
            "LandManager.sol:triggerPlotMetadata",
            "LandManager.sol:updatePlotMetadata"
          ],
          "role": "misc"
        },
        {
          "name": "BASE_SCHNIBBLE_RATE",
          "storage_key": "StorageKey.MigrationManager",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:BASE_SCHNIBBLE_RATE",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "BASE_SCHNIBBLE_RATE = IConfigStorage(configStorage).getUint(StorageKey.MigrationManager);"
          },
          "downstream_uses": [
            "LandManager.sol:_farmPlots"
          ],
          "role": "multiplier"
        },
        {
          "name": "PRICE_PER_PLOT",
          "storage_key": "StorageKey.NFTOverlord",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:PRICE_PER_PLOT",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "PRICE_PER_PLOT = IConfigStorage(configStorage).getUint(StorageKey.NFTOverlord);"
          },
          "downstream_uses": [
            "LandManager.sol:_getNumPlots"
          ],
          "role": "divisor"
        },
        {
          "name": "REALM_BONUSES",
          "storage_key": "StorageKey.RealmBonuses",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:REALM_BONUSES",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "REALM_BONUSES = configStorage.getSmallIntArray(StorageKey.RealmBonuses);"
          },
          "downstream_uses": [
            "LandManager.sol:_farmPlots"
          ],
          "role": "misc"
        },
        {
          "name": "RARITY_BONUSES",
          "storage_key": "StorageKey.RarityBonuses",
          "load_site": {
            "id": "LandManager.sol:_reconfigure:RARITY_BONUSES",
            "file": "LandManager.sol",
            "element_name": "_reconfigure",
            "unique_snippet": "RARITY_BONUSES = configStorage.getSmallUintArray(StorageKey.RarityBonuses);"
          },
          "downstream_uses": [
            "LandManager.sol:_farmPlots"
          ],
          "role": "misc"
        }
      ],
      "flag_trackers": [
        {
          "name": "toilerState[tokenId].dirty",
          "expected_setters": [
            "_farmPlots"
          ],
          "observed_setters": [
            "LandManager.sol:_farmPlots"
          ],
          "note": "Marks if a staked Munchable's plot is out of sync with current plot count; prevents reward farming on invalid plots."
        }
      ],
      "math_scale_hints": [
        {
          "id": "LandManager.sol:_farmPlots:schnibblesLandlord",
          "file": "LandManager.sol",
          "element_name": "_farmPlots",
          "op": "div",
          "lhs": "schnibblesTotal * _toiler.latestTaxRate",
          "rhs": "1e18",
          "scale": 18,
          "comment": "Tax rate is expected to be in 1e18 fixed-point format."
        }
      ]
    }
  ],
  "project_context": {
    "overall_goal_raw": "The protocol implements a virtual real estate and farming economy where users can become landlords by locking tokens to own plots of land. Landlords set tax rates, and users stake NFT characters (Munchables) on these plots to earn Schnibbles rewards. Rewards are split between landlords and stakers according to tax rates. The system integrates with LockManager, AccountManager, MunchNFT, and NFTAttributesManager, and enforces limits and invariants to maintain game balance and security.",
    "overall_goal_digest": "Virtual land/farming game: users stake NFTs on landlord plots, earn & split rewards, with tax and plot management.",
    "actors_capabilities": [
      "Admins: Update config via ConfigStorage, manage system parameters.",
      "Landlords: Own plots by locking tokens, set tax rates, receive Schnibbles from stakers.",
      "Munchable owners: Stake NFTs on plots, earn Schnibbles, transfer or unstake NFTs.",
      "Players: Register, manage accounts, interact with game mechanics."
    ],
    "core_assets": [
      "Locked tokens (determine land ownership)",
      "Munchable NFTs (ERC721 tokens)",
      "Plots of land (virtual, tracked by plotMetadata and plotOccupied)",
      "Schnibbles (reward points/currency)"
    ],
    "critical_interactions": [
      "Staking/unstaking NFTs (transferFrom between users and contract)",
      "Reward calculation and distribution (farmPlots)",
      "Tax rate updates by landlords",
      "Config parameter updates via ConfigStorage",
      "Integration with external managers (LockManager, AccountManager, NFTAttributesManager)"
    ],
    "key_assumptions": [
      {
        "id": "ctx1",
        "source": "docs",
        "context_type": "security_assumption",
        "details": "ConfigStorage and all manager contracts are trusted and correctly implemented.",
        "code_snippet": null,
        "relevance": "high"
      },
      {
        "id": "ctx2",
        "source": "docs",
        "context_type": "security_assumption",
        "details": "MunchNFT (ERC721) contract is compliant and does not allow unauthorized transfers.",
        "code_snippet": null,
        "relevance": "high"
      },
      {
        "id": "ctx3",
        "source": "docs",
        "context_type": "security_assumption",
        "details": "All actors are registered via AccountManager before interacting with LandManager.",
        "code_snippet": null,
        "relevance": "medium"
      },
      {
        "id": "ctx4",
        "source": "docs",
        "context_type": "security_assumption",
        "details": "Reward calculation based on block.timestamp is not subject to significant manipulation.",
        "code_snippet": null,
        "relevance": "medium"
      }
    ],
    "invariants": [
      {
        "id": "inv1",
        "description": "Current tax rate after update is within allowed bounds",
        "related_code": [
          "LandManager.sol:updateTaxRate"
        ],
        "origin": "check"
      },
      {
        "id": "inv2",
        "description": "After triggerPlotMetadata, metadata initialized",
        "related_code": [
          "LandManager.sol:triggerPlotMetadata"
        ],
        "origin": "check"
      },
      {
        "id": "inv3",
        "description": "After updatePlotMetadata, metadata lastUpdated is set",
        "related_code": [
          "LandManager.sol:updatePlotMetadata"
        ],
        "origin": "check"
      },
      {
        "id": "inv4",
        "description": "Stake does not increase staked munchables beyond limit",
        "related_code": [
          "LandManager.sol:stakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv5",
        "description": "After staking, plot is marked occupied",
        "related_code": [
          "LandManager.sol:stakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv6",
        "description": "After staking, munchableOwner maps token to staker",
        "related_code": [
          "LandManager.sol:stakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv7",
        "description": "toilerState initialized correctly on stake",
        "related_code": [
          "LandManager.sol:stakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv8",
        "description": "PRICE_PER_PLOT is non-zero",
        "related_code": [
          "LandManager.sol:_reconfigure"
        ],
        "origin": "check"
      },
      {
        "id": "inv9",
        "description": "DEFAULT_TAX_RATE within bounds",
        "related_code": [
          "LandManager.sol:_reconfigure"
        ],
        "origin": "check"
      },
      {
        "id": "inv10",
        "description": "After unstaking, plot is marked unoccupied",
        "related_code": [
          "LandManager.sol:unstakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv11",
        "description": "After unstaking, munchableOwner cleared",
        "related_code": [
          "LandManager.sol:unstakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv12",
        "description": "After unstaking, toilerState reset",
        "related_code": [
          "LandManager.sol:unstakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv13",
        "description": "After unstaking, munchablesStaked does not contain tokenId",
        "related_code": [
          "LandManager.sol:unstakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv14",
        "description": "Transfer to new plot updates occupancy correctly",
        "related_code": [
          "LandManager.sol:transferToUnoccupiedPlot"
        ],
        "origin": "check"
      },
      {
        "id": "inv15",
        "description": "Transfer to new plot updates latestTaxRate",
        "related_code": [
          "LandManager.sol:transferToUnoccupiedPlot"
        ],
        "origin": "check"
      },
      {
        "id": "inv16",
        "description": "After transfer, toilerState.plotId updated",
        "related_code": [
          "LandManager.sol:transferToUnoccupiedPlot"
        ],
        "origin": "check"
      },
      {
        "id": "inv17",
        "description": "_removeTokenIdFromStakedList removes the token",
        "related_code": [
          "LandManager.sol:_removeTokenIdFromStakedList"
        ],
        "origin": "check"
      },
      {
        "id": "inv18",
        "description": "_getNumPlots computes based on lockManager",
        "related_code": [
          "LandManager.sol:_getNumPlots"
        ],
        "origin": "check"
      },
      {
        "id": "inv19",
        "description": "In farming, total schnibbles split equals total",
        "related_code": [
          "LandManager.sol:_farmPlots"
        ],
        "origin": "check"
      },
      {
        "id": "inv20",
        "description": "In farming, landlord allocation never exceeds total schnibbles",
        "related_code": [
          "LandManager.sol:_farmPlots"
        ],
        "origin": "check"
      },
      {
        "id": "inv21",
        "description": "toilerState.lastToilDate updated to at most block.timestamp",
        "related_code": [
          "LandManager.sol:_farmPlots"
        ],
        "origin": "check"
      },
      {
        "id": "inv22",
        "description": "Dirty flag set when plot count decreases",
        "related_code": [
          "LandManager.sol:_farmPlots"
        ],
        "origin": "check"
      },
      {
        "id": "inv23",
        "description": "Only registered players can operate",
        "related_code": [
          "LandManager.sol:_getMainAccountRequireRegistered"
        ],
        "origin": "check"
      },
      {
        "id": "inv24",
        "description": "Tax rate update requires metadata initialized",
        "related_code": [
          "LandManager.sol:updateTaxRate"
        ],
        "origin": "check"
      },
      {
        "id": "inv25",
        "description": "Stake requires approved or operator rights",
        "related_code": [
          "LandManager.sol:stakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv26",
        "description": "Unstake only if owned by staker",
        "related_code": [
          "LandManager.sol:unstakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv27",
        "description": "Plot ID within available plots on stake",
        "related_code": [
          "LandManager.sol:stakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv28",
        "description": "Cannot stake to self",
        "related_code": [
          "LandManager.sol:stakeMunchable"
        ],
        "origin": "check"
      },
      {
        "id": "inv29",
        "description": "Cannot transfer to occupied plot",
        "related_code": [
          "LandManager.sol:transferToUnoccupiedPlot"
        ],
        "origin": "check"
      }
    ],
    "general_security_ctx": [
      {
        "id": "ctx5",
        "source": "web_context",
        "context_type": "best_practice",
        "details": "UUPS upgradeable contracts must use initializers, not constructors, and should call _disableInitializers() in the constructor.",
        "code_snippet": "constructor() { _disableInitializers(); }",
        "relevance": "high"
      },
      {
        "id": "ctx6",
        "source": "web_context",
        "context_type": "best_practice",
        "details": "ERC721 safeTransferFrom should be used to prevent NFTs from being locked in non-compliant contracts; reentrancy risks must be managed.",
        "code_snippet": null,
        "relevance": "medium"
      },
      {
        "id": "ctx7",
        "source": "web_context",
        "context_type": "tooling_note",
        "details": "Solidity 0.8.25 introduces MCOPY opcode and transient storage warnings; ensure no custom assembly is affected.",
        "code_snippet": null,
        "relevance": "low"
      },
      {
        "id": "ctx8",
        "source": "web_context",
        "context_type": "best_practice",
        "details": "Delegatecall storage collision is a risk in upgradeable contracts; use EIP-1967 and storage gaps.",
        "code_snippet": null,
        "relevance": "medium"
      }
    ],
    "static_summary": null
  }
}