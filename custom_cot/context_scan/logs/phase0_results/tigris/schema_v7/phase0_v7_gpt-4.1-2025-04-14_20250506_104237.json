{
  "analyzed_contracts": [
    {
      "id": "Trading.sol",
      "file_name": "Trading.sol",
      "core_purpose_raw": "The Trading contract is the main entry point for users to open, modify, and close leveraged perpetual trading positions. It manages market and limit orders, margin adjustments, liquidations, and fee distribution. It interacts with other protocol contracts for price verification, position NFT minting, referral management, and stablecoin vault operations. The contract enforces access control for proxy trading, validates margin and leverage, and ensures only whitelisted vaults and assets are used.",
      "core_purpose_digest": "Main contract for leveraged trading: manages positions, orders, margin, liquidations, and fees.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "ITradingExtension",
        "IPosition",
        "IGovNFT",
        "IPairsContract",
        "IStableVault",
        "IERC20",
        "ERC20Permit"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "limit order executor",
        "liquidator",
        "owner",
        "proxy",
        "referrer",
        "trader"
      ],
      "key_state_vars": [
        "allowedVault",
        "blockDelay",
        "blockDelayPassed",
        "closeFees",
        "gov",
        "limitDelay",
        "limitOrderPriceRange",
        "maxWinPercent",
        "openFees",
        "pairsContract",
        "position",
        "proxyApprovals",
        "tradingExtension",
        "vaultFundingPercent"
      ],
      "key_functions": [
        "addMargin",
        "addToPosition",
        "approveProxy",
        "cancelLimitOrder",
        "executeLimitOrder",
        "initiateCloseOrder",
        "initiateLimitOrder",
        "initiateMarketOrder",
        "limitClose",
        "liquidatePosition",
        "removeMargin",
        "setAllowedVault",
        "setBlockDelay",
        "setFees",
        "setLimitOrderPriceRange",
        "setMaxWinPercent",
        "setTradingExtension",
        "updateTpSl"
      ],
      "external_dependencies": [
        "ERC20",
        "ERC20Permit",
        "GovNFT",
        "PairsContract",
        "Position",
        "Referrals",
        "StableVault",
        "TradingExtension"
      ],
      "security_notes": [
        "Relies on off-chain signed price data; signature and node whitelisting enforced.",
        "Proxy trading requires explicit approval and time-bound validity.",
        "All vault and margin assets must be whitelisted.",
        "Handles fee distribution to DAO, referrers, bots, and burning.",
        "Enforces block delay between open/close to prevent same-tx arbitrage.",
        "Uses unchecked blocks for gas optimization; requires careful overflow/underflow review.",
        "Max win percent can cap payouts to prevent excessive profit extraction.",
        "Reentrancy protection is not explicit; relies on external contract security."
      ],
      "static_findings": [],
      "config_params": [
        {
          "name": "blockDelay",
          "storage_key": "blockDelay",
          "load_site": {
            "id": "Trading.sol:blockDelay",
            "file": "Trading.sol",
            "element_name": "blockDelay",
            "unique_snippet": "uint public blockDelay;"
          },
          "downstream_uses": [
            "Trading.sol:_checkDelay"
          ],
          "role": "misc"
        },
        {
          "name": "maxWinPercent",
          "storage_key": "maxWinPercent",
          "load_site": {
            "id": "Trading.sol:maxWinPercent",
            "file": "Trading.sol",
            "element_name": "maxWinPercent",
            "unique_snippet": "uint public maxWinPercent;"
          },
          "downstream_uses": [
            "Trading.sol:_closePosition"
          ],
          "role": "upper_bound"
        },
        {
          "name": "vaultFundingPercent",
          "storage_key": "vaultFundingPercent",
          "load_site": {
            "id": "Trading.sol:vaultFundingPercent",
            "file": "Trading.sol",
            "element_name": "vaultFundingPercent",
            "unique_snippet": "uint public vaultFundingPercent;"
          },
          "downstream_uses": [
            "Trading.sol:_updateFunding"
          ],
          "role": "multiplier"
        }
      ],
      "flag_trackers": [
        {
          "name": "paused",
          "expected_setters": [
            "TradingExtension.setPaused"
          ],
          "observed_setters": [
            "TradingExtension.setPaused"
          ],
          "note": "TradingExtension.paused() disables trading actions."
        }
      ],
      "math_scale_hints": [
        {
          "id": "Trading.sol:leverage-mul",
          "file": "Trading.sol",
          "element_name": "initiateMarketOrder",
          "op": "mul",
          "lhs": "_tradeInfo.margin",
          "rhs": "_tradeInfo.leverage",
          "scale": 1,
          "comment": "Position size = margin * leverage / 1e18"
        }
      ]
    },
    {
      "id": "TradingExtension.sol",
      "file_name": "TradingExtension.sol",
      "core_purpose_raw": "TradingExtension provides auxiliary logic for the Trading contract, including price signature verification, referral management, position validation, and open interest modification. It enforces minimum position sizes, margin asset whitelisting, and trading pause state. It also manages the set of whitelisted oracle nodes and the valid signature window for price data.",
      "core_purpose_digest": "Auxiliary contract for price verification, referrals, position validation, and open interest management.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "IPairsContract",
        "IReferrals",
        "IPosition"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "owner",
        "trading"
      ],
      "key_state_vars": [
        "allowedMargin",
        "chainlinkEnabled",
        "isNode",
        "maxGasPrice",
        "minPositionSize",
        "pairsContract",
        "paused",
        "position",
        "referrals",
        "trading",
        "validSignatureTimer"
      ],
      "key_functions": [
        "_setReferral",
        "getRef",
        "getVerifiedPrice",
        "modifyLongOi",
        "modifyShortOi",
        "setAllowedMargin",
        "setMinPositionSize",
        "setNode",
        "setPaused",
        "setValidSignatureTimer",
        "validateTrade"
      ],
      "external_dependencies": [
        "PairsContract",
        "Position",
        "Referrals"
      ],
      "security_notes": [
        "Enforces signature and node whitelisting for price data.",
        "Validates margin asset and minimum position size.",
        "Trading can be paused by owner.",
        "Gas price check to prevent high-gas attacks.",
        "Chainlink price feed can be enabled for price sanity checks."
      ],
      "static_findings": [],
      "config_params": [
        {
          "name": "validSignatureTimer",
          "storage_key": "validSignatureTimer",
          "load_site": {
            "id": "TradingExtension.sol:validSignatureTimer",
            "file": "TradingExtension.sol",
            "element_name": "validSignatureTimer",
            "unique_snippet": "uint256 public validSignatureTimer;"
          },
          "downstream_uses": [
            "TradingExtension.sol:getVerifiedPrice"
          ],
          "role": "upper_bound"
        },
        {
          "name": "maxGasPrice",
          "storage_key": "maxGasPrice",
          "load_site": {
            "id": "TradingExtension.sol:maxGasPrice",
            "file": "TradingExtension.sol",
            "element_name": "maxGasPrice",
            "unique_snippet": "uint public maxGasPrice = 1000000000000;"
          },
          "downstream_uses": [
            "TradingExtension.sol:_checkGas"
          ],
          "role": "upper_bound"
        }
      ],
      "flag_trackers": [
        {
          "name": "paused",
          "expected_setters": [
            "setPaused"
          ],
          "observed_setters": [
            "setPaused"
          ],
          "note": "TradingExtension.paused disables trading."
        }
      ],
      "math_scale_hints": [
        {
          "id": "TradingExtension.sol:spread-mul",
          "file": "TradingExtension.sol",
          "element_name": "getVerifiedPrice",
          "op": "mul",
          "lhs": "_price",
          "rhs": "_spread",
          "scale": 1,
          "comment": "Price adjusted by spread: _price +=/-= _price * _spread / DIVISION_CONSTANT"
        }
      ]
    },
    {
      "id": "Position.sol",
      "file_name": "Position.sol",
      "core_purpose_raw": "Position is an ERC721Enumerable NFT contract that represents user trading positions as NFTs. It stores trade data, manages open/closed positions, and tracks funding rates and open interest. Only whitelisted minters (e.g., Trading contract) can mint, modify, or burn positions. It supports margin/leverage updates, limit order execution, and reward/funding accounting.",
      "core_purpose_digest": "ERC721 NFT contract for user trading positions, with funding, margin, and open interest tracking.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "ERC721Enumerable",
        "IPosition"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "minter",
        "owner"
      ],
      "key_state_vars": [
        "_isMinter",
        "_openPositions",
        "_trades",
        "fundingDeltaPerSec",
        "longOi",
        "shortOi"
      ],
      "key_functions": [
        "addToPosition",
        "burn",
        "mint",
        "modifyMargin",
        "modifySl",
        "modifyTp",
        "reducePosition",
        "setMinter",
        "updateFunding"
      ],
      "external_dependencies": [
        "ERC721Enumerable"
      ],
      "security_notes": [
        "Only whitelisted minters can mint/burn/modify positions.",
        "ERC721Enumerable prevents batch minting and enforces bounds checks.",
        "Funding and open interest are updated atomically.",
        "Position data is deleted on burn to prevent stale state."
      ],
      "static_findings": [],
      "config_params": [],
      "flag_trackers": [],
      "math_scale_hints": [
        {
          "id": "Position.sol:funding-mul",
          "file": "Position.sol",
          "element_name": "updateFunding",
          "op": "mul",
          "lhs": "fundingDeltaPerSec",
          "rhs": "block.timestamp-lastUpdate",
          "scale": 1,
          "comment": "Funding accrual per second for open positions"
        }
      ]
    },
    {
      "id": "PairsContract.sol",
      "file_name": "PairsContract.sol",
      "core_purpose_raw": "PairsContract manages the set of tradable assets, their parameters (leverage, fee multiplier, funding rate), and open interest tracking for each asset and margin token. It enforces max open interest limits and allows the owner to add, update, or pause assets. Only the protocol can modify open interest.",
      "core_purpose_digest": "Manages tradable assets, parameters, and open interest for each asset/margin pair.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "IPairsContract"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "owner",
        "protocol"
      ],
      "key_state_vars": [
        "_idToAsset",
        "_idToOi",
        "allowedAsset",
        "maxBaseFundingRate"
      ],
      "key_functions": [
        "addAsset",
        "modifyLongOi",
        "modifyShortOi",
        "pauseAsset",
        "setAssetBaseFundingRate",
        "setAssetChainlinkFeed",
        "setMaxOi",
        "updateAssetFeeMultiplier",
        "updateAssetLeverage"
      ],
      "external_dependencies": [],
      "security_notes": [
        "Owner can add, update, or pause assets and set max open interest.",
        "Protocol-only functions for open interest modification.",
        "Enforces max leverage and open interest per asset."
      ],
      "static_findings": [],
      "config_params": [
        {
          "name": "maxBaseFundingRate",
          "storage_key": "maxBaseFundingRate",
          "load_site": {
            "id": "PairsContract.sol:maxBaseFundingRate",
            "file": "PairsContract.sol",
            "element_name": "maxBaseFundingRate",
            "unique_snippet": "uint256 private maxBaseFundingRate = 1e10;"
          },
          "downstream_uses": [
            "PairsContract.sol:setAssetBaseFundingRate"
          ],
          "role": "upper_bound"
        }
      ],
      "flag_trackers": [],
      "math_scale_hints": []
    },
    {
      "id": "StableVault.sol",
      "file_name": "StableVault.sol",
      "core_purpose_raw": "StableVault allows users to deposit whitelisted stablecoins and receive protocol stable tokens (tigAsset), or withdraw stablecoins by burning tigAsset. It manages the list of allowed tokens and handles decimal conversions for minting/burning.",
      "core_purpose_digest": "Vault for stablecoin deposits/withdrawals, minting/burning protocol stable tokens.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "IERC20",
        "IERC20Mintable"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "owner"
      ],
      "key_state_vars": [
        "allowed",
        "stable",
        "tokens"
      ],
      "key_functions": [
        "delistToken",
        "deposit",
        "depositWithPermit",
        "listToken",
        "withdraw"
      ],
      "external_dependencies": [],
      "security_notes": [
        "Only whitelisted tokens can be deposited.",
        "Handles decimal conversion for minting/burning.",
        "No reentrancy guard; relies on external contract security."
      ],
      "static_findings": [],
      "config_params": [],
      "flag_trackers": [],
      "math_scale_hints": []
    },
    {
      "id": "StableToken.sol",
      "file_name": "StableToken.sol",
      "core_purpose_raw": "StableToken is an ERC20 token with permit functionality, used as the protocol's stablecoin. Only whitelisted minters can mint or burn tokens.",
      "core_purpose_digest": "ERC20 stablecoin with permit; mint/burn restricted to whitelisted minters.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "ERC20Permit"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "minter",
        "owner"
      ],
      "key_state_vars": [
        "isMinter"
      ],
      "key_functions": [
        "burnFrom",
        "mintFor",
        "setMinter"
      ],
      "external_dependencies": [],
      "security_notes": [
        "Only whitelisted minters can mint/burn.",
        "Permit support for gasless approvals."
      ],
      "static_findings": [],
      "config_params": [],
      "flag_trackers": [],
      "math_scale_hints": []
    },
    {
      "id": "Lock.sol",
      "file_name": "Lock.sol",
      "core_purpose_raw": "Lock allows users to lock protocol tokens for a period to create bonds and earn rewards. It manages allowed assets, tracks total locked amounts, and interacts with BondNFT and GovNFT contracts for bond creation, extension, release, and reward distribution.",
      "core_purpose_digest": "Allows users to lock tokens for bonds and rewards; manages allowed assets and interacts with BondNFT/GovNFT.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "IBondNFT",
        "IGovNFT",
        "IERC20"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "bond owner",
        "owner"
      ],
      "key_state_vars": [
        "allowedAssets",
        "bondNFT",
        "govNFT",
        "maxPeriod",
        "minPeriod",
        "totalLocked"
      ],
      "key_functions": [
        "claim",
        "claimDebt",
        "claimGovFees",
        "editAsset",
        "extendLock",
        "lock",
        "release",
        "sendNFTs"
      ],
      "external_dependencies": [
        "BondNFT",
        "GovNFT"
      ],
      "security_notes": [
        "Only allowed assets can be locked.",
        "Owner can edit allowed assets and retrieve NFTs.",
        "Relies on BondNFT and GovNFT for reward logic."
      ],
      "static_findings": [],
      "config_params": [
        {
          "name": "minPeriod",
          "storage_key": "minPeriod",
          "load_site": {
            "id": "Lock.sol:minPeriod",
            "file": "Lock.sol",
            "element_name": "minPeriod",
            "unique_snippet": "uint public constant minPeriod = 7;"
          },
          "downstream_uses": [
            "Lock.sol:lock"
          ],
          "role": "lower_bound"
        },
        {
          "name": "maxPeriod",
          "storage_key": "maxPeriod",
          "load_site": {
            "id": "Lock.sol:maxPeriod",
            "file": "Lock.sol",
            "element_name": "maxPeriod",
            "unique_snippet": "uint public constant maxPeriod = 365;"
          },
          "downstream_uses": [
            "Lock.sol:lock"
          ],
          "role": "upper_bound"
        }
      ],
      "flag_trackers": [],
      "math_scale_hints": []
    },
    {
      "id": "BondNFT.sol",
      "file_name": "BondNFT.sol",
      "core_purpose_raw": "BondNFT is an ERC721Enumerable NFT contract representing user bonds created by locking protocol tokens. It tracks bond data, reward shares, and pending rewards. Only the manager contract can mint, extend, or release bonds. It manages allowed assets and distributes rewards to bond holders.",
      "core_purpose_digest": "ERC721 NFT for user bonds; tracks shares, rewards, and manages allowed assets.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "ERC721Enumerable"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "manager",
        "owner"
      ],
      "key_state_vars": [
        "accRewardsPerShare",
        "allowedAsset",
        "assets",
        "assetsIndex",
        "baseURI",
        "epoch",
        "manager",
        "totalBonds",
        "totalShares"
      ],
      "key_functions": [
        "addAsset",
        "claim",
        "claimDebt",
        "createLock",
        "distribute",
        "extendLock",
        "release",
        "setAllowedAsset",
        "setManager"
      ],
      "external_dependencies": [],
      "security_notes": [
        "Only manager can mint/extend/release bonds.",
        "Tracks reward shares and distributes rewards per epoch.",
        "Enforces asset whitelisting and period limits."
      ],
      "static_findings": [],
      "config_params": [],
      "flag_trackers": [],
      "math_scale_hints": []
    },
    {
      "id": "GovNFT.sol",
      "file_name": "GovNFT.sol",
      "core_purpose_raw": "GovNFT is an ERC721Enumerable NFT contract for protocol governance. Holders receive rewards from trading fees. The contract supports cross-chain NFT bridging via LayerZero, reward distribution, and batch operations. Only the owner can mint or bridge NFTs.",
      "core_purpose_digest": "Governance NFT for fee rewards; supports cross-chain bridging and batch operations.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "ERC721Enumerable",
        "ILayerZeroReceiver",
        "IGovNFT"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "owner"
      ],
      "key_state_vars": [
        "MAX",
        "accRewardsPerNFT",
        "assets",
        "assetsIndex",
        "baseURI",
        "counter",
        "endpoint",
        "failedMessages",
        "gas",
        "isTrustedAddress",
        "maxBridge",
        "userDebt",
        "userPaid"
      ],
      "key_functions": [
        "addAsset",
        "claim",
        "crossChain",
        "distribute",
        "mint",
        "setAllowedAsset",
        "setEndpoint",
        "setTrustedAddress"
      ],
      "external_dependencies": [
        "LayerZero"
      ],
      "security_notes": [
        "Only owner can mint or bridge NFTs.",
        "Relies on LayerZero endpoint for cross-chain security.",
        "Tracks and distributes rewards to NFT holders."
      ],
      "static_findings": [],
      "config_params": [
        {
          "name": "maxBridge",
          "storage_key": "maxBridge",
          "load_site": {
            "id": "GovNFT.sol:maxBridge",
            "file": "GovNFT.sol",
            "element_name": "maxBridge",
            "unique_snippet": "uint256 public maxBridge = 20;"
          },
          "downstream_uses": [
            "GovNFT.sol:crossChain"
          ],
          "role": "upper_bound"
        }
      ],
      "flag_trackers": [],
      "math_scale_hints": []
    },
    {
      "id": "Referrals.sol",
      "file_name": "Referrals.sol",
      "core_purpose_raw": "Referrals manages referral codes and referred users. It allows users to create referral codes and the protocol to set referred users. Only the protocol can set referred relationships.",
      "core_purpose_digest": "Manages referral codes and referred users for trading fee sharing.",
      "upgradeability_pattern": null,
      "consumed_interfaces": [
        "IReferrals"
      ],
      "compiler_version": ">=0.8.0",
      "identified_roles": [
        "owner",
        "protocol"
      ],
      "key_state_vars": [
        "_referral",
        "_referred",
        "protocol"
      ],
      "key_functions": [
        "createReferralCode",
        "getReferral",
        "getReferred",
        "setProtocol",
        "setReferred"
      ],
      "external_dependencies": [],
      "security_notes": [
        "Only protocol can set referred users.",
        "Referral codes are unique and mapped to addresses."
      ],
      "static_findings": [],
      "config_params": [],
      "flag_trackers": [],
      "math_scale_hints": []
    }
  ],
  "project_context": {
    "overall_goal_raw": "The TigerSwap protocol is a decentralized perpetual trading platform that allows users to trade various assets with leverage. The protocol enables traders to open long or short positions, set take-profit and stop-loss orders, and manage their positions through a comprehensive set of functions. It consists of interconnected smart contracts for trading, position NFTs, asset management, governance, bonds, stablecoins, and vaults. The protocol features leveraged trading, market/limit orders, position management, liquidations, fee and funding systems, referrals, and meta-transactions.",
    "overall_goal_digest": "Decentralized leveraged perpetual trading platform with NFT positions, vaults, governance, and rewards.",
    "actors_capabilities": [
      "Governance: modify protocol parameters/settings.",
      "Limit Order Executors: execute limit orders for a fee.",
      "Liquidators: liquidate undercollateralized positions.",
      "Proxy Wallets: trade on behalf of traders with approval.",
      "Referrers: refer users and earn trading fee share.",
      "Traders: open/manage positions, set TP/SL, add/remove margin, approve proxies."
    ],
    "core_assets": [
      "BondNFT",
      "GovNFT",
      "Lock",
      "PairsContract",
      "Position NFT",
      "StableToken",
      "StableVault",
      "Trading contract",
      "TradingExtension"
    ],
    "critical_interactions": [
      "Trading <-> TradingExtension: price verification, OI modification, validation.",
      "Trading <-> Position: mint/burn/modify position NFTs.",
      "Trading <-> PairsContract: asset/parameter queries, OI updates.",
      "Trading <-> StableVault: margin deposits/withdrawals.",
      "Trading <-> GovNFT: fee distribution.",
      "TradingExtension <-> Referrals: referral management.",
      "Lock <-> BondNFT/GovNFT: bond creation, extension, rewards.",
      "GovNFT <-> LayerZero: cross-chain NFT bridging."
    ],
    "key_assumptions": [
      {
        "id": "assume-1",
        "source": "docs",
        "context_type": "security_assumption",
        "details": "Off-chain price data is signed by whitelisted oracles and verified on-chain."
      },
      {
        "id": "assume-2",
        "source": "docs",
        "context_type": "security_assumption",
        "details": "Only whitelisted vaults and margin assets are used for trading."
      },
      {
        "id": "assume-3",
        "source": "docs",
        "context_type": "security_assumption",
        "details": "Only protocol/owner can modify critical parameters (fees, leverage, OI, etc)."
      },
      {
        "id": "assume-4",
        "source": "web_context",
        "context_type": "security_assumption",
        "details": "LayerZero cross-chain security is isolated per channel and parameters are immutable except by delegate."
      },
      {
        "id": "assume-5",
        "source": "web_context",
        "context_type": "security_assumption",
        "details": "Chainlink price feeds are upgradeable and controlled by multisig; staleness and fallback logic must be handled."
      }
    ],
    "invariants": [
      {
        "id": "inv-1",
        "description": "_handleDeposit preserves tigAsset balance",
        "related_code": [
          "Trading.sol:_handleDeposit"
        ],
        "origin": "check"
      },
      {
        "id": "inv-2",
        "description": "Stop-loss price must be valid relative to market price",
        "related_code": [
          "Trading.sol:_checkSl"
        ],
        "origin": "check"
      },
      {
        "id": "inv-3",
        "description": "StableVault input must be whitelisted and token allowed",
        "related_code": [
          "Trading.sol:_checkVault"
        ],
        "origin": "check"
      },
      {
        "id": "inv-4",
        "description": "Proxy must be approved before trading on behalf",
        "related_code": [
          "Trading.sol:_validateProxy"
        ],
        "origin": "check"
      },
      {
        "id": "inv-5",
        "description": "Trade margin*leverage must satisfy minPositionSize",
        "related_code": [
          "TradingExtension.sol:validateTrade"
        ],
        "origin": "check"
      },
      {
        "id": "inv-6",
        "description": "Trade leverage within allowed bounds",
        "related_code": [
          "TradingExtension.sol:validateTrade"
        ],
        "origin": "check"
      },
      {
        "id": "inv-7",
        "description": "Verified price signature must be from an allowed node",
        "related_code": [
          "TradingLibrary.sol:verifyPrice"
        ],
        "origin": "check"
      },
      {
        "id": "inv-8",
        "description": "Price timestamp must be within valid signature window",
        "related_code": [
          "TradingLibrary.sol:verifyPrice"
        ],
        "origin": "check"
      },
      {
        "id": "inv-9",
        "description": "updateFunding must set OI exactly to parameters",
        "related_code": [
          "Position.sol:updateFunding"
        ],
        "origin": "check"
      },
      {
        "id": "inv-10",
        "description": "fundingDeltaPerSec computed correctly in updateFunding",
        "related_code": [
          "Position.sol:updateFunding"
        ],
        "origin": "check"
      },
      {
        "id": "inv-11",
        "description": "mint initializes trade and assigns ownership",
        "related_code": [
          "Position.sol:mint"
        ],
        "origin": "check"
      },
      {
        "id": "inv-12",
        "description": "PairsContract.modifyLongOi never exceeds maxOi on open",
        "related_code": [
          "PairsContract.sol:modifyLongOi"
        ],
        "origin": "check"
      },
      {
        "id": "inv-13",
        "description": "PairsContract.modifyShortOi never exceeds maxOi on open",
        "related_code": [
          "PairsContract.sol:modifyShortOi"
        ],
        "origin": "check"
      },
      {
        "id": "inv-14",
        "description": "StableVault deposit mints correct stable amount",
        "related_code": [
          "StableVault.sol:deposit"
        ],
        "origin": "check"
      },
      {
        "id": "inv-15",
        "description": "Limit orders must respect delay before execution",
        "related_code": [
          "Trading.sol:executeLimitOrder"
        ],
        "origin": "check"
      }
    ],
    "general_security_ctx": [
      {
        "id": "ctx-1",
        "source": "web_context",
        "context_type": "tooling_note",
        "details": "LayerZero isolates security per application pathway; channel parameters are immutable except by delegate."
      },
      {
        "id": "ctx-2",
        "source": "web_context",
        "context_type": "best_practice",
        "details": "Chainlink feeds: always check price freshness and handle fallback logic; never hardcode feed addresses."
      },
      {
        "id": "ctx-3",
        "source": "web_context",
        "context_type": "best_practice",
        "details": "OpenZeppelin ERC721Enumerable: batch minting is prohibited, bounds checks enforced, and enumeration is atomic."
      },
      {
        "id": "ctx-4",
        "source": "web_context",
        "context_type": "best_practice",
        "details": "On Arbitrum, blockhash, coinbase, difficulty, and prevrandao are not secure for randomness."
      }
    ],
    "static_summary": null
  }
}