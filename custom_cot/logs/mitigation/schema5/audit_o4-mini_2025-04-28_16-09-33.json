{
  "document_id": "audit_run_schema5",
  "findings": [
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                285,
                286
              ],
              "why": "Signed-to-unsigned cast may overflow"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                285,
                286
              ],
              "why": "Allows minting near 2^256 by negative bonus"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The cast of a potentially negative int256 result back to uint256 after applying a signed bonus allows the value to wrap to ~2^256−1 when finalBonus is negative. Because Solidity ≥0.8 reverts on arithmetic but not on casts, this unchecked conversion yields enormous rewards. The exploit is trivial for anyone controlling the on‐chain config bonuses.",
      "adjustment": {
        "index": 0,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Solidity version pragma specifies 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                203
              ],
              "why": "transferToUnoccupiedPlot is external and callable by any user"
            }
          ]
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                286
              ],
              "why": "enables retroactive reward calculation when stale plotId is used"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot updates occupancy but never updates toilerState[tokenId].plotId, leaving a stale plotId in the struct. When plots are later reduced, the farming logic enters the outdated‐plotId branch, granting retroactive Schnibbles. The fix is to assign toilerState[tokenId].plotId = new plotId in the transfer function.",
      "adjustment": {
        "index": 1,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": null
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": null
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": null
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": null
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": null
            }
          ]
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "high",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "An off-by-one logic error in stakeMunchable allows a player to stake 11 munchables by using '>' instead of '>=' for the length check, violating the intended cap. This enables users to gain extra resources. The severity is upgraded to medium based on the impact-likelihood matrix.",
      "adjustment": {
        "index": 2,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Severity upgraded to medium per impact-likelihood matrix."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma ≥0.8.0"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "PRICE_PER_PLOT is set from config without validation, allowing it to be zero and causing a division-by-zero revert in _getNumPlots which blocks all dependent functionality. This misconfiguration leads to a full DoS of staking, transfer, and farming operations.",
      "adjustment": {
        "index": 3,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Validate PRICE_PER_PLOT > 0 during initialization or configuration updates to prevent division-by-zero."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "external updatePlayer call inside loop"
            },
            {
              "file": "LandManager.sol",
              "lines": [
                310
              ],
              "why": "external updatePlayer call after loop"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "state changes in stakeMunchable occur after farmPlots external calls"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                41
              ],
              "why": "no nonReentrant guard present"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "external call interrupts stateful loop without CEI"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The internal _farmPlots function makes unguarded external calls to AccountManager.updatePlayer before completing critical state updates in functions like stakeMunchable. A malicious AccountManager can re-enter LandManager during these calls, exploiting partially-updated state to bypass checks or steal NFTs. Adding a nonReentrant guard or restructuring to follow CEI prevents this re-entrancy risk.",
      "adjustment": {
        "index": 4,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Implement nonReentrant or move external calls to the end of functions following the CEI pattern to prevent re-entrancy."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "yes",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "yes",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function updates state to reflect plot occupancy and tax rate but fails to update the toilerState[tokenId].plotId, causing an inconsistency between stored plot location and the mapping. This discrepancy can mark tokens as dirty incorrectly and break reward calculations in _farmPlots, resulting in denial of service for farming functionality. A patch must set toilerState[tokenId].plotId = plotId to maintain correct staking state.",
      "adjustment": {
        "index": 5,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": "calls external accountManager.updatePlayer"
            }
          ]
        },
        "R_2": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": "state changes occur before external calls; no internal updates after"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                229
              ],
              "why": "no nonReentrant guard on farmPlots/_farmPlots"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                262,
                301
              ],
              "why": "internal state (dirty flag) set before external call, breaking CEI"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The `dirty` flag in `_farmPlots` is set permanently when a landlord’s plots drop below a staked Munchable’s `plotId`, but there is no code path to reset it even if the landlord later restores their plot count, permanently disabling farming. This is a logic bug affecting user experience and cannot be auto-corrected without unstaking. A fix should allow clearing the `dirty` flag when plots are replenished.",
      "adjustment": {
        "index": 6,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity version"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "high",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The length check uses `>` instead of `>=`, allowing staking an 11th Munchable instead of enforcing a 10‐item limit. This is a logic bug unrelated to arithmetic or external interactions and cannot be exploited beyond bypassing the intended cap. According to the impact/likelihood matrix, this yields a medium severity.",
      "adjustment": {
        "index": 7,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Severity raised based on impact/likelihood matrix"
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287
              ],
              "why": "overflow in int256→uint256 cast"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287
              ],
              "why": "Solidity ≥0.8 with no unchecked, but explicit cast bypasses checks"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The calculation of `schnibblesTotal` uses a signed-to-unsigned cast that can wrap negative results to large uint256 values rather than revert, particularly when `finalBonus` is below –100. Although Solidity 0.8.25 reverts on arithmetic under/overflows, the explicit `uint256(...)` cast bypasses these checks. A bounds check on `finalBonus` or ensuring the intermediate result is non-negative mitigates the wrap risk.",
      "adjustment": {
        "index": 8,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": []
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": []
        },
        "O_4": {
          "answer": "no",
          "refs": []
        },
        "O_5": {
          "answer": "no",
          "refs": []
        },
        "R_1": {
          "answer": "no",
          "refs": []
        },
        "R_2": {
          "answer": "no",
          "refs": []
        },
        "R_3": {
          "answer": "no",
          "refs": []
        },
        "R_4": {
          "answer": "no",
          "refs": []
        },
        "R_5": {
          "answer": "no",
          "refs": []
        },
        "A_1": {
          "answer": "no",
          "refs": []
        },
        "A_2": {
          "answer": "no",
          "refs": []
        },
        "A_3": {
          "answer": "no",
          "refs": []
        },
        "F_1": {
          "answer": "no",
          "refs": []
        },
        "F_2": {
          "answer": "no",
          "refs": []
        },
        "F_3": {
          "answer": "no",
          "refs": []
        },
        "F_4": {
          "answer": "no",
          "refs": []
        },
        "F_5": {
          "answer": "no",
          "refs": []
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The `_farmPlots` function redundantly calls `accountManager.updatePlayer` in each iteration for the same landlord, causing unnecessary external calls and increased gas costs. Consolidating landlord updates outside the loop would optimize gas usage without affecting correctness.",
      "adjustment": {
        "index": 9,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Consider batching or aggregating landlord updates outside the loop to reduce external calls per landlord."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": ""
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The finding highlights a mismatch between StorageKey enum values and the expected types for getUint calls, risking incorrect initialization of critical parameters. Clarifying or correcting the StorageKey mappings in ConfigStorage will ensure the tax rates, schnibble rates, and plot pricing load properly.",
      "adjustment": {
        "index": 10,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The stakeMunchable function allows staking to a landlord without checking that the landlord’s plot metadata has been initialized. As a result, plotMetadata[landlord].currentTaxRate defaults to zero, letting users avoid landlord taxation and skew rewards.",
      "adjustment": {
        "index": 11,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Add a require(plotMetadata[landlord].lastUpdated != 0) check in stakeMunchable to ensure landlord metadata is initialized before staking."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The `_farmPlots` loop uses a `uint8` index which caps iterations at 255, creating an unnecessary artificial limit compared to the `uint256` array length. Switching to a `uint256` counter aligns types and future-proofs against changes. This is a low-impact best practice enhancement.",
      "adjustment": {
        "index": 12,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "transferToUnoccupiedPlot fails to update the stored toilerState[tokenId].plotId, leaving the old plotId and causing the new plot to remain occupied indefinitely. This state inconsistency leads to incorrect freeing of plots upon unstaking and misleading farming events. The issue has high impact and occurs with medium likelihood.",
      "adjustment": {
        "index": 13,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Insert `toilerState[tokenId].plotId = plotId;` in transferToUnoccupiedPlot after updating plotOccupied to ensure state consistency."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                346
              ],
              "why": "Calls external lockManager"
            }
          ]
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function `_getNumPlots` divides by `PRICE_PER_PLOT` without ensuring it is non-zero, which under misconfiguration leads to a division-by-zero revert and halts key functionality. This creates a denial-of-service risk affecting staking and farming operations.",
      "adjustment": {
        "index": 14,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Add a require or configuration check to ensure PRICE_PER_PLOT is non-zero before performing the division to prevent a division-by-zero revert."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "Calls accountManager.updatePlayer"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "State changes occur after transferFrom"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                174,
                200,
                229
              ],
              "why": "No nonReentrant guard on these functions"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "Effects applied after interaction"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                233
              ],
              "why": "Reentrancy could enable state manipulation"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "Key functions perform external calls to accountManager and ERC721 tokens without any reentrancy guard, and they violate the Checks-Effects-Interactions pattern by performing state changes after interactions. This creates a risk of malicious reentry and state corruption. Adding nonReentrant modifiers or restructuring to effects-before-interactions will mitigate the issue.",
      "adjustment": {
        "index": 15,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Add ReentrancyGuard (nonReentrant) to external-facing functions or refactor to follow the Checks-Effects-Interactions pattern."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "Calls external ERC721.transferFrom"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "State updates occur after the external call"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "Interaction occurs before effects, violating CEI"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The check `if (munchablesStaked[mainAccount].length > 10)` allows staking when length equals 10, enabling an 11th NFT. This off-by-one logic flaw bypasses the intended limit and should be tightened.",
      "adjustment": {
        "index": 16,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The contract accepts ERC-721 tokens via transferFrom but does not implement IERC721Receiver, causing safeTransferFrom calls to revert and reducing interoperability. Implementing onERC721Received would restore safe transfer support. This is a low-impact best practice recommendation.",
      "adjustment": {
        "index": 17,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function frees and reassigns plots but never updates toilerState[tokenId].plotId, leaving stale state. This allows double-occupation of freed plots and corrupts reward accounting, breaking core invariants.",
      "adjustment": {
        "index": 18,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The code checks `munchablesStaked.length > 10` before pushing a new token, so with exactly 10 staked the check passes and allows staking an 11th. This off‐by‐one breaks the intended invariant and can lead to logic errors or reverts in loops that assume at most ten items. The fix is to use `>= 10` or adjust the comparison to prevent the 11th stake.",
      "adjustment": {
        "index": 19,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                283
              ],
              "why": "unchecked multiplication of time interval and rate"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                283
              ],
              "why": "overflow auto-reverts in Solidity >=0.8 without unchecked"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "auto_checked",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The multiplication of an unbounded time delta and a config-driven rate can overflow and revert under Solidity ≥0.8. This is auto-checked by the compiler (no unchecked block), causing unintended DoS if the rate is set too high. No further mitigation is needed beyond conservative configuration.",
      "adjustment": {
        "index": 20,
        "new_severity": "medium",
        "should_be_removed": true,
        "comments": "Overflow auto-reverts under Solidity ≥0.8 (no unchecked block), so no runtime vulnerability exists."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The contract loads numeric constants from config keys that actually hold addresses, causing these parameters to be astronomically large. This misconfiguration makes core functions revert (e.g., PlotTooHighError) and effectively disables the protocol. Correct storage keys or dedicated numeric entries are required.",
      "adjustment": {
        "index": 21,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Use the proper StorageKey values for numeric parameters or add dedicated config entries for these constants."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                248
              ],
              "why": null
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                141
              ],
              "why": null
            }
          ]
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                248
              ],
              "why": null
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "auto_checked",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The loop uses a uint8 counter which overflows at 255 and reverts under Solidity 0.8's checked arithmetic, but staking is capped at 10 Munchables so the overflow is unreachable. The auto-checked overflow handling prevents unintended wrapping. The finding can be removed as the issue is auto-checked by the compiler.",
      "adjustment": {
        "index": 22,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "transferToUnoccupiedPlot is an internal function call"
            }
          ]
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "Not updating lastToilDate in transferToUnoccupiedPlot is a minor UX inconsistency that can yield zero Schnibbles on the first farming call but poses no security or state corruption risk. The issue does not affect contract invariants or enable exploits. It is best classified as low‐severity informational feedback.",
      "adjustment": {
        "index": 23,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Consider updating lastToilDate in transferToUnoccupiedPlot to reset the farming timer for intuitive behavior."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25;"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84
              ],
              "why": "Mismatched storage keys used for critical configuration values in _reconfigure()"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The _reconfigure() function loads critical parameters using storage keys intended for contract addresses, causing tax rates, reward rates, and plot prices to be set to incorrect values. This misconfiguration will result in system-wide economic malfunction and exposes the protocol to critical failures.",
      "adjustment": {
        "index": 24,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "When available plots decrease, staked Munchables on now-invalid plots are marked dirty and silently excluded from future reward calculations without any user notification, causing unexpected loss of rewards. This is a functional/usability issue rather than a security vulnerability. Users should be informed or provided a recovery mechanism when their Munchable stops earning.",
      "adjustment": {
        "index": 25,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                271,
                285
              ],
              "why": "bonus applied and int-to-uint conversion"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25 enables checked arithmetic"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "yes",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                284,
                287
              ],
              "why": "negative int conversion to uint triggers revert"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "Casting a potentially negative reward calculation result back to uint256 under Solidity ≥0.8 causes a revert, leading to denial of service in `_farmPlots`. A business requirement exists to handle negative bonuses by clamping or guarding against underflow. Implementing bounds checks or saturating to zero prevents unwanted reverts.",
      "adjustment": {
        "index": 26,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                141
              ],
              "why": null
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The comparison in stakeMunchable uses '>' instead of '>=' allowing an 11th munchable to be staked, leading to an off-by-one logic error. This violates the intended maximum of 10 and may break downstream assumptions. The comparator should be updated to '>=' to enforce the correct limit.",
      "adjustment": {
        "index": 27,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Change comparison to '>= 10' to correctly limit to 10 staked Munchables."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                248
              ],
              "why": "Loop counter declared as uint8 over staked.length"
            }
          ]
        },
        "F_5": {
          "answer": "yes",
          "refs": null
        },
        "removal_reason": "auto_checked",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The loop counter is declared as uint8 but the staked array is capped at 11 items and Solidity 0.8 auto-reverts on overflow, so no practical overflow can occur. This is a theoretical type-consistency issue rather than a true vulnerability. It is therefore a best-practice suggestion.",
      "adjustment": {
        "index": 28,
        "new_severity": "low",
        "should_be_removed": true,
        "comments": "Loop counter overflow is impossible given the 11-item cap and auto-checked overflow in Solidity 0.8."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The swap-and-pop pattern used changes the order of the staked Munchables array, which is a non-security UX issue that may confuse consumers expecting a stable order. There is no functional or security impact, making this a low-severity best practice consideration. Documenting the behavior or using an ordered removal method can address potential confusion.",
      "adjustment": {
        "index": 29,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Consider documenting the unordered behavior or, if order matters for external integrations, implement an order-preserving removal method."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The code computes array indices for REALM_BONUSES and RARITY_BONUSES without validating they fall within their array lengths, risking out-of-bounds reverts when unexpected attribute values occur. Since attributes and config arrays are likely constrained by external contracts, the probability of failure is low but explicit checks would improve robustness. Adding explicit bounds checks prevents unintended reverts and provides clearer error handling.",
      "adjustment": {
        "index": 30,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Consider validating array bounds to prevent out-of-range reverts."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The stakeMunchable function uses `plotMetadata[landlord].currentTaxRate` without verifying that the landlord’s metadata has been initialized, defaulting to zero tax. A require check on `plotMetadata[landlord].lastUpdated != 0` should be added before staking. This leads to landlords receiving no tax but does not pose a direct security exploit.",
      "adjustment": {
        "index": 31,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Require `plotMetadata[landlord].lastUpdated != 0` before allowing stakeMunchable to proceed."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Solidity 0.8.25 ensures built-in overflow checks"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": "external calls to accountManager.updatePlayer"
            }
          ]
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "state updates and interactions are interleaved without isolation"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233
              ],
              "why": "no reentrancy guard or CEI enforcement"
            }
          ]
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The `_farmPlots` function makes unguarded external calls to `accountManager.updatePlayer` inside its loop, enabling a malicious accountManager to re-enter before state updates complete. There is no `nonReentrant` guard or strict Checks-Effects-Interactions pattern. This can lead to unexpected state manipulation and asset loss.",
      "adjustment": {
        "index": 32,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity >=0.8.0"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "transferToUnoccupiedPlot is not in an unchecked block"
            }
          ]
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "no reentrancy guard present"
            }
          ]
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "function is internal logic only"
            }
          ]
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "yes",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function reassigns occupancy and emits events but never updates toilerState[tokenId].plotId, causing state and event mismatches and misallocation of rewards. A plotId assignment must be inserted to maintain consistency.",
      "adjustment": {
        "index": 33,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The code computes array indices for REALM_BONUSES and RARITY_BONUSES from NFT attributes without verifying they fall within the arrays’ bounds. An out-of-range index will revert and halt all farming operations, causing a denial of service. Adding explicit bounds checks on these indices prevents unexpected reverts.",
      "adjustment": {
        "index": 34,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Add explicit bounds checks for REALM_BONUSES and RARITY_BONUSES accesses to prevent out-of-bounds reverts."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                345,
                346
              ],
              "why": "_getNumPlots is called by public functions accessible to unprivileged users"
            }
          ]
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The internal function _getNumPlots divides by PRICE_PER_PLOT without checking for zero, causing a division-by-zero revert and a Denial-of-Service if PRICE_PER_PLOT is misconfigured to zero. Adding a validation to ensure PRICE_PER_PLOT != 0 or enforcing non-zero configuration prevents the issue.",
      "adjustment": {
        "index": 35,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Validate that PRICE_PER_PLOT is non-zero or guard _getNumPlots with a require statement."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "External accountManager.updatePlayer call in _farmPlots"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "State changes occur after external call in _farmPlots"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                12
              ],
              "why": "No nonReentrant or similar guard used"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                291
              ],
              "why": "Checks–effects–interactions pattern is not strictly followed in farming logic"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "Coupling farming logic via the forceFarmPlots modifier means any revert inside _farmPlots (e.g., out‐of‐bounds or external call failure) will block staking, unstaking, or transfers, causing a DoS. The modifier invokes external calls without guard or clear CEI separation and writes state before the intended action. Decoupling or isolating farming and user actions prevents unintended failures.",
      "adjustment": {
        "index": 36,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Compiled with Solidity >=0.8.0"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The length check uses `> 10` instead of `>= 10`, allowing an 11th munchable to be staked and bypassing the intended limit. This off-by-one error undermines the staking cap logic.",
      "adjustment": {
        "index": 37,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                285,
                287
              ],
              "why": null
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The bonus calculation applies finalBonus incorrectly, causing negative intermediate values that wrap when cast to uint and produce an enormous schnibblesTotal leading to overflow in the landlord tax multiplication. Positive bonuses are also mis-scaled, distorting rewards. This results in a permanent DoS of farming functions for certain realm–rarity combinations.",
      "adjustment": {
        "index": 38,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": null
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": null
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The `_farmPlots` modifier makes external calls to `AccountManager.updatePlayer` before state changes in `stakeMunchable`/`unstakeMunchable`, allowing a malicious `AccountManager` to re-enter and violate intermediate invariants. No re-entrancy guard or CEI pattern prevents this. Exploiting this can freeze or corrupt protocol state.",
      "adjustment": {
        "index": 39,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": "Add a reentrancy guard (e.g. `nonReentrant`) or refactor to follow checks-effects-interactions for external calls in `_farmPlots`."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                248
              ],
              "why": "uint8 loop counter overflow underflow check"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The staking cap check uses `> 10` allowing eleven or more NFTs and violating the intended limit. Once the array length reaches 256 the `uint8` loop counter overflows under Solidity ≥0.8 and auto-reverts, causing permanent self‐DoS. The issue affects only the staker and is of low impact.",
      "adjustment": {
        "index": 40,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25 auto-reverts on arithmetic overflow"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The contract uses uninitialised `plotMetadata.currentTaxRate` (defaulting to 0) when a landlord never calls `triggerPlotMetadata()` or is not updated by `AccountManager`, allowing stakers to farm tax-free. This unintended omission leads to an economic advantage for attackers. Initialization of metadata or a default fallback is required.",
      "adjustment": {
        "index": 41,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Increase severity to medium; ensure `plotMetadata` is initialized or defaulted before use to enforce MIN_TAX_RATE."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "yes",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot updates plot occupancy but fails to set the toilerState[tokenId].plotId to the new plot, causing inconsistent state. This leads to incorrect reward calculations and potential double-occupancy exploits. Fix by assigning toilerState[tokenId].plotId = plotId before emitting events.",
      "adjustment": {
        "index": 42,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                284,
                285,
                286,
                287
              ],
              "why": "Underflow occurs here when casting negative to uint256"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Solidity pragma >=0.8.0"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "A large negative `finalBonus` can produce a negative intermediate result which, when cast to uint256, wraps to a huge value. This underflow through signed-to-unsigned cast is not caught by Solidity 0.8’s auto-checks. Bound checks or saturating arithmetic are needed to prevent unintended massive rewards.",
      "adjustment": {
        "index": 43,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Severity adjusted to medium per matrix"
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma specifies 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The `_reconfigure` function uses contract name keys instead of specific configuration keys when calling `getUint`, leading to incorrect or zero values for `MIN_TAX_RATE`, `MAX_TAX_RATE`, and `DEFAULT_TAX_RATE`. This misconfiguration can break core taxation logic. The keys should be corrected to value-specific `StorageKey` entries.",
      "adjustment": {
        "index": 44,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "External call to ERC721.transferFrom"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "State updates after external call"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "No reentrancy guard on function"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "External interaction before state changes"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The stakeMunchable function performs an external call to the ERC-721 contract via transferFrom before updating its own state, violating the Checks-Effects-Interactions pattern and lacking any reentrancy guard. This ordering allows a malicious token contract to reenter and manipulate state mid-execution. The issue has moderate impact and likelihood given user-scoped state changes.",
      "adjustment": {
        "index": 45,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Reorder transferFrom after all state updates or add a nonReentrant guard to prevent reentrancy."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The code computes indices for REALM_BONUSES and RARITY_BONUSES without validating bounds, and in Solidity ≥0.8 this will panic and revert if out of range. This can be exploited as a denial-of-service by supplying or causing unexpected attribute values. Proper bounds checks should be added before array access.",
      "adjustment": {
        "index": 46,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Add explicit bounds checks for computed indices to prevent out-of-bounds panics."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                345,
                346,
                347,
                348
              ],
              "why": null
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The function `_getNumPlots` divides by `PRICE_PER_PLOT` without checking it is non-zero, leading to a runtime revert and disabling core functionality if misconfigured. Since `PRICE_PER_PLOT` is loaded from external config, an admin error setting it to zero can lock staking, transferring, and unstaking operations.",
      "adjustment": {
        "index": 47,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Add a check or enforce in configuration that PRICE_PER_PLOT must be non-zero to prevent division-by-zero reverts."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                51,
                65
              ],
              "why": "Retrieving config addresses is internal initialization"
            }
          ]
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                51
              ],
              "why": "_reconfigure is internal"
            }
          ]
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                51,
                63
              ],
              "why": "Misconfiguration only causes failures, not direct exploit"
            }
          ]
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The issue is a missing zero‐address check when loading external contract addresses, which can lead to misconfiguration failures but is not security‐critical in an attack scenario. It does not involve arithmetic or reentrancy and only arises from admin error. Severity is low by the impact/likelihood matrix.",
      "adjustment": {
        "index": 48,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                150
              ],
              "why": "Calls external ERC721 contract"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "State changes after transferFrom"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The `stakeMunchable` function uses `>` instead of `>=` when checking the length of `munchablesStaked`, permitting an 11th stake before reverting. This deviates from the intended business logic limit without introducing a security vulnerability.",
      "adjustment": {
        "index": 49,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Change the check to `if (munchablesStaked[mainAccount].length >= 10)` to enforce the 10-item limit correctly."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The `_farmPlots` loop processes all staked tokens in a single transaction with unbounded iteration and external calls, which can exceed block gas limits and prevent users from farming or unstaking. The use of a uint8 loop counter further limits functionality when users have more than 255 tokens, exacerbating the DoS risk.",
      "adjustment": {
        "index": 50,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Consider capping batch sizes, using pagination or off-chain indexing to limit gas per call and replacing the uint8 counter with a larger type."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "no",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "yes",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "yes",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "design_intent",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "This is a design-level centralization risk rather than a coding bug. Configuration is intentionally managed via a single contract and adjustments reflect governance decisions. No technical fix is required.",
      "adjustment": {
        "index": 51,
        "new_severity": "low",
        "should_be_removed": true,
        "comments": "Design intent; intentional centralization"
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                283,
                284,
                285,
                286,
                287
              ],
              "why": "Negative bonus applied and cast to uint causing wrap"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                282,
                286,
                287
              ],
              "why": "Arbitrary large rewards enable protocol manipulation"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                284
              ],
              "why": "Solidity ≥0.8 and no unchecked, but int-to-uint cast is unchecked"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The calculation allows finalBonus to be less than –100, making the signed intermediate negative. Casting this negative int256 to uint256 underflows to a huge value, inflating rewards arbitrarily. Clamping finalBonus or using safe math for the adjustment prevents this wrap-around.",
      "adjustment": {
        "index": 52,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                346
              ],
              "why": "_getNumPlots is used in public stakeMunchable and farmPlots"
            }
          ]
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function `_getNumPlots` divides by the configurable `PRICE_PER_PLOT` without validating it against zero, leading to a runtime division‐by‐zero revert if misconfigured. This results in a denial‐of‐service for staking and farming operations. A guard should enforce that `PRICE_PER_PLOT` is non‐zero on configuration.",
      "adjustment": {
        "index": 53,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Add a check (e.g. require) during initialization or before division to ensure `PRICE_PER_PLOT` is non-zero to prevent division by zero errors."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "high",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot updates occupancy mappings but never writes the new plotId back into toilerState, leaving stored state inconsistent and events misleading. This logic error can break subsequent uses of plotId and misrepresent state. An assignment to update toilerState[tokenId].plotId is required before emitting events.",
      "adjustment": {
        "index": 54,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Add `toilerState[tokenId].plotId = plotId;` after occupancy mappings update and before emitting FarmPlotTaken."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "no",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The check in stakeMunchable uses `length > 10` instead of `>= 10`, allowing an 11th munchable to be staked. This is a straightforward off-by-one logic bug with limited impact. It should be corrected to `length >= 10` to enforce the cap.",
      "adjustment": {
        "index": 55,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                259,
                260
              ],
              "why": "Underflow in timestamp subtraction"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                259,
                262
              ],
              "why": "Malicious landlord can trigger underflow to DOS and trap NFTs"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                259,
                282
              ],
              "why": "Checked arithmetic in Solidity 0.8 auto-reverts on underflow"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "An unchecked subtraction of block timestamps can underflow when plotMetadata.lastUpdated precedes lastToilDate, causing a revert under Solidity 0.8. This revert in the forceFarmPlots modifier blocks all functions using it (including unstake), permanently locking NFTs. The bug arises from missing bounds validation on timestamp and lastToilDate.",
      "adjustment": {
        "index": 56,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Validate that timestamp ≥ _toiler.lastToilDate or clamp timestamp to avoid underflow before subtraction; add a require or early return to prevent revert and potential DoS."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                150,
                153
              ],
              "why": "External ERC721 transfer and approval calls"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "transferFrom occurs before state updates"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "No nonReentrant guard on stakeMunchable"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                150
              ],
              "why": "Interaction before effects"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The stakeMunchable function allows specifying an unregistered landlord, then transfers the NFT into the contract. Subsequent calls with the forceFarmPlots modifier invoke _getMainAccountRequireRegistered on the unregistered landlord and revert, preventing unstaking. This permanently locks the NFT.",
      "adjustment": {
        "index": 57,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Add a check that the landlord address is registered before allowing staking to prevent locking."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                287
              ],
              "why": "Conversion of negative int256 to uint256 may revert"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                268,
                301
              ],
              "why": "Calls external contracts nftAttributesManager and accountManager"
            }
          ]
        },
        "R_2": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "State changes occur before external calls"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "Because finalBonus can be negative, the signed intermediate may be negative and converting it to uint256 under Solidity 0.8 reverts, causing DoS and permanently trapping NFTs. No unchecked block or prior validation prevents this revert. The calculation should clamp or handle negative bonuses before converting to uint256.",
      "adjustment": {
        "index": 58,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Clamp negative bonus values or handle negative intermediate before uint256 conversion to prevent revert."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "calls external transferFrom"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "state updated after external call"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                136
              ],
              "why": "no reentrancy guard used"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "external call precedes state changes"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "missing landlord registration check leads to NFT lock-up"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The `stakeMunchable` function permits specifying an unregistered landlord, but later farming or unstaking operations invoke `_getMainAccountRequireRegistered` on that landlord, causing a revert and permanently locking the NFT. This missing validation is an authorization flaw that leads to asset lockup. The high impact and medium likelihood yield a medium severity per the matrix.",
      "adjustment": {
        "index": 59,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25 enforces >=0.8.0"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                150,
                151,
                152
              ],
              "why": "calls external NFT contract via transferFrom"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "state updates occur after the external call"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "no nonReentrant guard on function"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "Multiple functions perform external calls (e.g., ERC-721 transferFrom) before updating critical state and lack a reentrancy guard, allowing malicious contracts to reenter and corrupt occupancy mappings, bypass limits, or inflate rewards. The absence of nonReentrant modifiers and violation of the CEI pattern in stakeMunchable (and similar functions) makes the vulnerability exploitable. Mitigation requires adding reentrancy guards or moving state changes before interactions.",
      "adjustment": {
        "index": 60,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The boundary check in `_farmPlots` uses `<` instead of `<=`, so when a landlord’s available plot count equals a munchable’s `plotId`, the toiler is never marked dirty and continues farming on an invalid plot indefinitely. This logical error is not auto-checked or protected by any guard. Changing the comparison to `<=` corrects the off-by-one issue.",
      "adjustment": {
        "index": 61,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Adjust severity to medium per impact/high and likelihood/medium. Fix off-by-one by using `<=` in invalid plot detection."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                271,
                287
              ],
              "why": null
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                285,
                286
              ],
              "why": null
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The cast of a potentially negative `int256` expression to `uint256` in `_farmPlots` can underflow when `finalBonus <= -100`, yielding an enormous reward. Solidity ≥0.8 does not revert on negative-to-unsigned conversions, so an attacker controlling bonuses can exploit this to mint unbounded schnibbles. A validation or clamp on `finalBonus` is required.",
      "adjustment": {
        "index": 62,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                286
              ],
              "why": "overflow occurs in default checked context"
            }
          ]
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                286
              ],
              "why": "overflow leads to DoS and reward theft"
            }
          ]
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                286
              ],
              "why": "landlords can set arbitrary tax to steal or block rewards"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                286
              ],
              "why": "Solidity ≥0.8 automatically reverts on underflow"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The MIN_TAX_RATE and MAX_TAX_RATE are loaded from wrong config keys, allowing landlords to set rates above 1e18. This causes schnibblesLandlord > schnibblesTotal and an underflow on (schnibblesTotal − schnibblesLandlord), reverting farming and enabling DoS or reward theft. Proper clamping or correct config keys will fix the issue.",
      "adjustment": {
        "index": 63,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Use correct config keys or enforce tax rate clamping within the [0,1e18] range to prevent underflow."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                296
              ],
              "why": "Subtraction (schnibblesTotal - schnibblesLandlord) can underflow"
            }
          ]
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                288,
                296
              ],
              "why": "Arithmetic is in default checked context, not within unchecked block"
            }
          ]
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                288,
                296
              ],
              "why": "Solidity ≥0.8.0 auto-reverts on overflow/underflow without unchecked"
            }
          ]
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "DEFAULT_TAX_RATE is set without bounds checking against MIN_TAX_RATE and MAX_TAX_RATE, allowing a misconfigured high rate that makes schnibblesLandlord exceed schnibblesTotal. This triggers an underflow and revert in the subtraction, effectively causing a denial-of-service. Validating DEFAULT_TAX_RATE prevents the underflow.",
      "adjustment": {
        "index": 64,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Add validation in _reconfigure or triggerPlotMetadata to ensure DEFAULT_TAX_RATE is within [MIN_TAX_RATE, MAX_TAX_RATE] before assignment."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "Calls external ERC721.transferFrom"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "External call before state modification"
            },
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "State changes occur after transferFrom"
            }
          ]
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "Interaction precedes effects (CEI pattern not followed)"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The check `if (length > 10)` allows staking when length equals 10, so an 11th munchable can be staked, exceeding the intended cap. Changing the comparison to `>= 10` correctly enforces the maximum of ten. This off-by-one allows users to bypass limits and accrue excess rewards.",
      "adjustment": {
        "index": 65,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": "Change the condition to `if (munchablesStaked[mainAccount].length >= 10) revert TooManyStakedMunchiesError();` to enforce the intended limit of 10."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity version >=0.8.0"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "transferFrom is an external call"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155
              ],
              "why": "state changes occur after external transfer"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                136
              ],
              "why": "no reentrancy guard present"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "interaction precedes state updates"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The stakeMunchable function does not verify that the landlord’s plotMetadata has been initialized, so currentTaxRate defaults to zero. This allows renters to evade all taxes and deprive landlords of revenue. A check for lastUpdated != 0 should be added before staking.",
      "adjustment": {
        "index": 66,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "performs external transferFrom call before updating state (violates CEI)"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "high",
        "matrix_severity": "high"
      },
      "reasoning_summary": "The `stakeMunchable` function uses `length > 10` instead of `>= 10`, allowing an 11th token and breaking the intended cap. This off-by-one logic error lets users stake one extra munchable and earn unintended rewards. The fix is to change the comparison to `length >= 10`.",
      "adjustment": {
        "index": 67,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": "Change comparison to use '>=' instead of '>' to enforce the maximum of 10 staked tokens."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot updates plotOccupied but never writes the new plotId to toilerState[tokenId], so unstakeMunchable frees the old plot and leaves the new one permanently occupied. This ghost occupancy blocks plots and causes a denial-of-service. Adding a state update to set toilerState[tokenId].plotId = plotId before reassigning fixes the issue.",
      "adjustment": {
        "index": 68,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "high",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot clears the old occupancy and sets a new one but never updates toilerState[tokenId].plotId, so subsequent calls only clear the original plot, leaving ghost occupancies on other plots. A malicious renter can exploit this to block all plots and deny staking to others. The fix is to assign toilerState[tokenId].plotId = plotId when transferring.",
      "adjustment": {
        "index": 69,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "yes",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "triggerPlotMetadata enforces a one-time initialization for registered accounts and only performs internal state updates with an event emission. There are no external calls, fund transfers, or unchecked arithmetic paths that could lead to reentrancy, overflow, or theft. Tax-rate updates are further constrained by MIN_TAX_RATE and MAX_TAX_RATE.",
      "adjustment": {
        "index": 70,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Solidity version 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                93,
                99
              ],
              "why": "Tax rate can be updated without timelock or governance"
            }
          ]
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                93,
                101
              ],
              "why": "Landlord can change tax rate to manipulate schnibble distribution"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "Without any enforced delay or governance, landlords can opportunistically update tax rates to front-run renter actions, skewing schnibble distribution and creating unpredictable economic outcomes. A cooldown period or time-locked governance for tax rate changes would mitigate this risk.",
      "adjustment": {
        "index": 71,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "Relying solely on ERC-721’s ownerOf to detect non-existent tokens causes a generic revert, resulting in poor user feedback. An explicit existence check with a custom error would clarify the failure. The issue is a usability concern without security impact.",
      "adjustment": {
        "index": 72,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Consider adding an explicit token existence check (e.g. IERC721.exists or try ownerOf) and revert with a custom error for non-existent tokens to improve clarity."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                319,
                326
              ],
              "why": "Removal loop bounds array length"
            }
          ]
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "Although users can stake and unstake munchables repeatedly, each unstake removes an element and the stake check caps the array at 11 entries, preventing unbounded growth. The array thus remains bounded and gas costs remain proportional to a small constant. The reported unbounded growth is theoretical and not exploitable.",
      "adjustment": {
        "index": 73,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Array size remains bounded (≤11) due to push/pop logic; this issue is theoretical only."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "calls external ERC721.transferFrom"
            }
          ]
        },
        "R_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "transfer occurs before updating mapping state"
            }
          ]
        },
        "R_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "no reentrancy guard on function"
            }
          ]
        },
        "R_4": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "state changes made after external call"
            }
          ]
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "yes",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function stakeMunchable allows a caller to pass the zero address as landlord, locking the token irrecoverably since unstaking requires the landlord to initiate a transaction. This missing input validation poses a practical risk of user funds being permanently locked. Severity is medium based on a medium impact and medium likelihood of occurrence.",
      "adjustment": {
        "index": 74,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "yes",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "yes",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The issue is not an arithmetic overflow but an out-of-bounds array index that reverts and causes a denial-of-service. Solidity ≥0.8 already protects against integer overflows and no unchecked block is used. The probability of controllable extremes is low given expected enum sizes.",
      "adjustment": {
        "index": 75,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity >=0.8.0"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The dirty flag in `_farmPlots` is never cleared when a landlord later increases plot capacity, so once a toiler is marked dirty it’s permanently skipped and loses all future rewards. This logic defect requires resetting or re-evaluating the dirty flag when plots become available again.",
      "adjustment": {
        "index": 76,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Uses Solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "design_intent",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The tax rate caching in `toilerState.latestTaxRate` until the next farm operation is an intentional design choice rather than a vulnerability. It ensures consistency in revenue calculations between farm cycles. No security risk arises from this behavior.",
      "adjustment": {
        "index": 77,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Behavior is an intentional design choice (design_intent)."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The function allows transferring to the same plot without checking, emitting misleading events and confusing downstream systems. This is a logical consistency issue rather than a security vulnerability. Adding a simple equality check prevents redundant transfers.",
      "adjustment": {
        "index": 78,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Add a require(plotId != oldPlotId, \"New plot must differ from current plot\"); to prevent misleading events."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "yes",
          "refs": null
        },
        "R_4": {
          "answer": "yes",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                288,
                289,
                290
              ],
              "why": "Tax rate applied just before reward calculation allows manipulation"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "Because the landlord’s tax rate can be updated immediately before farming, they can capture an unexpectedly large portion of schnibbles without any user-provided minimum guarantee. There is no slippage protection mechanism to prevent front-running or ensure a minimum user reward.",
      "adjustment": {
        "index": 79,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Consider adding a minimum expected reward parameter or snapshotting the tax rate at transaction initiation to prevent front-running."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25 enables built-in overflow checks"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                93
              ],
              "why": "only registered landlords can call updateTaxRate"
            }
          ]
        },
        "A_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                93,
                101
              ],
              "why": "updateTaxRate can be executed immediately with no timelock or expiry"
            }
          ]
        },
        "A_3": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                93,
                101
              ],
              "why": "tax rate changes directly affect distribution of rewards"
            }
          ]
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The `updateTaxRate` function allows immediate tax rate changes with no expiration or announcement window, enabling landlords to time changes unfavorably around farming operations. This is neither an arithmetic nor reentrancy issue but a MEV risk requiring delay controls. Implementing a timelock or deadline parameter would mitigate the manipulation vector.",
      "adjustment": {
        "index": 80,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Consider adding a deadline parameter or timelock mechanism for tax rate changes to prevent MEV manipulation."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Solidity version is 0.8.25"
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The function uses the stored `latestTaxRate` from the last farming run instead of the current `plotMetadata.currentTaxRate`, causing outdated tax rates to be applied and slippage protection to be ineffective until after farming. The tax rate is updated only after distributing schnibbles, so any rate change does not affect the immediate distribution. This discrepancy can confuse users and lead to unexpected payouts.",
      "adjustment": {
        "index": 81,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The schnibbles reward formula mixes a percentage bonus (divided by 100) with a tax rate in 18-decimal scale (divided by 1e18), leading to inconsistent precision and rounding loss. This does not introduce overflow or security risk but can cause minor accounting discrepancies. It is best classified as a low-severity, precision-mismatch issue.",
      "adjustment": {
        "index": 82,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Precision mismatch yields minor rounding errors; classify as low severity."
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "yes",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "design_intent",
        "impact": "low",
        "likelihood": "low",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The absence of an oracle is intentional as the contract does not require external price feeds; this is intended design behavior.",
      "adjustment": {
        "index": 83,
        "new_severity": "low",
        "should_be_removed": true,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": null
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "medium",
        "likelihood": "medium",
        "matrix_severity": "medium"
      },
      "reasoning_summary": "The schnibbles calculation sums the base and bonus amounts and then divides by 100, causing integer division to truncate the entire sum rather than only the bonus share. This results in substantial underpayment when `finalBonus` is small. The correct approach is to apply the division solely to the bonus component and then add it to the base.",
      "adjustment": {
        "index": 84,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "O_1": {
          "answer": "no",
          "refs": null
        },
        "O_2": {
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": null
            }
          ]
        },
        "O_3": {
          "answer": "no",
          "refs": null
        },
        "O_4": {
          "answer": "no",
          "refs": null
        },
        "O_5": {
          "answer": "no",
          "refs": null
        },
        "R_1": {
          "answer": "no",
          "refs": null
        },
        "R_2": {
          "answer": "no",
          "refs": null
        },
        "R_3": {
          "answer": "no",
          "refs": null
        },
        "R_4": {
          "answer": "no",
          "refs": null
        },
        "R_5": {
          "answer": "no",
          "refs": null
        },
        "A_1": {
          "answer": "no",
          "refs": null
        },
        "A_2": {
          "answer": "no",
          "refs": null
        },
        "A_3": {
          "answer": "no",
          "refs": null
        },
        "F_1": {
          "answer": "no",
          "refs": null
        },
        "F_2": {
          "answer": "no",
          "refs": null
        },
        "F_3": {
          "answer": "no",
          "refs": null
        },
        "F_4": {
          "answer": "no",
          "refs": null
        },
        "F_5": {
          "answer": "no",
          "refs": null
        },
        "removal_reason": "none",
        "impact": "low",
        "likelihood": "medium",
        "matrix_severity": "low"
      },
      "reasoning_summary": "The landlord share calculation uses integer arithmetic (/1e18) which truncates small fractional schnibbles to zero, causing precision loss for small schnibblesTotal values. This leads to landlords receiving no schnibbles when they should get a fractional amount. Using a precision-preserving fixed-point math function or tracking remainders will mitigate the truncation error.",
      "adjustment": {
        "index": 85,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Consider using a precision-preserving function (e.g., FullMath.mulDiv) or a fixed-point math library to perform (schnibblesTotal * latestTaxRate) with proper rounding or track and accumulate remainders to avoid truncated fractional shares."
      }
    }
  ]
}