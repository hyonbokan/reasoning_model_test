[
  {
    "index": 0,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Severity should be raised to high as the exploit is real, the impact is repeated lost opportunities and fairness, and exploitation is easy for any co-owner of the same packId."
  },
  {
    "index": 1,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Raise severity from low to medium due to the presence of multiple external calls without reentrancy protection, plausible multi-step exploit paths (such as draining `metadataPool` in a single transaction), and incomplete adherence to the CEI pattern."
  },
  {
    "index": 2,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "This is a genuine, non-critical logic/UX bug; recommend low severity\u2014users will suffer time/gas loss but not protocol/asset compromise."
  },
  {
    "index": 3,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Severity downgraded to Low: the admin-only risk is real, but is a property of centralized permissions and not a code-level exploit; advise clear documentation and on-chain governance improvements if decentralization wanted."
  },
  {
    "index": 4,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Adjusted severity to Medium per the impact/likelihood matrix; this is not a false positive, as the issue can irreversibly affect user funds if not adequately documented or addressed."
  },
  {
    "index": 5,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Recommend implementing a metadata pool check before allowing unsealing to prevent users from unsealing irreparably when pools are empty."
  },
  {
    "index": 6,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "A real and non-negligible design flaw exists in user-specific unsealing tracking. While impact is moderate, retention as a medium-severity issue is justified."
  },
  {
    "index": 7,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Blockhash randomness does carry a predictable risk\u2014while mitigated by delay and cost, a motivated miner could bias outcomes. This is both practically rare and structurally common in many similar NFT/pack systems; low severity is appropriate due to non-critical impact and low feasibility."
  },
  {
    "index": 8,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "The risk exists only for individual pack IDs and is user- or owner-triggered, so the impact and likelihood are both low; the finding is valid, but not severe."
  },
  {
    "index": 9,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "This finding is valid as it points out an architectural dependency which, while intended, could impact the contract's functionality if one of the NFT contracts fails. The likelihood is low but the impact is moderate, justifying a low severity rating."
  },
  {
    "index": 10,
    "new_severity": "info",
    "should_be_removed": false,
    "comments": "This is an intentional and documented rate-limiting feature; the finding is informative and not a vulnerability or error."
  },
  {
    "index": 11,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "This is a valid point for transparency and off-chain monitoring. Although ERC1155 default events (like TransferSingle/Batch) partially cover mint/burn, the lack of a reveal event makes monitoring user actions difficult. Severity lowered to 'low' since it does not impact security or protocol correctness."
  },
  {
    "index": 12,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "The finding is accurate and severe: it enables both theft of NFTs via reveal front-running and a DoS of the reveal queue with little effort. Fixing requires per-user unseal tracking rather than a global queue."
  },
  {
    "index": 13,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "All state-changing effects occur before calls to untrusted NFT contracts, following the CEI pattern and closing off reentrancy exploits, making this a definite false positive per rules."
  },
  {
    "index": 14,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Division-by-zero due to unchecked init value is a valid, if low severity, deployment/configuration risk. Recommend add input validation in constructor."
  },
  {
    "index": 15,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Severity increased to High due to high protocol impact and viable exploit path undermining fair reward assignment; not a false positive."
  },
  {
    "index": 16,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Severity justified as medium since missing a reveal can cause asset loss for an individual pack, which is a practical and not purely theoretical risk."
  },
  {
    "index": 17,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "Remove as false positive: all state changes occur before external calls, following CEI; no practical exploit path at present."
  },
  {
    "index": 18,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Recommend changing severity to 'low', as the problem could cause failed admin ops but is not a security or protocol risk."
  },
  {
    "index": 19,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "This is a legitimate business logic design risk that could result in users being unable to redeem pack value, so it should remain in the report at medium severity."
  },
  {
    "index": 20,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Downgraded to low severity as impact is medium (permanent per-user lockup, not critical protocol-wide) but likelihood is low (requires admin to misconfigure 'unsealDelay')."
  },
  {
    "index": 21,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "This is a real (though not security-critical) issue: users may be confused by LIFO order, so recommendation for improved UX is valid. No removal warranted, but it's not 'low' per matrix."
  },
  {
    "index": 22,
    "new_severity": "info",
    "should_be_removed": false,
    "comments": "Centralisation by admin is intentional and does not contradict protocol security assumptions; downgrade to 'info' according to access-control and severity rules."
  },
  {
    "index": 23,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "The finding is legitimate and its severity is appropriate, as predictable randomness is a well-known issue but is difficult to exploit in this scenario."
  },
  {
    "index": 24,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "The finding is valid, is not a false positive, and should remain at high severity due to critical per-user DoS/theft risk."
  },
  {
    "index": 25,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Miner bias and unrecoverable loss of pack rewards due to blockhash-derived randomness and time limits represent real issues for users. The finding should stay and is appropriately rated medium."
  },
  {
    "index": 26,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Finding is valid and severity is appropriate. Only affects deployer at deployment time, but could brick the contract if misused."
  },
  {
    "index": 27,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "This is a critical logic vulnerability affecting fairness, delay guarantees, and correct operation of the contract. It is not a false positive and requires a redesign of the mapping and unseal tracking logic per user."
  },
  {
    "index": 28,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "The function employs the CEI pattern, so state cannot be abused via reentrancy. The finding is a false positive as per reentrancy mitigation rules."
  },
  {
    "index": 29,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "The issue is valid and high severity: assets can be locked forever. Consider adding a recovery or admin override, user warning, or alternative randomness fallback."
  },
  {
    "index": 30,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Severity is correct: lack of validation leads to loss of contract utility if deployer errs, but is not an exploitable attack. Medium is appropriate."
  },
  {
    "index": 31,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Finding is valid; set unsealDelay bounds to preserve protocol functionality and security."
  },
  {
    "index": 32,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Severity lowered: per access-control rules, unrestricted pausing by admin is a centralisation issue, not a direct security flaw. Kept as 'low' due to major impact on usability, but not on asset loss or theft."
  },
  {
    "index": 33,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "The finding is meaningful but only a low-severity edge risk because practical exploitation depends on extremely high usage for a single packId."
  },
  {
    "index": 34,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Access control minimizes risk, but lack of explicit zero-address validation is still a minor issue for privileged users."
  },
  {
    "index": 35,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Leaving as 'low' is appropriate; adding an event would improve off-chain usability but has no security impact."
  },
  {
    "index": 36,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "The vulnerability enables reward theft between users and should be remediated."
  },
  {
    "index": 37,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "CEI pattern is followed in the `reveal` function, so there is no practical reentrancy vulnerability. Finding should be removed per reentrancy and false-positive rules."
  },
  {
    "index": 38,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Severity should be raised to medium as the issue is practical, affects randomness integrity, and can result in failed user actions or unfair NFT distributions."
  },
  {
    "index": 39,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Severity should be raised to high; this is a real DoS affecting user experience and pack value, and is not a false positive."
  },
  {
    "index": 40,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "This is a valid and high-severity vulnerability. The reveal logic must be redesigned so unseals are per-user (e.g., extend unsealBlocks mapping to include the user address as a key)."
  },
  {
    "index": 41,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Recommend requiring unsealDelay < 256 in the constructor to prevent permanent DoS of reveals."
  },
  {
    "index": 42,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "The finding is valid as a potential misconfiguration risk. Downgraded to 'low' because only privileged actors can set the value, and the consequence is immediate and non-exploitable, but it could permanently break contract usability if not properly validated."
  },
  {
    "index": 43,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Blockhash randomness carries real, though moderate, bias risk from miners; issue should be kept at medium severity as it threatens fairness and value distribution integrity."
  },
  {
    "index": 44,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Severity should be upgraded to High due to practical exploitability with user asset loss, and the finding should not be removed."
  },
  {
    "index": 45,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "This is a genuine, low-impact bug which can be fixed by moving the .pop() line after blockhash validation, or warning users to timely reveal."
  },
  {
    "index": 46,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "The finding qualifies as a false positive because all state-changing actions are performed before any external contract call (CEI pattern), making reentrancy attacks infeasible here."
  }
]