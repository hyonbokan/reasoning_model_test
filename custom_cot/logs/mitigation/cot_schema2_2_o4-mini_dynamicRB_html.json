{
  "document_id": "audit_run_002",
  "finding_reviews": [
    {
      "finding_index": 0,
      "step_by_step_analysis": "The finding describes a signed-to-unsigned conversion that can produce a huge uint256 value when a negative bonus occurs. This is clearly an arithmetic issue, not in an `unchecked` block, under Solidity 0.8.25, and participates in a larger exploit chain by allowing unlimited minting of Schnibbles. No reentrancy or access control factors apply, and it’s neither documented nor theoretical—it’s a real vulnerability, so the finding stands with adjusted severity.",
      "reasoning_summary": "This is a true arithmetic vulnerability in Solidity 0.8 (no `unchecked`), enabling a signed-to-unsigned wrap that yields massive minting, with practical exploit conditions.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 0,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Valid arithmetic vulnerability: negative bonus leads to uint wrap and unlimited minting."
      }
    },
    {
      "finding_index": 1,
      "step_by_step_analysis": "Overflow Analysis:\nO-1: The finding addresses a stale plotId bug, not arithmetic overflow.  \nO-2: Contract uses Solidity 0.8.25 so overflows revert by default.  \nO-3–O-5: No unchecked blocks or overflow business logic involved.\n\nReentrancy Analysis:\nR-1: transferToUnoccupiedPlot makes no external calls to untrusted contracts.  \nR-2: No external calls, so no post-call state changes.  \nR-3: No reentrancy guard is present, but irrelevant as no external calls.  \nR-4: CEI pattern is followed (checks and effects only).  \nR-5: All calls are internal.\n\nAccess Control Analysis:\nA-1: This is a user-facing function, not a privileged admin function.  \nA-2–A-3: No violation of decentralization or critical protocol manipulation beyond token mis-allocation.\n\nFalse-Positive Analysis:\nF-1: No duplicate finding.  \nF-2: Behavior is not documented or intentional.  \nF-3: There is a clear exploit path to harvest retroactive schnibbles.  \nF-4–F-5: Not an overflow or reentrancy issue.\n\nSeverity Assessment:\nS-1: Impact is medium—players can mint unearned tokens.  \nS-2: Likelihood is medium—requires landlord to shrink plots but is straightforward.  \nS-3: Medium impact + medium likelihood ⇒ medium severity.\n\nFinal Determination:\nX-1: Should not be removed; this is a valid bug.",
      "reasoning_summary": "The transferToUnoccupiedPlot function fails to update toilerState.plotId, allowing retroactive minting of schnibbles when landlords reduce plot count. This is a practical exploit with medium impact and medium likelihood. Severity remains medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 1,
        "severity": "unchanged",
        "should_be_removed": false,
        "comments": "Valid bug: stale plotId leads to retroactive rewards; severity remains medium."
      }
    },
    {
      "finding_index": 2,
      "step_by_step_analysis": "The `stakeMunchable` function enforces a maximum of 10 staked tokens with the check `if (munchablesStaked[mainAccount].length > 10)` (line 141). However, when length == 10, the condition passes and allows an 11th push, so users can stake 11 munchables. This violates the stated limit and any business logic or bookkeeping relying on a hard cap of 10 per user. Adjusting the comparison to `>= 10` fixes the off-by-one.\nSeverity should be raised because the flaw has a practical exploit path, high likelihood (trivial to trigger), and a medium impact (breaks invariants, may grant extra yield).",
      "reasoning_summary": "Off-by-one in the length check allows an 11th stake, violating intended limits; exploit is trivial and impact moderate, so severity increases to high.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "calls `munchNFT.transferFrom` on external ERC721"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                160
              ],
              "why": "state updates and push occur after transfer"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 2,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Off-by-one allows an 11th stake and breaks invariants; trivial to exploit, so severity raised to high."
      }
    },
    {
      "finding_index": 3,
      "step_by_step_analysis": "The LandManager loads PRICE_PER_PLOT from ConfigStorage without any non-zero check, then uses it in _getNumPlots: lockManager.getLockedWeightedValue(account) / PRICE_PER_PLOT. If PRICE_PER_PLOT is ever set to zero, every division reverts, causing a DoS that freezes all stake, transfer, and farming operations. This is neither an overflow nor reentrancy nor pure access issue—it’s a genuine misconfiguration risk that should be validated and guarded against.",
      "reasoning_summary": "PRICE_PER_PLOT can be zero, causing division-by-zero DoS in _getNumPlots and freezing key functions; this is a valid medium-severity configuration risk.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Pragma solidity 0.8.25 enables built-in overflow checks"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                345,
                347
              ],
              "why": "Division by PRICE_PER_PLOT without an unchecked block"
            }
          ]
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 3,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Validate that PRICE_PER_PLOT > 0 on configure or revert to prevent division-by-zero DoS."
      }
    },
    {
      "finding_index": 4,
      "step_by_step_analysis": "The reported issue concerns external calls to accountManager.updatePlayer within the _farmPlots loop. We first rule out overflow questions (O-1–O-5) since this is not an arithmetic issue. For reentrancy: updatePlayer is an external call (R-1) but all state changes (effects) precede that interaction (R-2) following the CEI pattern (R-4), and no state changes occur after the call, so even without a nonReentrant guard (R-3) it is not vulnerable. Access control is not relevant (A-1–A-3 do not indicate a privileged abuse). This finding is not duplicated or documented as intentional (F-1–F-3), and since CEI or guards are present (F-5), the finding is a false positive. According to severity rules (S-1–S-3), even if it were a risk it would be low impact and likelihood, yielding low; but here it should simply be removed (X-1).",
      "reasoning_summary": "AccountManager calls occur after all local state updates following CEI, so no reentrancy risk despite lack of a guard; this finding is a false positive.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 4,
        "severity": "info",
        "should_be_removed": true,
        "comments": "CEI pattern followed; updatePlayer calls occur after all state updates, preventing reentrancy."
      }
    },
    {
      "finding_index": 5,
      "step_by_step_analysis": "The `transferToUnoccupiedPlot` function updates the `plotOccupied` mapping and `latestTaxRate` but never updates `toilerState[tokenId].plotId`, leaving the internal `toilerState` out of sync. This inconsistency can cause mis‐calculations in `_farmPlots`, marking tokens dirty or unchanged incorrectly and leading to wrong reward distributions. The issue is unrelated to overflow, reentrancy, or access control, is not a duplicate or theoretical, and has practical impact on farming logic.",
      "reasoning_summary": "The function fails to update the token’s `plotId` in `toilerState`, causing state inconsistency and incorrect farming behavior; this is a real, impactful issue with medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "No",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 5,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "The function must update `toilerState[tokenId].plotId` to keep internal state consistent; this has practical impact on farming and merits medium severity."
      }
    },
    {
      "finding_index": 6,
      "step_by_step_analysis": "The finding describes logic around the `dirty` flag in `_farmPlots`, which permanently skips farming for Munchables when the landlord’s plot count falls below the staked plotId. There is no arithmetic overflow/underflow issue, so overflow checks do not apply. There are no external calls to untrusted contracts in the affected loop that modify state after an external call, so reentrancy does not apply. This is not an access-control flaw, merely a user‐experience logic oversight. It is not duplicated, not documented as intentional, and has a clear practical impact requiring users to unstake and restake to recover. Based on impact (permanent loss of farming) being low and likelihood (landlord token changes) medium, this warrants a low severity classification and is not a false positive.",
      "reasoning_summary": "Permanent dirty flag is a genuine logic bug with no overflow, reentrancy, or access control concerns; classify as low severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 6,
        "severity": "low",
        "should_be_removed": false,
        "comments": "This is a genuine logic issue causing permanent disablement of farming; users must unstake/restake to recover."
      }
    },
    {
      "finding_index": 7,
      "step_by_step_analysis": "1. The issue arises in stakeMunchable at the check `if (munchablesStaked[mainAccount].length > 10) revert TooManyStakedMunchiesError();` (line 141). 2. This condition only reverts when length > 10 (i.e., on the 12th stake), allowing 11 Munchables instead of the intended 10. 3. The contract is compiled with Solidity 0.8.25, so overflow protections are automatic and unrelated. 4. No access-control, reentrancy, or overflow implications apply to this logic error. 5. Impact on game balance is low but the bug is exploitable by any user (likelihood high), so severity should be adjusted to medium.",
      "reasoning_summary": "The off-by-one check `> 10` allows 11 stakes rather than 10, which is a real but low-impact logic bug exploitable by anyone.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "calls munchNFT.transferFrom"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                160
              ],
              "why": "state updates follow transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                152,
                155
              ],
              "why": "interaction precedes effects"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 7,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one allows staking 11 instead of 10 Munchables; adjust severity to medium due to high exploit likelihood."
      }
    },
    {
      "finding_index": 8,
      "step_by_step_analysis": "The finding addresses a potential overflow in reward calculation when `finalBonus` is negative. However, the contract is compiled with Solidity 0.8.25, which has built-in overflow/underflow checks, and the code is not inside an `unchecked` block, so any arithmetic overflow would revert. There is no documented business requirement for custom overflow handling, nor is this part of a larger exploit chain. The negative-to-uint256 cast does not trigger an arithmetic overflow but a wrap around on cast, and requires highly contrived conditions, making this a purely theoretical issue.",
      "reasoning_summary": "Solidity 0.8's auto-checking and absence of `unchecked` means no overflow can occur; the negative-to-uint cast is not an overflow, and this scenario is purely theoretical.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 8,
        "severity": "low",
        "should_be_removed": true,
        "comments": "Solidity 0.8 auto-checks prevent overflow, no `unchecked` block, and this negative-to-uint cast is a theoretical issue."
      }
    },
    {
      "finding_index": 9,
      "step_by_step_analysis": "O-1: No – the finding concerns gas inefficiency, not arithmetic overflow/underflow.\nO-2: Yes – contract uses Solidity 0.8.25 with built-in overflow checks.\nO-3: No – no unchecked blocks around arithmetic here.\nO-4: No – there is no business requirement for custom overflow handling.\nO-5: No – arithmetic is unrelated to an exploit chain.\nR-1: No – although `accountManager.updatePlayer` is an external call, AccountManager is a trusted protocol contract.\nR-2: No – state changes in LandManager happen before and after this call but re-entrancy is not relevant to this performance issue.\nR-3: No – no reentrancy guard is needed for this pattern.\nR-4: N/A – CEI pattern is unrelated to gas optimization.\nR-5: N/A – the calls are to an external, trusted contract per design.\nA-1: No – any user of `farmPlots` may call it as intended; it's not a privileged function.\nA-2: No – no decentralization or timelock assumptions are violated.\nA-3: No – the issue does not permit critical manipulation.\nF-1: No – this finding is unique in the report.\nF-2: No – behavior is not explicitly documented but is common gas pattern.\nF-3: No – gas cost impact is real, not purely theoretical.\nF-4: No – overflow rules do not apply.\nF-5: No – reentrancy rules do not apply here.\nS-1: low – impact is limited to gas costs.\nS-2: high – inefficiency affects all calls to `farmPlots`.\nS-3: based on low impact and high likelihood the matrix would suggest medium, but this is a non-security practice issue and thus categorized as a best practice recommendation.\nX-1: No – this is a valid best practice recommendation, not a false positive.",
      "reasoning_summary": "This is a valid gas-optimization recommendation with low security impact and high likelihood, best classified as a best practices issue rather than removed.",
      "qa_trace": [],
      "adjustment": {
        "index": 9,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Consider batching `accountManager.updatePlayer` calls per landlord to reduce repetitive external calls and lower gas usage."
      }
    },
    {
      "finding_index": 10,
      "step_by_step_analysis": "We evaluated whether this is an arithmetic, reentrancy, or access control vulnerability and found it’s none of those—it’s a configuration clarity issue. The `_reconfigure` function retrieves uint values using storage keys that elsewhere denote contract addresses, which may lead to misinitialization of tax rates, schnibble rates, and plot pricing. While it represents a real risk of incorrect parameter setup, it doesn’t constitute a security flaw exploitable on-chain and is best classified as a best-practices recommendation rather than a removal candidate.",
      "reasoning_summary": "Retrieving numeric parameters with address-oriented storage keys is confusing and risks misconfiguration; this is a best-practices issue and should not be removed.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                51,
                64
              ],
              "why": "Calls configStorage which is a trusted config contract"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                51
              ],
              "why": "_reconfigure has no reentrancy guard"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                51
              ],
              "why": "_reconfigure is internal"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                51
              ],
              "why": "_reconfigure doesn’t require guard since it calls only configStorage"
            }
          ]
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 10,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Storage keys for addresses are used to fetch uint parameters, which is confusing and may misinitialize critical values; recommend renaming keys or updating config retrieval logic for clarity."
      }
    },
    {
      "finding_index": 11,
      "step_by_step_analysis": "O-1: The finding is not about arithmetic overflow or underflow, it concerns missing validation of plot metadata.\nO-2: The contract uses Solidity 0.8.25 with built-in overflow checks.\nO-3: No unchecked {} blocks are involved.\nO-4: No business requirement to handle overflow differently.\nO-5: There is no larger overflow exploit chain.\nR-1: stakeMunchable calls ERC721.transferFrom (an external call to an untrusted contract).\nR-2: State updates (plotOccupied, munchablesStaked, toilerState) occur after transferFrom.\nR-3: No reentrancy guard (`nonReentrant`) is applied to stakeMunchable.\nR-4: CEI is violated: interaction then effects.\nR-5: The call is external, not internal.\nA-1: stakeMunchable is not a privileged function; any registered user can call it by design.\nA-2: There is no decentralisation or timelock assumption broken by this logic.\nA-3: The issue does not enable critical protocol manipulation; it skews reward distribution.\nF-1: This finding is unique, not a duplicate.\nF-2: The behavior is not documented as intentional; it's unintended defaulting.\nF-3: The issue is practically exploitable when landlords haven’t initialized metadata.\nF-4: Not applicable (not an overflow finding).\nF-5: No proper reentrancy guards or CEI pattern here.\nS-1 (Impact): Medium, since landlords lose revenue.\nS-2 (Likelihood): Medium, as landlords may forget to initialize metadata.\nS-3: Medium per the risk matrix.\nX-1: The finding should not be removed; it is a valid logic bug.",
      "reasoning_summary": "A missing check on plotMetadata initialization leads to default zero tax rates and revenue loss for landlords; it’s a logic bug with medium impact and medium likelihood.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "true",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                150,
                153
              ],
              "why": "ERC721.transferFrom is external"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                163
              ],
              "why": "State is updated after transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "true",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "true",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Adjusted severity from matrix",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "false",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 11,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Add a require(plotMetadata[landlord].lastUpdated != 0) to prevent default zero tax rates for uninitialized landlords."
      }
    },
    {
      "finding_index": 12,
      "step_by_step_analysis": "1. The finding flags the use of a uint8 loop counter in `_farmPlots` against a `uint256[]` array length, suggesting a best-practices type mismatch.\n2. The contract uses Solidity 0.8.25, so no overflow/underflow risk, and there is an explicit cap of 10 staked munchables enforced in `stakeMunchable`, making the uint8 limit of 255 unreachable.\n3. There are no reentrancy or access-control issues related to this counter, and the issue is purely a recommendation to use consistent types for clarity and future safety.",
      "reasoning_summary": "The uint8 counter cannot overflow due to a 10-element cap, but aligning the counter type with the array length type is a low-impact best-practices improvement.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 12,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Counter is safe under the 10-element cap but should be uint256 to match array length and avoid future pitfalls."
      }
    },
    {
      "finding_index": 13,
      "step_by_step_analysis": "The bug occurs in transferToUnoccupiedPlot (LandManager.sol lines 200–227). The function reads the old plotId from toilerState[tokenId], frees that old plot, and marks the new plot occupied but never writes toilerState[tokenId].plotId = plotId. As a result, toilerState retains the stale plotId. Subsequent unstake or future transfers use the old plotId, freeing the wrong slot and leaving the new plot indefinitely occupied, and farm operations and events reference the wrong plotId.",
      "reasoning_summary": "transferToUnoccupiedPlot fails to update toilerState[tokenId].plotId after moving a token, so state remains stale and leads to denial-of-service by permanently locking the new plot and causing incorrect rewards and events.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "transferToUnoccupiedPlot makes no external contract calls"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "transferToUnoccupiedPlot has no nonReentrant or other guard"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "All operations occur within the same contract"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 13,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Valid bug: missing state update for plotId leads to stale state and incorrect behavior."
      }
    },
    {
      "finding_index": 14,
      "step_by_step_analysis": "The issue arises because _getNumPlots() divides lockManager.getLockedWeightedValue(_account) by PRICE_PER_PLOT without checking for zero. PRICE_PER_PLOT is loaded from configStorage and could be zero if misconfigured or maliciously set, causing a division by zero revert. This revert propagates through stakeMunchable, transferToUnoccupiedPlot, and any call using forceFarmPlots, effectively DoS’ing core functionality. There is no arithmetic overflow concern, no reentrancy vector, and no access-control bypass. A simple zero-value check on PRICE_PER_PLOT before division would mitigate this.",
      "reasoning_summary": "Missing zero-check on PRICE_PER_PLOT allows division by zero and DoS of core functions; this is a valid medium-severity issue.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 14,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Valid division-by-zero DoS: add a non-zero check on PRICE_PER_PLOT before division."
      }
    },
    {
      "finding_index": 15,
      "step_by_step_analysis": "1. This finding is about missing reentrancy guard, not arithmetic overflow; the pragma is ^0.8.25 so overflow checks are automatic and there's no unchecked block.\n2. The functions in question (e.g., stakeMunchable) perform external calls to accountManager.updatePlayer and munchNFT.transferFrom, then execute state updates afterward, violating the CEI pattern.\n3. No nonReentrant or similar guard is imported or applied, so a malicious external contract could reenter and manipulate state mid-operation.\n4. Access control is not relevant here (functions are not privileged in the sense of onlyOwner), and there is no centralization or timelock issue.\n5. It is neither a duplicate nor documented as safe; there is a concrete exploit path if the external contracts are malicious.\n6. Impact of reentrancy here is high (could lead to token loss or state corruption) and likelihood medium, yielding a medium severity per the matrix. No false-positive criteria apply, so the finding stands.",
      "reasoning_summary": "The missing reentrancy guard allows external calls before state updates, violating CEI and opening a real exploit path. It is not an overflow or access-control issue. With high impact and medium likelihood, severity is medium and the finding should not be removed.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "munchNFT.transferFrom external call"
            },
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "accountManager.updatePlayer external call"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155,
                160
              ],
              "why": "transferFrom occurs before plotOccupied and munchablesStaked updates"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                149,
                153,
                155
              ],
              "why": "interaction then effects"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "automatic overflow checks active"
            }
          ]
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 15,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Valid reentrancy risk; no guard and CEI is broken. Severity set to medium (high impact, medium likelihood)."
      }
    },
    {
      "finding_index": 16,
      "step_by_step_analysis": "1. This is an off-by-one boundary check in `stakeMunchable` rather than an arithmetic overflow or reentrancy issue. 2. The bug allows staking 11 munchables instead of the intended maximum of 10, but does not enable privileged access or break protocol invariants. 3. It is neither a false positive under overflow/reentrancy rules nor a duplicate or documented behavior. 4. The impact is low (one extra NFT) with high likelihood (easy to trigger), yielding a low severity per matrix.",
      "reasoning_summary": "Off-by-one in boundary check allows one extra stake; not overflow/reentrancy; minor impact and easily exploitable, so low severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 16,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Off-by-one bug allows one extra stake beyond intended limit; minor impact, recommend a fix."
      }
    },
    {
      "finding_index": 17,
      "step_by_step_analysis": "O-1: No. The finding concerns missing ERC721Receiver support, not arithmetic overflow/underflow.\nO-2–O-5: Not applicable since this is not an overflow issue.\nR-1–R-5: Not applicable; no external untrusted calls or reentrancy context.\nA-1–A-3: Not applicable; this is not an access-control issue.\nF-1: No, this finding is not duplicated elsewhere.\nF-2: No, the missing receiver hook is not documented or intentional design.\nF-3: No, the risk of token lockup via safeTransferFrom is practical.\nF-4–F-5: Not applicable.\nS-1: Impact is low (interoperability risk, not fund loss).\nS-2: Likelihood is medium (safeTransferFrom is commonly used).\nS-3: Matrix (low impact × medium likelihood) yields low, but this is a best-practices concern.\nX-1: No. It should remain as a best-practices recommendation.",
      "reasoning_summary": "Missing IERC721Receiver support impairs interoperability and risks NFT lockup; it is a practical, non-security-critical best-practices issue with low impact and medium likelihood. Keep as best practices.",
      "qa_trace": [],
      "adjustment": {
        "index": 17,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Implement IERC721Receiver.onERC721Received to support safeTransferFrom and avoid accidental NFT lockup."
      }
    },
    {
      "finding_index": 18,
      "step_by_step_analysis": "We walk through the checklist: This issue is not about arithmetic overflow/underflow and the contract uses Solidity ≥0.8 with no unchecked blocks. The problematic function makes no external calls, so no reentrancy guard or CEI concerns apply. Access control is as intended (only staker can move their token), but failing to update toilerState.plotId allows duplicated plot occupation and corrupts reward accounting. There are no false-positive conditions (not overflow, not reentrancy, not documented), so we assess impact as high and likelihood as high, giving a high severity and we should not remove the finding.",
      "reasoning_summary": "The function misses updating toilerState.plotId, enabling duplicate staking and corrupting rewards. It’s not overflow or reentrancy, no false-positive rules apply; impact and likelihood are both high, so severity is high.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 18,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Logic bug allows duplicated plot occupation and reward corruption; severity remains high."
      }
    },
    {
      "finding_index": 19,
      "step_by_step_analysis": "O-1: The finding describes an off-by-one logic bug in staking limit, not arithmetic overflow/underflow.\nO-2: The contract is compiled with Solidity 0.8.25, which has built-in overflow checks.\nO-3–O-5: No `unchecked` blocks or business requirements around overflow, and it’s not part of an arithmetic exploit chain.\nR-1–R-5: No external calls or reentrancy concerns; the issue is purely internal logic.\nA-1–A-3: This is a business-logic limit bug, not an access control flaw; no privileged functions are mis-exposed.\nF-1: No duplicate finding.\nF-2: Behavior is unintended; not documented as feature.\nF-3: The bug has a clear practical exploit path: players can stake an 11th token.\nF-4–F-5: Not applicable (not overflow or reentrancy).\nS-1: Impact is Low—the invariant break is non-critical business logic.\nS-2: Likelihood is High—it’s trivially exploitable by any player.\nS-3: Matrix maps Low impact + High likelihood to Medium severity.\nX-1: The finding is valid and should not be removed.",
      "reasoning_summary": "This is an off-by-one staking limit bug rather than overflow, reentrancy, or access-control issue. It allows a clear exploit path (staking an 11th token) but has low impact, so per the risk matrix it is Medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 19,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one logic bug allows an 11th stake; adjust the check to `>= 10` before pushing."
      }
    },
    {
      "finding_index": 20,
      "step_by_step_analysis": "The finding describes a potential overflow in “schnibblesTotal = (timestamp - _toiler.lastToilDate) * BASE_SCHNIBBLE_RATE”. However, the contract uses Solidity 0.8.25, which auto-checks for overflow/underflow except inside explicit unchecked blocks. There is no unchecked block around this multiplication, no documented business requirement to handle overflow differently, and it’s not part of a larger exploit chain. Thus per overflow mitigation rules it is a false positive and should be removed.",
      "reasoning_summary": "Solidity ≥0.8 auto-reverts on overflow and no unchecked block is used, so this overflow finding is a false positive and should be removed.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 20,
        "severity": "unchanged",
        "should_be_removed": true,
        "comments": "False positive: Solidity ≥0.8 auto-checks overflow and no unchecked block is present."
      }
    },
    {
      "finding_index": 21,
      "step_by_step_analysis": "We run through the checklist:\n\nOverflow checks (O-1–O-5): The finding is about mis-configuration keys, not arithmetic overflow, and there is no `unchecked` block or custom handling. \n\nReentrancy checks (R-1–R-5): This issue does not involve any external call ordering or lack of guards. \n\nAccess control checks (A-1–A-3): No privileged function is being exposed or mis-accessible here; it's simply loading wrong constants. \n\nFalse-positive checks (F-1–F-5): This is a unique, documented mis-configuration flaw with a clear exploit path (i.e., bricking the protocol). It is neither overflow nor reentrancy. \n\nSeverity scoring (S-1–S-3): Impact is high because the whole game can be disabled; likelihood is high since shipping with wrong keys is very probable. Combining high impact and high likelihood yields high severity. \n\nFinal removal decision (X-1): This is a valid vulnerability and should not be removed.",
      "reasoning_summary": "This is a true mis-configuration bug that loads garbage values for critical constants, which bricks the entire protocol. It has high impact and high likelihood. Severity should be elevated to high.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern not followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 21,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Loading critical constants from wrong storage keys can brick the entire protocol by producing nonsensical values; high impact and high likelihood."
      }
    },
    {
      "finding_index": 22,
      "step_by_step_analysis": "The finding points out a uint8 loop counter overflow in `_farmPlots`. However, the contract uses Solidity 0.8.25 which auto-reverts on any overflow, and no `unchecked` block is present. Moreover, `stakeMunchable` enforces a max of 10 staked tokens, so the loop can never reach 256 iterations. Therefore this scenario cannot occur in practice and is a false positive.",
      "reasoning_summary": "Solidity ≥0.8 auto-reverts on overflow without `unchecked`, and the code caps staked tokens at 10, making uint8 overflow impossible.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 22,
        "severity": "low",
        "should_be_removed": true,
        "comments": "Overflow prevention is automatic in Solidity ≥0.8 and the stake limit of 10 prevents uint8 overflow, making this impossible in practice."
      }
    },
    {
      "finding_index": 23,
      "step_by_step_analysis": "1. The finding concerns a missing update to `toilerState.lastToilDate` in `transferToUnoccupiedPlot`, leading to potentially zero rewards on the next `farmPlots` call.  \n2. This is not an arithmetic overflow/underflow issue, nor a reentrancy or access-control vulnerability—no external calls or privileged misuses are involved.  \n3. It’s a minor UX/behavioural improvement suggestion rather than a security flaw, with low impact and low likelihood of confusion.  \n4. Therefore, it merits a non-critical \"best practices\" recommendation, and should not be removed as a false positive.",
      "reasoning_summary": "The issue is a minor UX improvement, not an overflow, reentrancy, or access risk. It has low impact and low likelihood, so it merits a best-practices recommendation. It should not be removed.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 23,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Minor UX suggestion; no security impact."
      }
    },
    {
      "finding_index": 24,
      "step_by_step_analysis": "The `_reconfigure()` function uses StorageKey enums intended for address lookups (e.g., LockManager, AccountManager) when calling `getUint()`, causing it to load unrelated/incorrect uint values. This misalignment means MIN_TAX_RATE, MAX_TAX_RATE, DEFAULT_TAX_RATE, BASE_SCHNIBBLE_RATE, and PRICE_PER_PLOT will be nonsense numbers, breaking tax logic and reward calculations. There are no overflow, reentrancy, or access-control implications—this is purely a configuration mismatch with high impact on system economics.",
      "reasoning_summary": "The function loads critical parameters using wrong storage keys meant for addresses, leading to completely incorrect economic settings. This misconfiguration poses a high-impact, high-likelihood bug. No other vulnerability classes apply.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 24,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Configuration keys mismatch confirmed; parameters will be loaded incorrectly, breaking core economics."
      }
    },
    {
      "finding_index": 25,
      "step_by_step_analysis": "1. Overflow: The issue describes stuck assets and no arithmetic overflow or underflow concerns, so overflow rules do not apply.\n2. Re-entrancy: No external untrusted calls in this logic path; CEI and reentrancy guards are irrelevant.\n3. Access Control: No privileged functions are mis-exposed or violated; it’s a UX/incentive issue, not an auth flaw.\n4. False-positive: Not a duplicate, documented design, or theoretical; it’s a real UX problem.\n5. Severity: The impact is moderate (users lose rewards/confused) and likelihood is medium, mapping to medium severity.\n6. Final: This is a valid finding and should not be removed.",
      "reasoning_summary": "This is a valid UX/incentive issue, not an overflow, reentrancy, or access flaw. Impact is medium and likelihood medium, so severity remains medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 25,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Consider emitting an event or notifying users when a Munchable becomes dirty to prevent confusion and allow timely unstaking."
      }
    },
    {
      "finding_index": 26,
      "step_by_step_analysis": "We start by checking overflow rules: the finding is about a potential underflow when converting a negative int256 back to uint256 (O-1: Yes). The contract uses pragma 0.8.25, so over/underflows auto-revert by default (O-2: Yes) and no `unchecked {}` block wraps the arithmetic (O-3: No). There is no business requirement to handle overflow differently (O-4: No) and this arithmetic is not part of a larger exploit chain (O-5: No); therefore, underflow here simply reverts as designed and is not exploitable. The finding is not about re-entrancy (R-1–R-5: all No or Not Applicable) nor access control (A-1–A-3: No). It is not duplicated (F-1: No), not documented as intended (F-2: No), and has a practical effect (not purely theoretical, F-3: No). Since Solidity ≥0.8 and no `unchecked` block is present (F-4: Yes), it qualifies as a false positive under overflow rules. Impact if exploited is low because it only reverts the call, and likelihood is low since no unchecked context exists (S-1: Low, S-2: Low), which would map to Low severity (S-3). Given these answers, the finding should be removed as a false positive (X-1: Yes).",
      "reasoning_summary": "The underflow would simply revert under Solidity 0.8’s default checks and is not wrapped in `unchecked`, so there is no exploitable underflow. This matches the false-positive criteria for overflow in ≥0.8 solidity. We therefore remove the finding.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                286
              ],
              "why": "This code converts a negative int256 back to uint256"
            }
          ]
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 26,
        "severity": "low",
        "should_be_removed": true,
        "comments": "Underflow here simply reverts under Solidity 0.8; no `unchecked` block or exploit path exists, so this is a false positive."
      }
    },
    {
      "finding_index": 27,
      "step_by_step_analysis": "Step O (Overflow checks): The finding concerns a logical off-by-one limit check, not arithmetic operations, so overflow rules do not apply. The contract is compiled with Solidity 0.8.25 with no unchecked blocks, but that’s irrelevant here.\nStep R (Reentrancy): The stakeMunchable function calls external ERC-721 methods (ownerOf, isApprovedForAll, transferFrom) before making state changes, and has no reentrancy guard or CEI compliance—this is a reentrancy pattern violation, but the issue flagged is unrelated to that.\nStep A (Access control): The function is not privileged and doesn’t grant special rights to unprivileged users; it’s a user‐initiated operation.\nStep F (False positive): The issue isn’t a duplicate, isn’t documented as intentional, and has a practical off-by-one exploit path.\nStep S (Severity): Off-by-one allows staking 11 instead of 10; impact is low, likelihood is high, yielding a medium severity per the matrix.\nStep X (Removal): This is a genuine bug, not a false positive.",
      "reasoning_summary": "The off-by-one check allows an 11th stake, posing a low-impact but easily triggered issue, so severity remains medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 27,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one allows 11 stakes instead of 10; low impact but easily exploited, so retain as medium severity."
      }
    },
    {
      "finding_index": 28,
      "step_by_step_analysis": "O-1: The finding concerns a uint8 loop counter, not arithmetic overflow/underflow. O-2: The contract uses Solidity 0.8.25 with built-in overflow checks. O-3: No operations are in an unchecked block. O-4: No alternative overflow behavior is required by business logic. O-5: This loop counter mismatch is not part of any exploit chain. R-1–R-5: There is no external call in this context, so reentrancy rules do not apply. A-1–A-3: No privileged function or decentralization assumption is implicated. F-1: This is not duplicated elsewhere. F-2: The behavior is simply a coding style suggestion, not intended documentation. F-3: It is purely theoretical—no practical exploit path exists. F-4: Under Solidity ≥0.8 without unchecked, overflow is impossible, so this is a false-positive overflow finding. F-5: Reentrancy protections are irrelevant here. S-1–S-3: At worst it’s a low-impact, low-likelihood code style note— classified as “best practices.” X-1: It should be removed as a false positive.",
      "reasoning_summary": "This is a theoretical code clarity note about using uint8 in a loop under Solidity 0.8+, not an actual overflow or security issue, and should be treated as a false positive/best practice remark.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation or timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 28,
        "severity": "best practices",
        "should_be_removed": true,
        "comments": "This is a code‐style best practice suggestion, not a security vulnerability; no action needed."
      }
    },
    {
      "finding_index": 29,
      "step_by_step_analysis": "The finding highlights the use of a swap-and-pop pattern in `_removeTokenIdFromStakedList`, which replaces the removed element with the last element in the `munchablesStaked` array and then calls `.pop()`. This is a well-known, gas-efficient design choice rather than a security flaw—it does not involve arithmetic, external calls, or access control issues. While it may affect user interfaces or integrations expecting stable ordering, it is intentional and should be classified as a best practices suggestion.",
      "reasoning_summary": "Swap-and-pop order mutation is an intentional gas optimization with UX trade-offs; classify as best practices.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 29,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Swap-and-pop is an intentional gas-optimization; order changes are by design. Consider documenting this behavior for integrators."
      }
    },
    {
      "finding_index": 30,
      "step_by_step_analysis": "The finding concerns potential out‐of‐bounds array access in `_farmPlots` when indexing REALM_BONUSES and RARITY_BONUSES without explicit checks. This is not an overflow/underflow issue (Solidity 0.8 auto‐reverts on overflow, and no unchecked block is used), nor is it a reentrancy or access‐control flaw. However, unexpected NFT attributes or landlord metadata could cause a revert DoS in `_farmPlots`. Explicit bounds checks would prevent array OOB and ensure robustness. Severity is set to low given the impact is DoS of farming and the likelihood is low due to controlled attribute ranges.",
      "reasoning_summary": "The issue is a valid array‐bounds risk (not overflow or reentrancy) that can revert and block farming; its impact is DoS (medium) but likelihood is low, yielding a low severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "Not applicable",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "Not applicable",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "No",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 30,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Add explicit bounds checks for REALM_BONUSES and RARITY_BONUSES indices to prevent potential out-of-bounds revert."
      }
    },
    {
      "finding_index": 31,
      "step_by_step_analysis": "The issue concerns missing validation that a landlord has initialized their plot metadata before staking, leading to a default tax rate of zero. It is not an overflow issue (no arithmetic misuse), nor an access-control bypass (any user may call stakeMunchable by design). Although stakeMunchable makes an external transferFrom before updating state (potential reentrancy pattern violation), this finding is about missing metadata checks, not reentrancy. There is no duplication or documented exception, and the bug has a clear impact: landlords lose tax revenue if they never initialized metadata. Impact is limited (landlord revenue loss), likelihood medium (easy to overlook initialization), so severity stays low. This is a valid finding and should not be removed.",
      "reasoning_summary": "Missing plot metadata validation allows landlords to receive zero tax, causing revenue loss; it’s not an overflow or access issue, and the bug is practical though limited in impact, so severity remains low.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                149,
                153
              ],
              "why": "Calls IERC721.transferFrom on an external NFT contract"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "transferFrom happens before updating toilerState and mappings"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                136
              ],
              "why": "Function has no nonReentrant modifier"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "Interaction before effects"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 31,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Require `plotMetadata[landlord].lastUpdated != 0` before staking to ensure landlords receive non-zero tax rates."
      }
    },
    {
      "finding_index": 32,
      "step_by_step_analysis": "The issue flags reentrancy in `_farmPlots` due to external calls to `accountManager.updatePlayer`. However, the function updates its own storage (`toilerState[tokenId].lastToilDate` and `toilerState[tokenId].latestTaxRate`) before making any external calls, satisfying the Checks-Effects-Interactions (CEI) pattern. There is no `unchecked` arithmetic here; although no `nonReentrant` guard is used, the ordering of effects before interactions mitigates reentrancy risk, so this finding is a false positive.",
      "reasoning_summary": "State changes occur before external calls in `_farmPlots`, following the CEI pattern; no reentrancy guard isn’t required here, thus this is a false positive.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": "calls to accountManager.updatePlayer are external"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                293
              ],
              "why": "toilerState updates occur before external calls"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233
              ],
              "why": "no nonReentrant modifier on `_farmPlots`"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "effects occur before interactions"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "call to external `accountManager`"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "state changes precede external calls"
            }
          ]
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 32,
        "severity": "unchanged",
        "should_be_removed": true,
        "comments": "CEI pattern respected: state changes occur before external interactions, mitigating reentrancy risk."
      }
    },
    {
      "finding_index": 33,
      "step_by_step_analysis": "The report points out that transferToUnoccupiedPlot reads the old toilerState[tokenId].plotId into a local _toiler but never writes the new plotId back into toilerState[tokenId]. While it updates occupied flags and emits FarmPlotTaken with the stale toilerState, the internal mapping still holds the old plotId. Consequently, subsequent farmPlots calls will calculate rewards or validations using the wrong plotId, misallocating schnibbles and potentially blocking further transfers. This is a state‐management bug rather than overflow, reentrancy, or access‐control issue; it should remain as a valid finding with medium severity.",
      "reasoning_summary": "Missing state update of toilerState.plotId leads to stale state and misallocated rewards; it doesn’t meet any false‐positive criteria and warrants medium severity given its impact on correctness and moderate exploit likelihood.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes (but irrelevant)",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no (CEI irrelevant here)",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes (but N/A)",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes (but N/A)",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity:",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 33,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "toilerState.plotId is never updated in transferToUnoccupiedPlot, causing stale state and incorrect reward calculations."
      }
    },
    {
      "finding_index": 34,
      "step_by_step_analysis": "O-1: No – this is about out-of-bounds array indexing, not arithmetic overflow.\nO-2: N/A – not an overflow issue.\nO-3: N/A\nO-4: N/A\nO-5: N/A\nR-1: No – no external untrusted call.\nR-2: N/A\nR-3: N/A\nR-4: N/A\nR-5: N/A\nA-1: No – not an access control issue.\nA-2: No\nA-3: No\nF-1: No duplicate reported.\nF-2: No – this is unintended potential DoS.\nF-3: No – practical DoS if config mis-set.\nF-4: N/A\nF-5: N/A\nS-1: Impact is High (Denial of Service blocking farming).\nS-2: Likelihood is Low (requires misconfiguration of bonus arrays).\nS-3: Matrix gives Medium (High impact + Low likelihood).\nX-1: No – valid finding.",
      "reasoning_summary": "This is a valid out-of-bounds DoS risk due to missing bounds checks on bonus arrays; impact is high but likelihood low, yielding medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behavior clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 34,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Valid out-of-bounds DoS vulnerability; consider adding bounds checks on array accesses."
      }
    },
    {
      "finding_index": 35,
      "step_by_step_analysis": "This issue arises because `_getNumPlots` divides by the configuration variable `PRICE_PER_PLOT` without checking if it is non-zero, which can revert with a division-by-zero error and block downstream functions (staking, farming). It is not an overflow or underflow, does not involve an external call (so no reentrancy), and is unrelated to access control. The misconfiguration can be exploited by setting `PRICE_PER_PLOT` to zero in the config storage, leading to a Denial-of-Service, so it is a valid finding with medium impact and medium likelihood.",
      "reasoning_summary": "A missing non-zero check on `PRICE_PER_PLOT` can cause division by zero and DoS; not an overflow/reentrancy/access issue. Severity set to medium (medium impact DoS, medium likelihood).",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 35,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Add a check to ensure PRICE_PER_PLOT is non-zero in configuration to prevent division-by-zero and DoS."
      }
    },
    {
      "finding_index": 36,
      "step_by_step_analysis": "The reported issue concerns a DoS risk from the forceFarmPlots modifier calling internal _farmPlots before stake/unstake operations. It is not related to overflow or reentrancy, and external calls within _farmPlots target trusted contracts. This behavior is an intentional design choice to auto-farm on user actions, so it should be treated as a best-practices note rather than a security vulnerability.",
      "reasoning_summary": "The DoS risk stems from an intentional auto-farming modifier rather than an exploitable bug. This is a design trade-off, not a security flaw. Recommend classifying as a best-practices suggestion.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                41,
                42
              ],
              "why": "modifier forceFarmPlots calls internal _farmPlots"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                41
              ],
              "why": "forceFarmPlots deliberately auto-farms on user interactions"
            }
          ]
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 36,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "This is a design trade-off: forceFarmPlots intentionally auto-farms before user actions. Treat as a best-practices suggestion rather than a security vulnerability."
      }
    },
    {
      "finding_index": 37,
      "step_by_step_analysis": "The check in `stakeMunchable` uses `if (munchablesStaked[mainAccount].length > 10)` which only reverts when the array length is already greater than 10. When the length is exactly 10, the condition is false, allowing an 11th token to be staked, thus bypassing the intended cap. This is a genuine off-by-one logic bug, not an overflow or reentrancy issue, and it allows any user to exploit the staking cap easily.",
      "reasoning_summary": "The `> 10` check allows the 11th stake by mistake, making this a real off-by-one vulnerability with low impact but high likelihood, so severity is raised to medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "true",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "Calls ERC721.transferFrom on an external token contract"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                156,
                160
              ],
              "why": "Mapping and array updates follow the transferFrom call"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [],
              "why": "No reentrancy modifier on stakeMunchable"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "Interaction (transferFrom) precedes effects (state updates)"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "false",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "transferFrom invokes external ERC721 contract"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "true",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "false",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 37,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one check allows an 11th stake; low impact but easily exploitable, adjust to medium."
      }
    },
    {
      "finding_index": 38,
      "step_by_step_analysis": "We evaluate overflow first: the issue is about casting a negative int256 result to uint256, effectively wrapping to a huge value (O-1: yes). The contract uses pragma 0.8.25, so auto-overflow checks are enabled (O-2: yes), and there is no `unchecked` block here (O-3: no). There is no documented business requirement for custom overflow handling (O-4: no), but the overflow is part of a larger exploit chain that causes a DOS (O-5: yes).\nRe-entrancy questions are not applicable: no external untrusted calls in the arithmetic (R-1–R-5: all no).\nAccess control is not directly implicated: no privileged function is bypassed (A-1–A-2: no), although the bug does allow critical protocol DOS (A-3: yes).\nThis finding is unique (F-1: no), not documented or intended (F-2: no), and has a clear practical exploit (F-3: no). It is an overflow-like issue in Solidity ≥0.8 without `unchecked` (F-4: yes), but not a re-entrancy false positive (F-5: no).\nImpact of stuck funds/NFTs and broken accounting is high (S-1: high), exploit requires only a specific NFT combo so likelihood is high (S-2: high), giving a high severity overall (S-3: high). The issue is real and should not be removed (X-1: no).",
      "reasoning_summary": "The negative bonus cast to uint256 causes a real overflow/DOS bug in Solidity 0.8.25 without any unchecked block, with high impact and high likelihood. It’s not a false positive and severity remains high.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 38,
        "severity": "high",
        "should_be_removed": false,
        "comments": "The negative-to-uint overflow is a real bug causing DOS with high impact and high likelihood; severity remains high."
      }
    },
    {
      "finding_index": 39,
      "step_by_step_analysis": "The finding flags external calls inside `_farmPlots` to `accountManager.updatePlayer(...)` which are unprotected by any reentrancy guard and occur before the bodies of `stakeMunchable`, `unstakeMunchable`, and `transferToUnoccupiedPlot`, meaning those functions’ own state changes (transfers and mapping updates) execute after the external call. The contract uses Solidity 0.8.25 so overflow is not relevant here, and no CEI pattern or `nonReentrant` modifier wraps these interactions. Thus all criteria for a true reentrancy risk are met.",
      "reasoning_summary": "External calls to an untrusted `AccountManager` occur without any reentrancy guard and are followed by state‐changing logic in the caller functions, satisfying the conditions for a valid reentrancy vulnerability. No CEI pattern or guards are present.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": "Calls to accountManager.updatePlayer in _farmPlots"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                153
              ],
              "why": "stakeMunchable body (transfers and mapping updates) executes after the modifier calls _farmPlots"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                41,
                136
              ],
              "why": "No nonReentrant or similar guard around functions"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                248,
                301
              ],
              "why": "Interactions with AccountManager occur before modifying LandManager’s own state in caller functions"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 39,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Valid reentrancy risk: external calls to untrusted contract without guard precede caller state updates."
      }
    },
    {
      "finding_index": 40,
      "step_by_step_analysis": "1. Overflow checks (O-1 to O-5): The issue describes a uint8 loop index overflow when the staked array grows to 256. Solidity 0.8.25 enables automatic overflow checks (O-2), and no explicit unchecked blocks are used (O-3), with no special business requirement (O-4) or larger exploit chain (O-5).\n2. Reentrancy rules (R-1 to R-5): The finding does not involve any external calls or reentrancy patterns, so all R-questions are not applicable or answered “no.”\n3. Access control (A-1 to A-3): This is a user-facing function without privileged access, so no unauthorized access or protocol manipulation is possible.\n4. False positive rules (F-1 to F-5): The finding is unique (F-1 no), not documented or intended (F-2 no), practical (F-3 no), and while it involves an overflow, it is not a safe-math false positive since the overflow behavior is the root cause of the logic bug, not just benign overflow in arithmetic (F-4 no). No reentrancy (F-5 n/a).\n5. Severity (S-1 to S-3): The impact is self-DoS (low), and likelihood of reaching 256 stakes is very low, so combined severity is low.\n6. Final removal (X-1): This is a valid finding and should not be removed.",
      "reasoning_summary": "The off-by-one in the staking cap allows the array to grow up to 256 entries, causing the uint8 loop counter to overflow and revert, leading to a self-DoS. The issue is real, practical, and results in a low-severity finding.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 40,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Valid self-DoS issue: off-by-one cap and uint8 loop overflow can brick farming. Recommend checking `>=` 10 or using a larger index type."
      }
    },
    {
      "finding_index": 41,
      "step_by_step_analysis": "1. This finding concerns uninitialized `plotMetadata[landlord]` defaulting to a zero tax rate, allowing free farming. 2. It is not an overflow/underflow issue (O-1 to O-5: all No). 3. It is not a reentrancy vulnerability (R-1 to R-5: all No). 4. It does not involve improper access controls or timelocks (A-1 to A-3: all No). 5. It is not duplicated or documented/intentional, nor purely theoretical (F-1 to F-3: all No). 6. No unchecked arithmetic or missing guards apply (F-4, F-5: No). 7. The exploit is straightforward and gives free economic benefit—impact is medium, likelihood is high. 8. Matrix yields High severity. 9. It is a valid finding and should not be removed.",
      "reasoning_summary": "Uninitialized plot metadata allows 0% tax and free yield; it's a practical logic flaw with medium impact and high likelihood, mapping to high severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 41,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Uninitialized plot metadata allows zero tax and free yield—practical logic flaw with medium impact and high likelihood, warranting high severity."
      }
    },
    {
      "finding_index": 42,
      "step_by_step_analysis": "The report describes a missing update of toilerState[tokenId].plotId in transferToUnoccupiedPlot, which is neither an arithmetic overflow nor a reentrancy or access control issue. The function contains no external calls, so reentrancy rules do not apply, and it uses proper permission checks via _getMainAccountRequireRegistered. This is a genuine logic bug leading to stale state: the contract will continue using the old plotId for reward calculations, causing inconsistencies and potential double‐farming exploits.",
      "reasoning_summary": "This is not an overflow, reentrancy, or access control issue but a true logic bug: plotId remains stale, causing incorrect reward calculations; impact medium and likelihood medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "transferToUnoccupiedPlot only updates mappings and emits events"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "transferToUnoccupiedPlot has no reentrancy guard"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "true",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                200,
                227
              ],
              "why": "All calls are to internal state and functions"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "false",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 42,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Confirmed logic bug: missing state update causes stale plotId, leading to incorrect reward calculations; severity adjusted to medium."
      }
    },
    {
      "finding_index": 43,
      "step_by_step_analysis": "The finding targets a signed arithmetic block where `finalBonus` can be less than –100, causing `(int256(schnibblesTotal) + int256(schnibblesTotal) * finalBonus) / 100` to be negative. Solidity ≥0.8 reverts on signed overflow/underflow, but negative results are valid in signed context, and the subsequent cast `uint256(negative)` wraps to a large uint256. This leads to massive unintended rewards when a negative intermediate is converted to uint without a guard.",
      "reasoning_summary": "Casting a negative signed result to uint256 wraps to a large value because Solidity only reverts on arithmetic overflow/underflow, not on converting negative ints to uints.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                287
              ],
              "why": "The calculation can underflow into negative int256 before conversion"
            }
          ]
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 43,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "The signed-to-uint256 conversion can wrap negative results into huge values; recommend bounds checks or using `max(0, …)` before casting."
      }
    },
    {
      "finding_index": 44,
      "step_by_step_analysis": "The finding concerns misuse of configuration storage keys in `_reconfigure`, not arithmetic overflow, reentrancy, or access control. The storage keys LockManager, AccountManager, ClaimManager are contract-name keys and thus load incorrect uint values (likely zero), breaking tax rate logic. This is a coding mistake affecting core functionality and should be flagged as a best-practices issue rather than a security exploit, and it must remain in the report.",
      "reasoning_summary": "Incorrect contract-name storage keys are used for numeric configs in `_reconfigure`, causing wrong or zero values for tax rates. This is a functional coding bug affecting core logic and qualifies as a best-practices finding.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "Yes (pragma solidity 0.8.25)",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Pragma specifies 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "Not applicable",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "Not applicable",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "Not applicable",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "No",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                93,
                105,
                118
              ],
              "why": "Functions use notPaused/onlyConfiguredContract modifiers"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "Yes (but not an overflow finding)",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "Not applicable",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "Medium (core logic break impacting tax calculations)",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "Medium (bug consistently triggers at runtime)",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "No",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 44,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "The config keys for min/max/default tax rates are incorrect contract-name keys. They should use specific keys (e.g., StorageKey.MinTaxRate) to load the intended numeric values."
      }
    },
    {
      "finding_index": 45,
      "step_by_step_analysis": "O-1: The finding is about a reentrancy pattern, not arithmetic overflow.\nO-2–O-5: Not applicable (no arithmetic involved).\nR-1: The function calls an external IERC721.transferFrom (untrusted) before state updates.\nR-2: Yes, state mutations (plotOccupied, munchablesStaked, munchableOwner, toilerState) occur after the external call.\nR-3: There is no nonReentrant or similar guard on the function.\nR-4: The CEI pattern is violated since effects follow the external call.\nR-5: The call is external, not internal.\nA-1–A-3: This is not an access-control issue; stakeMunchable is intended as a public user action.\nF-1–F-3: Not duplicated, not documented as intentional, and not purely theoretical.\nF-4: N/A (overflow).\nF-5: No guard or CEI pattern is present, so by simple rule it would be kept.\nHowever, ERC721.transferFrom does not trigger any callback into LandManager (unlike safeTransferFrom), so actual reentrancy cannot occur.\nS-1: Impact is low (limited to user’s own staking state).\nS-2: Likelihood is low (no practical reentrancy path).\nS-3: Matrix (Low impact × Low likelihood) ⇒ Low severity.\nX-1: Not removed, though risk is minimal.",
      "reasoning_summary": "Although stakeMunchable makes an external call before state updates without a guard, IERC721.transferFrom does not invoke callbacks into LandManager, so practical reentrancy is impossible and risk is minimal.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "IERC721.transferFrom is an external call"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                160,
                161,
                163
              ],
              "why": "State updates occur immediately after transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                136
              ],
              "why": "Function lacks nonReentrant or similar modifier"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "Effects happen after interaction"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 45,
        "severity": "low",
        "should_be_removed": false,
        "comments": "ERC721.transferFrom does not invoke callbacks into LandManager, so no practical reentrancy path exists; risk is minimal."
      }
    },
    {
      "finding_index": 46,
      "step_by_step_analysis": "This finding concerns unchecked array accesses rather than arithmetic overflow: the code indexes REALM_BONUSES and RARITY_BONUSES without validating the computed index, which under Solidity 0.8+ will panic (revert) on out-of-bounds rather than wrap. Since pragma is ^0.8.25, overflow checks are automatic and there is no unchecked block here. No reentrancy or access-control issues are implicated by this snippet. The root issue is a potential denial-of-service if malformed or malicious realm/rarity values slip through upstream and trigger a revert. Mitigation: add explicit bounds checks or require that realms and rarities stay within configured array lengths.",
      "reasoning_summary": "The issue is unchecked array indexing under Solidity 0.8+, causing a DoS reversion on out-of-bounds. No overflow, reentrancy, or access flaws apply; severity is medium impact but low likelihood, yielding low severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 46,
        "severity": "low",
        "should_be_removed": false,
        "comments": "This is an array-bounds DoS risk, not overflow; add explicit index bounds checks or require valid realm/rarity values."
      }
    },
    {
      "finding_index": 47,
      "step_by_step_analysis": "The `_getNumPlots` function performs `lockManager.getLockedWeightedValue(_account) / PRICE_PER_PLOT` without any check that `PRICE_PER_PLOT` is non-zero. If `PRICE_PER_PLOT` were set to 0 via misconfiguration, every call through `_getNumPlots` (used by core functions) would revert, potentially locking user funds. This is not an overflow/underflow issue (Solidity ≥0.8 auto-checks overflow), nor a reentrancy or access control flaw—it is a configuration validation issue with real impact.",
      "reasoning_summary": "Division by zero can occur if PRICE_PER_PLOT is zero, causing critical functions to revert and lock funds; impact is high, likelihood low, so severity is medium.",
      "qa_trace": [],
      "adjustment": {
        "index": 47,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Ensure PRICE_PER_PLOT is validated as non-zero (e.g., `require(PRICE_PER_PLOT > 0)`) during initialization to prevent division by zero."
      }
    },
    {
      "finding_index": 48,
      "step_by_step_analysis": "The finding concerns missing zero‐address validation when loading external contract addresses in `_reconfigure`. This is not an overflow or reentrancy issue, nor does it involve access‐control bypass; the calls are internal or guarded by `onlyConfigStorage`. It’s not duplicated, theoretical, or intended behavior, but rather a best-practices recommendation to prevent misconfiguration. The impact of a zero address is service disruption (reverts on any call), the likelihood is moderate since configuration might change over time, and this aligns with a best‐practices severity.",
      "reasoning_summary": "Missing zero‐address checks are a best‐practice issue, not an exploit, and should be classified as ‘best practices’ rather than removed.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 48,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Add explicit zero-address checks after retrieving each contract address to prevent silent reverts or broken functionality due to misconfiguration."
      }
    },
    {
      "finding_index": 49,
      "step_by_step_analysis": "The finding points out that the `stakeMunchable` function uses `if (munchablesStaked[mainAccount].length > 10)` which allows staking the 11th munchable before reverting. The check should be `>= 10` (or `> 9`) to block the 11th stake immediately. This is a business‐logic boundary bug rather than a security vulnerability, and it does not involve arithmetic overflow, access control gaps, or reentrancy exploits.",
      "reasoning_summary": "The limit check uses `>` instead of `>=`, allowing one extra stake—this is a business‐logic bug best addressed as a best practices recommendation.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "IERC721.transferFrom is an external call"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                160
              ],
              "why": "Mappings and arrays are updated after transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 49,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Use `>=` instead of `>` to enforce a maximum of 10 staked Munchables."
      }
    },
    {
      "finding_index": 50,
      "step_by_step_analysis": "The `_farmPlots` loop is capped by `munchablesStaked.length`, and `stakeMunchable` enforces a maximum of 10 tokens per user, so the loop will never reach gas limits. Although it makes external calls to `nftAttributesManager` and `accountManager` inside the loop, the bounded iteration prevents a practical DoS. The uint8 counter limit of 255 is irrelevant given the 10‐token cap. This is a best practices optimization rather than a true vulnerability.",
      "reasoning_summary": "The loop runs at most 10 iterations due to a staking cap, so external calls inside it cannot exhaust block gas; the uint8 index is sufficient. Thus, there is no practical DoS exploit and this is a best practices note.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                268,
                301
              ],
              "why": "Calls to nftAttributesManager and accountManager in loop"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "State updates follow external calls"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233
              ],
              "why": "_farmPlots not protected by nonReentrant"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                268,
                292
              ],
              "why": "Interactions and state changes are interleaved"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                229,
                233
              ],
              "why": "farmPlots is external and callable by any user"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                241,
                248
              ],
              "why": "Max staked = 10 prevents gas exhaustion"
            }
          ]
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 50,
        "severity": "best practices",
        "should_be_removed": true,
        "comments": "DoS risk is purely theoretical since staking is capped at 10 tokens; remove as a false positive."
      }
    },
    {
      "finding_index": 51,
      "step_by_step_analysis": "The reported issue concerns centralization risk from using a configurable storage contract, not an arithmetic, reentrancy, or access‐control bug. All overflow checks use Solidity ≥0.8 with no unchecked blocks, so overflow is non-applicable. There are no privileged functions in LandManager exposed to unprivileged callers, and config updates are gated by the ConfigStorage contract. Under the access-control rules, centralization risks default to Info severity unless they break stated decentralisation goals or timelock assumptions, which is not the case here. Thus the finding is a valid design consideration and should remain at Info severity.",
      "reasoning_summary": "This is a design‐level centralization risk, not an overflow, reentrancy, or unauthorized access bug; Info severity is appropriate and unchanged.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 51,
        "severity": "info",
        "should_be_removed": false,
        "comments": "Centralization via config storage is an intended design trade-off; Info severity is appropriate."
      }
    },
    {
      "finding_index": 52,
      "step_by_step_analysis": "The issue arises in the `_farmPlots` function where `finalBonus` can be negative and, if its absolute value exceeds 100, the intermediate signed reward calculation becomes negative. Casting that negative `int256` to `uint256` wraps to a huge positive number, inflating rewards. This occurs in Solidity ≥0.8.0 without any `unchecked` block, no documented alternative overflow handling, and is not part of a larger exploit chain, so it constitutes a true arithmetic vulnerability that needs bounds checks or safe casting.",
      "reasoning_summary": "Negative percentage adjustments can produce a negative intermediate that wraps when cast to `uint256` under Solidity ≥0.8.0, leading to massive reward inflation. No `unchecked` block or business exception exists, so this is a valid overflow issue requiring a patch.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                287
              ],
              "why": "Negative int256 to uint256 conversion in schnibblesTotal calculation"
            }
          ]
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                281,
                287
              ],
              "why": "No `unchecked` block around this conversion"
            }
          ]
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233,
                309
              ],
              "why": "No reentrancy modifier in `_farmPlots`"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity:",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 52,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "finalBonus < -100 can underflow and wrap on cast to uint256; add bounds checks or safe casting to prevent reward inflation."
      }
    },
    {
      "finding_index": 53,
      "step_by_step_analysis": "The helper function `_getNumPlots` divides by `PRICE_PER_PLOT` loaded from config without any check for zero. If `PRICE_PER_PLOT` is ever zero, the division reverts, causing a DoS on staking and farming functions that rely on `_getNumPlots`. There is no guard or require to enforce `PRICE_PER_PLOT` > 0.",
      "reasoning_summary": "Unvalidated zero `PRICE_PER_PLOT` leads to division-by-zero reverts, DoS-ing core functions; a simple require check should be added.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 53,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Add a require check to ensure PRICE_PER_PLOT > 0 to prevent division-by-zero DoS."
      }
    },
    {
      "finding_index": 54,
      "step_by_step_analysis": "The `transferToUnoccupiedPlot` function reads the stored `plotId` into a local `_toiler` struct and uses that to clear and set occupancy mappings, but never writes the new `plotId` back to storage (`toilerState[tokenId].plotId`). As a result, subsequent logic (including events and future farming logic) continues to use the old plotId, leading to stale state, misleading events, and potentially freezing further rewards for that token. The fix is to add `toilerState[tokenId].plotId = plotId;` before emitting `FarmPlotTaken`.",
      "reasoning_summary": "The function updates occupancy but omits updating `toilerState[tokenId].plotId`, causing stale internal state and incorrect events. This can freeze future farming rewards and mislead clients. Adding the missing assignment corrects the inconsistency.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 54,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Add `toilerState[tokenId].plotId = plotId;` before emitting to keep internal state and events consistent."
      }
    },
    {
      "finding_index": 55,
      "step_by_step_analysis": "In `stakeMunchable`, the check `if (munchablesStaked[mainAccount].length > 10)` uses `>` instead of `>=`, so when `length == 10` it passes and then pushes an 11th token. This off-by-one bug allows staking 11 munchables instead of the intended maximum of 10. Impact is minor (one extra stake) but easily exploitable by any user, so severity adjusts to medium.",
      "reasoning_summary": "The `>` check allows an 11th stake by mistake; low impact but high likelihood yields medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "`munchNFT.transferFrom(...)` is external"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                160,
                161,
                163
              ],
              "why": "state is updated after `transferFrom`"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 55,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one in stake limit allows an 11th munchable; change the check to `>= 10`."
      }
    },
    {
      "finding_index": 56,
      "step_by_step_analysis": "The finding describes an underflow in `_farmPlots` where `timestamp` is set to `plotMetadata[landlord].lastUpdated` if the landlord’s plot count drops below the tenant’s `plotId`. If that stored `lastUpdated` is less than `_toiler.lastToilDate`, the subtraction `(timestamp - _toiler.lastToilDate)` underflows and reverts under Solidity 0.8’s checked arithmetic. Because all functions using `_farmPlots` are wrapped in the `forceFarmPlots` modifier, any call to unstake or transfer through those entry points will revert and block users from recovering their NFTs. This is a real DoS vulnerability exploitable by a malicious landlord. It is not in an `unchecked` block nor part of a false-positive pattern, and severity per impact/likelihood matrix is medium.",
      "reasoning_summary": "An underflow in checked subtraction in `_farmPlots` can be triggered by a landlord to cause a revert-based DoS, permanently trapping NFTs; no mitigations like `unchecked`, CEI, or reentrancy guards apply, warranting medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 56,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Underflow in checked subtraction can be exploited for a permanent DoS and NFT lock; add boundary checks or adjust timestamp logic to prevent underflow."
      }
    },
    {
      "finding_index": 57,
      "step_by_step_analysis": "We evaluated the finding against overflow, reentrancy, access-control, false-positive, and severity rules in order:\n\nOverflow (O-1 to O-5): This finding is not about arithmetic overflow/underflow (O-1: No). The contract is compiled with Solidity ≥0.8.0 (O-2: Yes), no `unchecked` block is involved (O-3: No), there’s no special overflow handling requirement (O-4: No), and it’s not part of a larger exploit chain of arithmetic flaws (O-5: No).\n\nRe-entrancy (R-1 to R-5): `stakeMunchable` calls the external `IERC721.transferFrom` on an untrusted contract (R-1: Yes), then performs state changes—populating mappings—after the call (R-2: Yes), without any `nonReentrant` guard (R-3: Yes) and violating CEI (checks-effects-interactions) (R-4: Yes). The call is not internal (R-5: No).\n\nAccess-Control (A-1 to A-3): There is no privileged function context here that an unprivileged user should not call (A-1: No), it does not contradict any decentralization or timelock assumption (A-2: No), and while it allows trapping a user’s NFT, it does not enable protocol-level manipulation (A-3: No).\n\nFalse-Positive (F-1 to F-5): This is not a duplicate finding (F-1: No), not documented behavior (F-2: No), has a clear practical exploit path (F-3: No), is unrelated to overflow (F-4: No), and no proper reentrancy guard or CEI is present (F-5: No).\n\nSeverity (S-1 to S-3): Impact is high because users can permanently lose their NFTs (S-1: high). Likelihood is high as staking to any unregistered landlord address is trivial (S-2: high). According to the matrix, high impact × high likelihood yields high severity (S-3: high).\n\nFinal Removal Decision (X-1): This is a genuine vulnerability, not a false positive, so it should not be removed (X-1: No).",
      "reasoning_summary": "Staking to an unregistered landlord bypasses registration checks, causing subsequent `farmPlots` calls to revert and trap NFTs. The function calls an external untrusted contract before updating state without a reentrancy guard, violating CEI. The issue is a real, high-impact vulnerability and should be kept.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "IERC721.transferFrom"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                160,
                161,
                163
              ],
              "why": "mappings and state set after transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 57,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Missing landlord registration check allows permanent NFT lock through revert on farmPlots."
      }
    },
    {
      "finding_index": 58,
      "step_by_step_analysis": "1. The issue arises in `_farmPlots` where a signed `finalBonus` can be negative and is used in `int256(schnibblesTotal) + (int256(schnibblesTotal) * finalBonus)`.\n2. Under Solidity 0.8+, converting a negative `int256` to `uint256` reverts, triggering a DoS and trapping NFTs since `_farmPlots` is required by `unstakeMunchable`.\n3. This is not an overflow/underflow (`O-1` No), not a re-entrancy flaw (`R-*` irrelevant), nor an access control issue (`A-*` No).\n4. It’s neither duplicated nor purely theoretical; negative bonuses from config make the exploit practical.\n5. Impact is token DoS (medium–high), likelihood high due to negative bonus entries, yielding High severity.",
      "reasoning_summary": "Negative signed-to-unsigned conversion under Solidity 0.8 reverts in `_farmPlots`, causing a DoS that traps NFTs. This is neither an overflow nor reentrancy or access issue and is practically exploitable. Impact is significant and likelihood high, so severity remains High.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                282,
                287
              ],
              "why": "No `unchecked` used around conversion"
            }
          ]
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "Calls `accountManager.updatePlayer`"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                293,
                301
              ],
              "why": "State changes to `toilerState` occur before `updatePlayer`"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is *no* reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233
              ],
              "why": "No `nonReentrant` on `_farmPlots`"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "Effects and interactions interleaved"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "External call to `accountManager`"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233
              ],
              "why": "`_farmPlots` is internal, exposed via user functions"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": []
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 **and** no `unchecked` block present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                282,
                287
              ],
              "why": "Underflow via negative conversion leads to revert"
            }
          ]
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233
              ],
              "why": "No reentrancy guard; CEI pattern broken"
            }
          ]
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": []
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": []
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": []
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": []
        }
      ],
      "adjustment": {
        "index": 58,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Valid negative-to-uint conversion DoS in `_farmPlots`, can trap NFTs; fix by bounding or using `max(int256, 0)` before cast."
      }
    },
    {
      "finding_index": 59,
      "step_by_step_analysis": "The finding is about missing validation for a registered landlord in stakeMunchable, not arithmetic overflow, so overflow checks don’t apply. The function makes an external ERC721.transferFrom call before state updates, but this is orthogonal to the issue. Because no guard or CEI pattern relates, reentrancy and access checks still confirm the missing registration check allows an unprivileged caller to lock NFTs. This is a practical asset lock-up vulnerability with high impact and medium likelihood, yielding a medium severity. It is not a false positive, so the finding should remain.",
      "reasoning_summary": "Missing landlord registration check in stakeMunchable leads to irreversible NFT lock-up; impact is high and likelihood medium, so severity adjusted to medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "ERC721.transferFrom call"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "transferFrom then state updates"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                136
              ],
              "why": "no nonReentrant modifier"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "interaction before effects"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "stakeMunchable is public"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 59,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Genuine asset lock-up bug with high impact and medium likelihood; adjust severity to medium."
      }
    },
    {
      "finding_index": 60,
      "step_by_step_analysis": "We first confirm this is not an overflow issue (O-1: no). The contract uses Solidity 0.8.25 with no unchecked blocks (O-2: yes, O-3–O-5: no). For reentrancy, while stakeMunchable does call transferFrom before state updates, the target munchNFT is a known trusted ERC-721 contract and its transferFrom does not invoke arbitrary external code (R-1: no), so there is no practical reentrant callback. There is also no guard or CEI pattern, but since the external call cannot reenter, the vulnerability is theoretical (F-3: yes). Therefore, we mark this finding as a false positive and remove it.",
      "reasoning_summary": "Although state updates follow an external transferFrom, the ERC-721 contract is trusted and doesn’t callback, so no practical reentrancy exists. The finding is a theoretical false positive.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "munchNFT is a trusted in-protocol ERC-721"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "state updates occur after transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                136
              ],
              "why": "no nonReentrant modifier"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                149,
                155
              ],
              "why": "interaction precedes effects"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 60,
        "severity": "unchanged",
        "should_be_removed": true,
        "comments": "The external call is to a trusted ERC-721 and cannot reenter, making the finding a theoretical false positive."
      }
    },
    {
      "finding_index": 61,
      "step_by_step_analysis": "This issue is not about arithmetic overflow (O-1: no) and the contract uses Solidity 0.8.25 with no unchecked blocks (O-2: yes, O-3: no). It is not an overflow business requirement or part of a broader chain (O-4/5: no). There are no external untrusted calls in `_farmPlots`, so no reentrancy concern (R-1 to R-5: no). Access control is as intended—users call `farmPlots` legitimately (A-1 to A-3: no). This finding is unique (F-1: no), not documented or intended (F-2: no), and there is a clear exploit path (F-3: no). It’s neither an overflow nor reentrancy false positive (F-4/5: no). The impact is high because it enables unlimited reward farming; likelihood is medium since triggering requires reducing locked funds (S-1: high, S-2: medium), giving a medium severity (S-3: medium). It should not be removed (X-1: no).",
      "reasoning_summary": "An off-by-one logic bug allows perpetual farming by never marking tokens dirty when `plotId == numPlots`; this is a genuine issue with high impact and medium likelihood, so severity should be set to medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 61,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one error in `_farmPlots` allows perpetual farming; change `<` to `<=` for correct dirty marking."
      }
    },
    {
      "finding_index": 62,
      "step_by_step_analysis": "1. The finding concerns an arithmetic underflow when casting a negative `int256` result to `uint256`, so O-1: yes, it’s about underflow.\n2. Pragma is 0.8.25, so O-2: overflow checks are enabled by default.\n3. The arithmetic is not in an `unchecked` block, so O-3: no unchecked.\n4. There’s no business requirement to bypass the default revert behavior, so O-4: no special handling.\n5. The underflow leads directly to a large positive `uint256` yield enabling unbounded token minting, so this is part of an exploit chain (O-5: yes).\n\n6. It’s not a reentrancy finding (R-1–R-5 all no or not applicable).\n7. No access-control issue (A-1–A-3 not applicable).\n8. The finding isn’t duplicated (F-1 no), isn’t documented or purely theoretical (F-2,F-3 no), and although compiled ≥0.8 with no unchecked (F-4 yes), the underflow is intentional to exploit, and the overflow guidance exception (part of a larger exploit chain) applies, so we do not remove. No CEI or guard questions apply (F-5 NA).\n\n9. Impact: an attacker can mint unbounded schnibbles and corrupt internal accounting—High impact (S-1).\n10. Likelihood: requires configuring bonuses to push `finalBonus ≤ -100`, which is controlled by privileged config, so low likelihood (S-2).\n11. Matrix: High impact + Low likelihood → Medium severity (S-3).\n12. It should not be removed (X-1: false).",
      "reasoning_summary": "The arithmetic is checked by default but casting a negative signed result to unsigned still underflows. This underflow is directly exploitable to mint unlimited tokens, so it’s part of a practical exploit chain. Impact is high, but rarity of conditions makes likelihood low, yielding medium severity.",
      "qa_trace": [],
      "adjustment": {
        "index": 62,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "The signed-to-unsigned cast underflows when `finalBonus` is ≤ -100, enabling unbounded schnibble minting; severity adjusted to medium due to low likelihood."
      }
    },
    {
      "finding_index": 63,
      "step_by_step_analysis": "The finding describes how MIN_TAX_RATE and MAX_TAX_RATE are fetched from config keys that return contract addresses, not the intended numeric bounds, so landlords can set newTaxRate to extreme values (e.g. >>1e18). In _farmPlots, schnibblesLandlord = schnibblesTotal * latestTaxRate / 1e18 can exceed schnibblesTotal, making (schnibblesTotal - schnibblesLandlord) underflow and revert farming, causing a DoS and allowing landlords to block or front-run rewards.",
      "reasoning_summary": "Wrong config keys allow arbitrary tax rates that overflow/underflow the schnibble split, leading to practical DoS and reward manipulation.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 63,
        "severity": "high",
        "should_be_removed": false,
        "comments": "MIN_TAX_RATE and MAX_TAX_RATE are loaded from wrong keys, allowing arbitrary tax rates that cause underflow or overflow in schnibble split, leading to DoS and reward theft."
      }
    },
    {
      "finding_index": 64,
      "step_by_step_analysis": "1. DEFAULT_TAX_RATE is loaded from configStorage in _reconfigure() without any bounds check against MIN_TAX_RATE or MAX_TAX_RATE.\n2. triggerPlotMetadata() assigns plotMetadata.currentTaxRate = DEFAULT_TAX_RATE, so a misconfigured value >1e18 can be set.\n3. In _farmPlots, schnibblesLandlord = (schnibblesTotal * latestTaxRate) / 1e18, so if latestTaxRate >1e18, schnibblesLandlord > schnibblesTotal.\n4. Calculating (schnibblesTotal - schnibblesLandlord) then underflows, causing a revert and a permanent denial of service for renters.\n5. Therefore missing validation of DEFAULT_TAX_RATE is a valid vulnerability, and the contract should enforce DEFAULT_TAX_RATE ∈ [MIN_TAX_RATE, MAX_TAX_RATE].",
      "reasoning_summary": "DEFAULT_TAX_RATE is unbounded and can exceed 1e18, causing an underflow in schnibbles calculation and DoS. It should be validated within allowed tax rate bounds.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 64,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Validate DEFAULT_TAX_RATE against MIN_TAX_RATE and MAX_TAX_RATE to prevent underflow and DoS."
      }
    },
    {
      "finding_index": 65,
      "step_by_step_analysis": "The issue arises in stakeMunchable at the length check `if (munchablesStaked[mainAccount].length > 10)` which only reverts when more than 10 munchables are already staked, permitting the 11th to be added. This is a classic off‐by‐one: the condition should be `>= 10` or `> 9` to enforce a maximum of 10. There is no arithmetic overflow concern, and the issue is unrelated to reentrancy or access control. Exploiting this requires no special privilege, and the extra slot grants minimal advantage, leading to a medium severity after combining low impact and high likelihood.",
      "reasoning_summary": "The length check uses `> 10`, allowing an 11th stake; it’s a valid off‐by‐one bug with low impact and high likelihood, yielding medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "Pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "Calls ERC721.transferFrom which is external"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                161
              ],
              "why": "State updates to plotOccupied and munchablesStaked occur after transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 65,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Off‐by‐one in the length check allows an 11th stake; change `> 10` to `>= 10` to enforce the intended limit."
      }
    },
    {
      "finding_index": 66,
      "step_by_step_analysis": "O-1: The issue is not about arithmetic overflow/underflow; it's a logic bug around missing metadata initialization. O-2–O-5: Irrelevant to overflow; Solidity 0.8 auto-reverts and no unchecked blocks are used. R-1: stakeMunchable calls external ERC721.transferFrom, which is untrusted. R-2: State updates (plotOccupied, munchablesStaked, munchableOwner, toilerState) occur after the external call. R-3: No reentrancy guard (e.g., nonReentrant) is applied. R-4: CEI is violated because the interaction precedes effects. R-5: The call is external, not internal. A-1: Any registered player can call stakeMunchable for any landlord, so un-privileged users can invoke it. A-2–A-3: This is a tax-rate logic bug, not a decentralization or timelock violation nor major protocol manipulation. F-1–F-3: The finding is unique, not documented by design, and has a clear exploit path. F-4: Not an overflow issue. F-5: No guards or CEI pattern mitigate reentrancy here. S-1–S-2: Impact is medium (landlords lose revenue), likelihood is medium (easy to exploit). S-3: Medium/medium yields medium severity. X-1: It is a valid finding and should not be removed.",
      "reasoning_summary": "Missing validation allows plotMetadata.currentTaxRate to default to zero, enabling renters to circumvent taxes; it's a real logic bug with medium impact and likelihood.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "Calls munchNFT.transferFrom"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                162
              ],
              "why": "plotOccupied and toilerState set after transferFrom"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                174
              ],
              "why": "modifier nonReentrant not applied"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                149,
                155
              ],
              "why": "Interaction precedes state updates"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "transferFrom is external"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132,
                136
              ],
              "why": "stakeMunchable is public and only requires registration"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 66,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Missing validation allows zero tax rate and 100% schnibble extraction; require metadata initialization before staking."
      }
    },
    {
      "finding_index": 67,
      "step_by_step_analysis": "1. Overflow/Underflow (O): This issue is about an off-by-one limit error in staking, not arithmetic overflow/underflow, and the contract uses Solidity 0.8.25 without any `unchecked` blocks.\n2. Re-Entrancy (R): The `stakeMunchable` function does call an external ERC-721 transfer (`munchNFT.transferFrom`) before updating internal state, with no `nonReentrant` guard and effects executed after the interaction (CEI pattern broken).\n3. Access Control (A): The function is publically callable by any registered user as intended; no privileged roles are bypassed.\n4. False-Positive Checks (F): The finding is unique, intentional design does not document this off-by-one, and it has a concrete exploit path. It is neither an overflow case nor mitigated by reentrancy guards or CEI.\n5. Severity Assessment (S): Exploiting this allows users to stake an unintended 11th munchable, earning extra rewards. Impact is medium (financial gain), likelihood is high (trivial to trigger), mapping to high severity.\n6. Final Removal Decision (X): This is a valid finding and should not be removed.",
      "reasoning_summary": "The staking cap uses `> 10` instead of `>= 10`, allowing an extra token and extra rewards; impact is medium and likelihood high, yielding high severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "ERC-721 transferFrom"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                160,
                163
              ],
              "why": "state updates occur after transfer"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "no guard modifier on stakeMunchable"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "interaction before effects"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "external ERC-721 call"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 67,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Off-by-one allows an 11th munchable to be staked, letting users earn extra rewards beyond the intended cap."
      }
    },
    {
      "finding_index": 68,
      "step_by_step_analysis": "The report describes a missing update to toilerState.plotId in transferToUnoccupiedPlot. This is not an arithmetic issue (pragma 0.8.25 without unchecked), nor a reentrancy issue (no external calls), nor an access control flaw. It is a logic bug causing ghost occupancy: the state changes remove the old plot and mark the new plot occupied but never update the token’s stored plotId, so subsequent unstake frees only the old plot. This can permanently block a plot, leading to a denial-of-service. No dupes or documentation indicate this is intended; the bug is directly exploitable by any user calling this function on an owned token.",
      "reasoning_summary": "A logical bug in transferToUnoccupiedPlot fails to update plotId, causing ghost occupancy and DoS. It’s not overflow, reentrancy, or access control, and is neither documented nor theoretical. Severity is medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 68,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Missing toilerState.plotId update causes ghost occupancy and DoS; severity medium reflects disruption potential."
      }
    },
    {
      "finding_index": 69,
      "step_by_step_analysis": "The finding argues that in transferToUnoccupiedPlot the stored plotId in toilerState[tokenId] is never updated, leading to the previous plot remaining marked “occupied” in mapping while the new plot is marked occupied too, enabling a malicious tenant to move and ghost‐mark all plots. This is not an arithmetic overflow issue since Solidity 0.8 auto‐checks and no unchecked block is used. No external calls or reentrancy patterns are involved, and the function is intentionally public for registered users. The missing state update is a genuine logic bug enabling a denial‐of‐service by blocking all plots, with medium impact and high exploit likelihood, so severity is adjusted to high and the finding should be kept.",
      "reasoning_summary": "transferToUnoccupiedPlot fails to update toilerState.plotId, causing ghost occupancy and DoS. This is a genuine exploitable logic bug, not overflow/reentrancy or access control. Impact is medium with high likelihood, so severity is high.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external *untrusted* contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed *after* that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is *no* reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern **NOT** followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 **and** no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select **impact**: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select **likelihood**: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 69,
        "severity": "high",
        "should_be_removed": false,
        "comments": "Missing update of toilerState.plotId allows ghost occupancy DoS on all plots."
      }
    },
    {
      "finding_index": 70,
      "step_by_step_analysis": "O-1: The finding describes triggerPlotMetadata logic, not arithmetic issues (no). O-2: The contract uses Solidity 0.8.25, which has built-in overflow checks (yes). O-3: There is no unchecked block in triggerPlotMetadata (no). O-4: No custom overflow handling is required by business logic (no). O-5: There is no exploit chain involving arithmetic here (no).\nR-1: triggerPlotMetadata makes no external calls to untrusted contracts (no). R-2: No external calls exist, so no post-call state changes apply (n/a). R-3: No reentrancy guard is present, but none is needed (no). R-4: CEI pattern is irrelevant since there are no interactions (n/a). R-5: All operations are internal (yes internal only).\nA-1: Any registered user may call triggerPlotMetadata, but registration is required and intended (yes). A-2: This does not violate decentralisation or timelock assumptions (no). A-3: There is no critical protocol manipulation possible (no).\nF-1: This is not duplicated elsewhere (no). F-2: The behaviour is documented and intended as a one-time initialization (yes). F-3: There is no theoretical exploit path; it’s a safe setup function (no). F-4: Not applicable (overflow case) (n/a). F-5: Proper CEI/no external calls mitigate reentrancy (yes).\nS-1: Impact is low because no funds or state integrity can be compromised (low). S-2: Likelihood of any exploit is negligible (low). S-3: Per matrix (Low impact × Low likelihood) => low, but reporting as info aligns with documentation (info).\nX-1: The finding is a valid informational note, not a true vulnerability, but it should be retained as Info rather than removed.",
      "reasoning_summary": "triggerPlotMetadata is an intended setup function with no external calls, arithmetic issues, or privilege bypass, so Info severity is appropriate and the finding should be kept.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                105,
                113
              ],
              "why": "triggerPlotMetadata accesses only internal state and storage"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                105
              ],
              "why": "No nonReentrant modifier on function"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                105
              ],
              "why": "Function is public with only notPaused modifier"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                104,
                115
              ],
              "why": "One-time initialization and event emission"
            }
          ]
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "info",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 70,
        "severity": "info",
        "should_be_removed": false,
        "comments": "Finding correctly classified as informational; no vulnerabilities present."
      }
    },
    {
      "finding_index": 71,
      "step_by_step_analysis": "The finding concerns the updateTaxRate function which allows landlords to change tax rates without delay. There is no arithmetic overflow so overflow rules do not apply. There are no external calls or reentrancy guards involved, so reentrancy is not a factor. Access control is per‐landlord and no privileged roles are bypassed. The behavior is not documented as intentional and has a real exploit path: a landlord can front‐run farmPlots to increase their schnibble share. The impact is limited to economic share (low) but likelihood is high due to mempool observability, yielding medium severity.",
      "reasoning_summary": "Not overflow or reentrancy, no access control breach, but risk of front‐running tax changes gives low impact/high likelihood → medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is *no* reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact (high / medium / low).",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood (high / medium / low).",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 71,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Rapid tax rate changes can be front-run for economic advantage; consider adding a cooldown or timelock."
      }
    },
    {
      "finding_index": 72,
      "step_by_step_analysis": "The finding concerns user experience, not arithmetic, reentrancy, or access control. The `stakeMunchable` function uses `ownerOf(tokenId)` which reverts with a generic ERC-721 error if the token doesn’t exist: this is an external call, with state effects following the call, but no `nonReentrant` guard (reentrancy risk not in scope of this finding). There is no privileged access concern—any registered user may call this function as intended. This is a best‐practice suggestion to improve error clarity rather than a security vulnerability; no overflow or unchecked arithmetic is involved.",
      "reasoning_summary": "This is a UX/best practice issue about unclear ERC-721 errors, not a security vulnerability, so we classify it as a best practices recommendation.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 72,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "Recommend adding an explicit existence check and custom revert to improve UX; this is a best-practice suggestion, not a security flaw."
      }
    },
    {
      "finding_index": 73,
      "step_by_step_analysis": "The report claims unbounded growth in `munchablesStaked`, but the code enforces a maximum of 10 elements via a length check before staking and the remove function swaps and pops to reduce length on unstake. Thus the array length never exceeds 10 at any time. This is a misinterpretation rather than a real vulnerability, so it should be removed as a false positive.",
      "reasoning_summary": "The `munchablesStaked` array is always capped at 10 entries and removal pops elements, so no unbounded growth occurs; the finding is a false positive.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 73,
        "severity": "low",
        "should_be_removed": true,
        "comments": "False positive: `munchablesStaked` is capped at 10 and removal pops elements, so no unbounded growth."
      }
    },
    {
      "finding_index": 74,
      "step_by_step_analysis": "We run through the overflow checklist and see this finding isn’t about arithmetic faults (O-1: no). The contract uses Solidity 0.8.25 but there is no unchecked block, so overflow is auto-checked and irrelevant (O-2: yes, O-3–O-5: no). Next, reentrancy rules: stakeMunchable does call external ERC-721 functions (ownerOf, isApprovedForAll, transferFrom) before updating internal state, so it technically violates CEI and lacks a guard (R-1: yes, R-2: yes, R-3: yes, R-4: yes, R-5: no). However, the reported issue is about missing zero-address validation on the `landlord` parameter, not reentrancy. Access control: any registered user can call the function and supply a zero address (A-1: yes), but this doesn’t break protocol decentralization or grant unauthorized control (A-2: no, A-3: no). It’s unique and unintended by design (F-1: no, F-2: no), with a real exploit path (locking tokens permanently) (F-3: no). It’s neither an overflow nor protected against reentrancy (F-4: no, F-5: no). Impact is user funds permanently locked (medium), but likelihood of someone passing zero address accidentally is low, so severity maps to low (S-1: medium, S-2: low, S-3: low). This is a valid finding and should not be removed (X-1: no).",
      "reasoning_summary": "The finding is about missing zero-address input validation, not overflow. It’s a genuine issue (tokens can be staked to address(0) and locked) with medium impact but low likelihood, yielding a low severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153
              ],
              "why": "Calls ERC-721 transferFrom before state updates"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                155,
                156,
                160,
                161,
                163
              ],
              "why": "State (plotOccupied, munchablesStaked, munchableOwner, toilerState) updated after call"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [],
              "why": "No nonReentrant or ReentrancyGuard used"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                153,
                155
              ],
              "why": "External call precedes internal state updates"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                132
              ],
              "why": "stakeMunchable is public and only restricted by registration, not role"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 74,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Add a check `require(landlord != address(0))` to avoid staking tokens to the zero address and permanently locking them."
      }
    },
    {
      "finding_index": 75,
      "step_by_step_analysis": "O-1: The finding refers to a potential integer overflow in calculating an array index.\nO-2: The contract uses pragma solidity 0.8.25, so overflow checks are built in.\nO-3: There is no `unchecked {}` block around the arithmetic.\nO-4: No business requirement demands custom overflow handling.\nO-5: The overflow concern is not part of a larger exploit chain; at worst it reverts.\nR-1 to R-5: The issue is about array indexing, not reentrancy; no reentrancy conditions apply.\nA-1 to A-3: Access control is unrelated to this arithmetic index computation.\nF-1: This finding is not duplicated.\nF-2: The behavior is not documented as intentional.\nF-3: It would only cause a revert, no practical exploit beyond DoS via revert.\nF-4: Since Solidity ≥0.8.0 and no `unchecked` is present, overflows revert by default, making this a false positive under the overflow rules.\nF-5: Not a reentrancy issue.\nS-1: Impact of an array index overflow here is low (only a revert, no asset loss).\nS-2: Likelihood is low given typical small enum values and controlled config length.\nS-3: Combining low impact and low likelihood yields a \"low\" severity.\nX-1: Under the overflow mitigation rules, this should be removed as a false positive.",
      "reasoning_summary": "Solidity ≥0.8 reverts on integer overflows by default and no `unchecked` block is used, so this is not a true arithmetic vulnerability and should be removed as a false positive.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern not followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 75,
        "severity": "low",
        "should_be_removed": true,
        "comments": "False positive: Solidity ≥0.8 reverts on overflows by default and no `unchecked` block is used; out-of-bounds index leads only to a revert."
      }
    },
    {
      "finding_index": 76,
      "step_by_step_analysis": "1. The finding concerns incorrect dirty‐flag logic in `_farmPlots`, not arithmetic overflow/underflow, so overflow rules do not apply despite Solidity ≥0.8.25 and no `unchecked` blocks.\n2. The code in question does not perform any external calls to untrusted contracts—only internal state updates and calls to trusted manager contracts—so reentrancy rules are irrelevant.\n3. There is no access‐control breach or privileged function mis‐exposure.\n4. This is neither a duplicate nor intended behavior: when a landlord’s plot count dips below a toiler’s `plotId`, the toiler is marked `dirty` and skipped forever, even if plots later increase, permanently depriving users of rewards.\n5. The impact is a real loss of farming rewards (medium impact) with a feasible scenario of a user changing locked plots (medium likelihood). According to the severity matrix, this maps to medium.\n6. Thus, the finding is valid and should be kept with adjusted severity medium.",
      "reasoning_summary": "The dirty‐flag logic in `_farmPlots` can permanently skip valid toilers when plot availability fluctuates, causing actual reward loss. This is a real, non‐duplicate bug with medium impact and medium likelihood, so the severity remains medium.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233,
                237
              ],
              "why": "Calls to accountManager and nftAttributesManager are internal protocol contracts"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233,
                237
              ],
              "why": "No reentrancy modifiers on `_farmPlots`"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                233,
                237
              ],
              "why": "All calls are to internal mappings or trusted managers"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "false",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 76,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Dirty‐flag logic bug can permanently skip farming for munchables when plots change; valid issue, severity medium."
      }
    },
    {
      "finding_index": 77,
      "step_by_step_analysis": "The finding is not about overflow/underflow (pragma 0.8.25 reverts on overflow) and no `unchecked` blocks exist, so overflow rules don’t apply. The `_farmPlots` logic does perform external calls to `accountManager.updatePlayer`, but it follows the CEI pattern (state updates before interactions) and uses a trusted contract, so no reentrancy risk. There is no privileged function or timelock assumption violated, and the stale‐rate behavior is a design nuance without a direct exploit path—more of a UX inconsistency. Thus it should be classified as a best‐practices recommendation rather than a removal or security finding.",
      "reasoning_summary": "Stale tax‐rate behavior is a design nuance with no security impact or exploit path; classify as a best‐practices suggestion.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301,
                310
              ],
              "why": "calls accountManager.updatePlayer"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "state updates happen before external call"
            }
          ]
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (nonReentrant, etc.) present?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                229,
                233
              ],
              "why": "no nonReentrant modifier"
            }
          ]
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern not followed?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                292,
                301
              ],
              "why": "checks and effects precede interactions"
            }
          ]
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "calls external accountManager"
            }
          ]
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                229
              ],
              "why": "`farmPlots` is open but not privileged"
            }
          ]
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 77,
        "severity": "best practices",
        "should_be_removed": false,
        "comments": "This is a design nuance causing potential confusion rather than a security flaw; consider documenting or adjusting the rate‐update logic."
      }
    },
    {
      "finding_index": 78,
      "step_by_step_analysis": "This issue is not about arithmetic overflow/underflow (O-1–O-5: all negative or not applicable). The `transferToUnoccupiedPlot` function makes no external calls to untrusted contracts and follows internal CEI patterns, so no reentrancy risk (R-1–R-5). It’s an open function but doesn’t grant elevated privileges or violate access controls (A-1–A-3). The finding is unique, not documented in code, and has no practical exploit path—only a potential for misleading event emissions (F-1–F-3). Since Solidity 0.8 auto-checks overflow without `unchecked` blocks, any overflow concerns are moot (F-4). There is also proper checks-effects ordering, so no reentrancy false positive (F-5). The security impact is minimal (low) and the likelihood moderate, yielding a low severity rating (S-1–S-3). Given it’s purely a theoretical, non-security UI/logical concern, it should be removed as a false positive (X-1).",
      "reasoning_summary": "The missing check for same `plotId` is a non-security, purely theoretical issue causing misleading events. It has low impact and moderate likelihood, equating to low severity, and should be removed as a false positive.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 78,
        "severity": "low",
        "should_be_removed": true,
        "comments": "Purely a UI/logic issue with no security impact; recommend removal as false positive."
      }
    },
    {
      "finding_index": 79,
      "step_by_step_analysis": "The finding is not about arithmetic overflow/underflow but about missing slippage protection around a tax‐rate–driven reward calculation. The code calls only internal functions and reads on-chain state (no external untrusted calls), so this is neither a reentrancy nor an access control issue. It's a user-experience/economic race condition: landlords can update their tax rate immediately before a farmer’s transaction, reducing the farmer’s net schnibbles without any minimum guarantee. There’s a practical exploit path (landlord frontrunning) with nonzero impact, but it does not break protocol invariants or decentralisation assumptions. Under the impact/likelihood matrix, reducing a user’s reward is a low impact with medium likelihood, yielding a low severity. This is not a duplicate, not documented as intentional, and not purely theoretical, so the finding stands and should be graded low.",
      "reasoning_summary": "This is an economic frontrunning risk where landlords can change tax rates just before farming, reducing user rewards; it’s neither overflow, reentrancy, nor access control, and rates as low severity under the impact/likelihood matrix.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact:",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood:",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity:",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 79,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Recommend adding a minimum‐schnibbles (slippage) check to prevent landlords frontrunning tax‐rate changes."
      }
    },
    {
      "finding_index": 80,
      "step_by_step_analysis": "The finding is about the absence of a deadline parameter in `updateTaxRate`, not arithmetic, reentrancy or access control. There is no external call or unchecked arithmetic; only the landlord can call this function to update their own tax rate, which is an intentional design choice. The risk described is a theoretical mempool timing issue rather than a security vulnerability, so this should be marked as a false positive.",
      "reasoning_summary": "This is a design‐level fairness consideration without a practical exploit path—no overflow, reentrancy or access control flaw is present, so it’s a false positive.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "not applicable",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 80,
        "severity": "unchanged",
        "should_be_removed": true,
        "comments": "Design‐level fairness consideration without a practical exploit path; not a security vulnerability."
      }
    },
    {
      "finding_index": 81,
      "step_by_step_analysis": "The `_farmPlots` function calculates `schnibblesLandlord` using `_toiler.latestTaxRate` (the rate stored from the last farming operation) before updating `latestTaxRate` to `plotMetadata[landlord].currentTaxRate`. As a result, any change in the landlord’s tax rate only affects distributions on the *next* farm call, not the current one, causing an inconsistency between expected (current) and applied (old) rates.",
      "reasoning_summary": "The code uses the previous tax rate to compute the landlord’s share then updates to the current rate, so a rate change doesn’t apply until the following farm call, producing a temporary mismatch.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external *untrusted* contract?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed *after* that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is *no* reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern **NOT** followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 **and** no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select **impact**: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select **likelihood**: high / medium / low.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 81,
        "severity": "low",
        "should_be_removed": false,
        "comments": "Landlord’s tax rate change only applies on the next farm call, creating a minor temporary mismatch in distribution."
      }
    },
    {
      "finding_index": 82,
      "step_by_step_analysis": "The reported issue concerns a mismatch in divisor scales—100 for the bonus percentage and 1e18 for the tax‐rate decimal precision—but this is not an overflow, reentrancy, or access control flaw. The code compiles under Solidity 0.8.25 so overflow checks are automatic and there is no unchecked block. No external untrusted calls occur around this arithmetic. The bonus applied via division by 100 and the tax rate via division by 1e18 reflects intended unit conventions (percent vs 18‐decimals). The small rounding differences have no practical exploit path and pose negligible risk.",
      "reasoning_summary": "The precision mismatch reflects intended percent vs 18-decimal scaling and not a vulnerability; no overflow, reentrancy, or access control issue exists and there is no realistic exploit path.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 82,
        "severity": "low",
        "should_be_removed": true,
        "comments": "Precision scaling uses intended percent (÷100) and 18-decimal (÷1e18) units; no real exploit or vulnerability."
      }
    },
    {
      "finding_index": 83,
      "step_by_step_analysis": "The finding is not about arithmetic overflow/underflow, reentrancy, or access control—it merely notes absence of oracle usage. The contract’s behavior is intentional and documented: it does not require oracles to manage land and NFTs. There is no exploit path or security impact related to missing oracle implementation, so this finding is a false positive.",
      "reasoning_summary": "The absence of oracle integration is an intentional design choice without security impact, so the finding is a false positive and should be removed.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "No",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "Yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "Low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "Low",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "Low",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "Yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 83,
        "severity": "info",
        "should_be_removed": true,
        "comments": "No oracle usage is an intentional design choice and not a security vulnerability."
      }
    },
    {
      "finding_index": 84,
      "step_by_step_analysis": "1. The finding describes precision loss in a division-before-multiplication calculation, not an overflow or underflow issue.\n2. The contract is compiled with Solidity 0.8.25, so overflow checks are automatic, and no unchecked blocks are present.\n3. No external untrusted calls, reentrancy guards, or access-control misconfigurations are involved in this arithmetic issue.\n4. The behavior is not duplicated elsewhere, not documented as intentional, and has a practical impact (users lose schnibble rewards).\n5. Impact is minor (small reward loss), but likelihood is high (every farm action triggers the division), mapping to a medium severity under the matrix.",
      "reasoning_summary": "This is a genuine precision-loss issue, not overflow or reentrancy, with low impact but high likelihood, yielding medium severity.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI pattern NOT followed?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal rather than external?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity.",
          "answer": "medium",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "no",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 84,
        "severity": "medium",
        "should_be_removed": false,
        "comments": "Precision loss reduces schnibble rewards; consider multiplying before dividing to minimize truncation."
      }
    },
    {
      "finding_index": 85,
      "step_by_step_analysis": "The issue describes precision loss due to integer division rounding in the schnibblesLandlord calculation, but it is not an overflow/underflow problem. The contract is compiled with Solidity 0.8.25 and no unchecked blocks are used, so overflow mitigation rules do not apply. This has nothing to do with reentrancy or access control, and there is no external untrusted call or missing guard. The rounding behavior is inherent to Solidity integer arithmetic, produces no security exploit path, and manifests only as economic imprecision. Hence it is a purely theoretical, non-security issue that should be treated as a best-practices note or removed.",
      "reasoning_summary": "This is a rounding imprecision in integer math, not an overflow/reentrancy/access control vulnerability, with no practical exploit, so it’s a non-security issue.",
      "qa_trace": [
        {
          "question_id": "O-1",
          "question": "Is the finding explicitly about arithmetic overflow / underflow?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-2",
          "question": "Is the contract compiled with Solidity ≥ 0.8.0 (auto-checks enabled)?",
          "answer": "yes",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                3
              ],
              "why": "pragma solidity 0.8.25"
            }
          ]
        },
        {
          "question_id": "O-3",
          "question": "Does the arithmetic lie inside an `unchecked {}` block?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                288,
                289
              ],
              "why": "no surrounding unchecked"
            }
          ]
        },
        {
          "question_id": "O-4",
          "question": "Is there a documented business requirement to handle overflow differently than revert?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "O-5",
          "question": "Is the overflow part of a larger exploit chain?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "R-1",
          "question": "Does the function call an external untrusted contract?",
          "answer": "no",
          "refs": [
            {
              "file": "LandManager.sol",
              "lines": [
                301
              ],
              "why": "call to accountManager is trusted config"
            }
          ]
        },
        {
          "question_id": "R-2",
          "question": "Are state changes executed after that external call?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-3",
          "question": "Is no reentrancy guard (`nonReentrant`, etc.) present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-4",
          "question": "Is the CEI (Checks-Effects-Interactions) pattern NOT followed?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "R-5",
          "question": "Is the call internal (same contract) rather than external?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-1",
          "question": "Can an un-privileged user call the privileged function?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-2",
          "question": "Does this violate decentralisation / timelock assumptions?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "A-3",
          "question": "Does the issue enable critical protocol manipulation?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-1",
          "question": "Is the finding duplicated elsewhere in the report?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-2",
          "question": "Is the behaviour clearly documented or intended by design?",
          "answer": "no",
          "refs": null
        },
        {
          "question_id": "F-3",
          "question": "Is the issue purely theoretical with no practical exploit path?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-4",
          "question": "Overflow case: Solidity ≥ 0.8 and no `unchecked` block present?",
          "answer": "yes",
          "refs": null
        },
        {
          "question_id": "F-5",
          "question": "Reentrancy case: Are proper guards or CEI pattern present?",
          "answer": "n/a",
          "refs": null
        },
        {
          "question_id": "S-1",
          "question": "Select impact: high / medium / low.",
          "answer": "low",
          "refs": null
        },
        {
          "question_id": "S-2",
          "question": "Select likelihood: high / medium / low.",
          "answer": "high",
          "refs": null
        },
        {
          "question_id": "S-3",
          "question": "Using the matrix, choose adjusted severity: high / medium / low / info / best practices.",
          "answer": "best practices",
          "refs": null
        },
        {
          "question_id": "X-1",
          "question": "Should the finding be removed as a definite false positive?",
          "answer": "yes",
          "refs": null
        }
      ],
      "adjustment": {
        "index": 85,
        "severity": "best practices",
        "should_be_removed": true,
        "comments": "Precision loss from integer division is expected behavior in Solidity and does not pose a security risk."
      }
    }
  ]
}