{
  "document_id": "audit_run_003",
  "finding_reviews": [
    {
      "finding_index": 0,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "Casting a negative signed result to uint256 allows wrap-around to near 2^256-1, enabling unlimited Schnibbles minting. This arises directly from signed arithmetic, not an overflow underflow case in an unchecked block. Impact is high and likelihood medium, yielding a medium severity.",
      "adjustment": {
        "index": 0,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 1,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The bug arises because transferToUnoccupiedPlot never updates toilerState.plotId, causing retroactive schnibble payouts via the dirty branch. It’s a clear functional vulnerability with practical exploit steps, not a false positive. Impact on token distribution is medium with a medium likelihood of exploitation.",
      "adjustment": {
        "index": 1,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 2,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "medium"
      },
      "reasoning_summary": "The stakeMunchable function uses a `>` check instead of `>=`, allowing an 11th stake and breaking the intended cap. This is a real off-by-one bug with no false-positive criteria met. With low impact but high exploit probability, severity is medium.",
      "adjustment": {
        "index": 2,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one in upper bound check allows eleventh stake, adjust severity to medium"
      }
    },
    {
      "finding_index": 3,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "PRICE_PER_PLOT being zero causes a division-by-zero DoS halting all plot-related actions. This is neither an overflow, reentrancy, nor access control issue and is a valid finding. Given its module-wide freeze impact and realistic misconfiguration likelihood, severity is set to medium.",
      "adjustment": {
        "index": 3,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 4,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "State changes in _farmPlots occur before external calls and the CEI pattern is respected, so no post-call state mutation. Combined with proper ordering, the reentrancy risk is theoretical without practical exploit. Marking this finding as false positive.",
      "adjustment": {
        "index": 4,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": null
      }
    },
    {
      "finding_index": 5,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The function updates plot occupancy but never updates `toilerState[tokenId].plotId`, causing a mismatch between mappings and incorrect reward calculations. This is a genuine logical bug with practical impact on farming. It’s neither overflow nor reentrancy, and should remain on the report.",
      "adjustment": {
        "index": 5,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 6,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "This is a logic flaw where the `dirty` flag is set when plots shrink and never cleared, permanently disabling farming until an expensive unstake/restake. It’s not an overflow, reentrancy, or access control issue. The impact on rewards is medium and the likelihood of happening is medium.",
      "adjustment": {
        "index": 6,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 7,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "medium"
      },
      "reasoning_summary": "This is an off-by-one logic bug (not overflow or reentrancy) that allows staking 11 Munchables instead of the intended 10. It has a low impact on security but is readily exploitable by users, so likelihood is high. According to the impact/likelihood matrix, this yields a medium severity.",
      "adjustment": {
        "index": 7,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Fix the conditional to `>= 10` to enforce the intended limit."
      }
    },
    {
      "finding_index": 8,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "yes",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Solidity 0.8+ reverts on overflow and there is no `unchecked` block around the arithmetic. The negative-to-uint conversion issue is theoretical with no practical exploit path given the limited bonus ranges. Therefore the finding can be removed.",
      "adjustment": {
        "index": 8,
        "new_severity": "low",
        "should_be_removed": true,
        "comments": "Solidity ≥0.8 auto-checks prevent overflow and no `unchecked` block is used."
      }
    },
    {
      "finding_index": 9,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "yes",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "best practices"
      },
      "reasoning_summary": "This finding concerns a gas‐inefficiency (multiple redundant external calls) rather than a security flaw. It is purely theoretical with no exploit path and does not involve overflow or reentrancy. It should be reclassified as a best practices recommendation.",
      "adjustment": {
        "index": 9,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "Gas optimization recommendation; no security impact."
      }
    },
    {
      "finding_index": 10,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "yes",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "The finding flags a naming-convention concern around config keys without evidence of actual mismatches. There is no demonstrated exploit path or incorrect parameter retrieval. It is purely theoretical and can be removed.",
      "adjustment": {
        "index": 10,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Purely theoretical config naming issue with no evidence of mismatch."
      }
    },
    {
      "finding_index": 11,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The function allows staking to landlords without initialized plot metadata, resulting in a default tax rate of zero and underpayment to landlords. This is a practical gap, as users can deliberately target uninitialized landlords. The issue leads to moderate financial impact and is reasonably exploitable.",
      "adjustment": {
        "index": 11,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 12,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "yes",
        "F_3": "yes",
        "F_4": "no",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "The loop counter is uint8 but the code enforces a max of 10 staked Munchables, so overflow or iteration limit is impossible. This mismatch is purely stylistic and intentional. No practical exploit exists.",
      "adjustment": {
        "index": 12,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Counter width is safe given 10-item limit; this finding is purely stylistic."
      }
    },
    {
      "finding_index": 13,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot omits updating toilerState[tokenId].plotId, causing state divergence that blocks the new plot and misroutes unstaking and events. This is a concrete bug with high impact and high likelihood of occurrence, so it remains a valid high-severity finding.",
      "adjustment": {
        "index": 13,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 14,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "This is a genuine division-by-zero DoS risk from an unvalidated PRICE_PER_PLOT rather than an overflow or reentrancy issue. No false-positive rules apply. The potential impact is medium but unlikely, yielding a low severity.",
      "adjustment": {
        "index": 14,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Add a check to ensure PRICE_PER_PLOT is non-zero to prevent division-by-zero"
      }
    },
    {
      "finding_index": 15,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Several user‐facing functions perform external calls before or without proper nonReentrant guards, violating CEI and enabling reentrancy. The external targets are not guaranteed trusted, making a practical exploit path possible. Adjusting to low severity reflects medium impact but low likelihood given trusted components.",
      "adjustment": {
        "index": 15,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Consider adding nonReentrant modifiers or reordering state changes before external calls."
      }
    },
    {
      "finding_index": 16,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "medium"
      },
      "reasoning_summary": "The off-by-one error in the `munchablesStaked.length > 10` check allows staking an 11th munchable. It’s a valid logic bug with no other security issues. Impact is low but trivially exploitable, so severity is medium.",
      "adjustment": {
        "index": 16,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Use `>= 10` instead of `> 10` to enforce the intended limit."
      }
    },
    {
      "finding_index": 17,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "best practices"
      },
      "reasoning_summary": "This finding is about missing the ERC721Receiver hook, not arithmetic or reentrancy, and poses a low-impact interoperability issue. It remains a valid best practices recommendation to implement `onERC721Received`.",
      "adjustment": {
        "index": 17,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "Implement IERC721Receiver to support safeTransferFrom and improve interoperability"
      }
    },
    {
      "finding_index": 18,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "yes",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The function fails to update the internal plotId mapping when moving a token, allowing double occupation of plots and corrupting reward accounting. This is a concrete, exploitable bug with direct impact on farming rewards. It requires no theoretical conditions and can be triggered by any valid token owner.",
      "adjustment": {
        "index": 18,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 19,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The finding describes a genuine off-by-one in the length check permitting an 11th stake, which breaks invariants and can cause loop errors. It’s neither overflow nor reentrancy nor an access control issue, and the exploit path is trivial. Given medium impact and high likelihood, the severity should be raised to high.",
      "adjustment": {
        "index": 19,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 20,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Solidity 0.8+ reverts on overflow by default and there is no explicit unchecked block or business need for custom overflow handling. The multiplication is thus safe and this finding is a false positive. Remove this finding per overflow mitigation rules.",
      "adjustment": {
        "index": 20,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Overflow is auto-checked in Solidity ≥0.8; no unchecked block present"
      }
    },
    {
      "finding_index": 21,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "This is a genuine mis-configuration bug, not an overflow, reentrancy, or access control issue, which can disable the entire protocol. The impact is high as it bricks all functions, and likelihood is medium given deployment mis-configuration risk. Severity is therefore medium.",
      "adjustment": {
        "index": 21,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 22,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "yes",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "The uint8 loop counter runs under Solidity 0.8 without any unchecked block and the staking limit caps entries at 10, so overflow cannot occur in practice. This is a theoretical overflow with no exploit path and no larger attack chain. It should be removed as a false positive.",
      "adjustment": {
        "index": 22,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Solidity 0.8 auto-checks and max 10 stakes prevent any overflow"
      }
    },
    {
      "finding_index": 23,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "yes",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "This is an internal state‐consistency UX issue with no security impact, overflow, or reentrancy concerns. It cannot be exploited and only causes user confusion over schnibble yields. Therefore it is a purely theoretical finding and should be removed.",
      "adjustment": {
        "index": 23,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Purely UX suggestion with no security impact"
      }
    },
    {
      "finding_index": 24,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The finding correctly flags a logic bug: storage keys for configuration parameters are mismatched, causing wrong values to be loaded. It is not an overflow, reentrancy, or access control issue, so the finding stands. Given the systemic economic impact and certainty of misconfiguration, severity remains high.",
      "adjustment": {
        "index": 24,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 25,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "medium",
        "S_3": "best practices"
      },
      "reasoning_summary": "This is a usability/design issue where tokens stop earning without notification and not a security vulnerability. There is no overflow, reentrancy, or access control flaw. Severity is best practices.",
      "adjustment": {
        "index": 25,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "UX/design improvement; no security impact"
      }
    },
    {
      "finding_index": 26,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Solidity ≥0.8 automatically reverts on underflow and there is no unchecked block, so this potential negative-bonus underflow cannot occur in practice. Benchmarked underflow rules classify it as a false positive.",
      "adjustment": {
        "index": 26,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Underflow automatically reverted by Solidity ≥0.8; no unchecked present"
      }
    },
    {
      "finding_index": 27,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "medium"
      },
      "reasoning_summary": "The stakeMunchable limit check uses `>` instead of `>=`, allowing an off-by-one error where 11 Munchables can be staked. This is a real logic bug with limited impact on protocol functionality. Adjust severity to Medium given low impact but high likelihood.",
      "adjustment": {
        "index": 27,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one check allows 11th stake; adjust to >=10"
      }
    },
    {
      "finding_index": 28,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "yes",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "The uint8 loop counter cannot overflow in practice because staking is capped at 11 items, making the overflow scenario purely theoretical and not exploitable.",
      "adjustment": {
        "index": 28,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": null
      }
    },
    {
      "finding_index": 29,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "yes",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "medium",
        "S_3": "best practices"
      },
      "reasoning_summary": "Swap-and-pop reorders the array for gas efficiency, which is a known pattern and not a security defect. It intentionally changes element order, leading to potential UI confusion but no protocol risk.",
      "adjustment": {
        "index": 29,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "Swap-and-pop is intended for gas efficiency; ordering is a UX consideration, not a vulnerability."
      }
    },
    {
      "finding_index": 30,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Array index out-of-bounds could revert farming but uses NFTAttributesManager outputs which are validated, so no overflow, reentrancy, or access issues. Impact and likelihood are both low. Retain as a best-practice note with low severity.",
      "adjustment": {
        "index": 30,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Add explicit bounds checks for array accesses."
      }
    },
    {
      "finding_index": 31,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The function allows staking on a landlord whose metadata may be uninitialized, leading to a zero tax rate and loss of revenue for the landlord. This is a business-logic validation issue, not an overflow, reentrancy, or access control flaw. Impact is medium (lost revenue) with medium likelihood, yielding a medium severity.",
      "adjustment": {
        "index": 31,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 32,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "high",
        "S_2": "low",
        "S_3": "medium"
      },
      "reasoning_summary": "The updatePlayer calls occur after all internal state updates (Effects) and no state changes follow those external calls, so the CEI pattern is respected. No reentrancy guard is needed and there is no exploitable path. This finding is a false positive.",
      "adjustment": {
        "index": 32,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "CEI pattern blocks reentrancy; no issue present"
      }
    },
    {
      "finding_index": 33,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The finding correctly identifies a missing state update in transferToUnoccupiedPlot, leading to inconsistent toilerState.plotId and potential reward misallocation. It is a genuine logic bug unrelated to overflow, reentrancy, or access control. The issue warrants unchanged Medium severity.",
      "adjustment": {
        "index": 33,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 34,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Unchecked array indexing can reliably cause out-of-bounds reverts, leading to a DoS of farming operations. This risk stems from misconfigured bonus arrays or malformed NFT attributes with no bounds validation. The impact is moderate but unlikely given controlled configs.",
      "adjustment": {
        "index": 34,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Add bounds checks or validate config and attribute values to prevent out-of-bounds indexing."
      }
    },
    {
      "finding_index": 35,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The division by zero can occur if PRICE_PER_PLOT is misconfigured to zero, causing a DoS across staking and farming functions. This is a valid configuration vulnerability, not related to overflow or reentrancy, and requires a config check. Impact is high and likelihood medium, yielding medium severity.",
      "adjustment": {
        "index": 35,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 36,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The modifier invokes a complex farming function before stake/unstake logic, so any revert inside _farmPlots (like external call failures or index errors) blocks user actions, creating a real DoS. This is not an overflow, reentrancy, or access control issue and is not a duplicate or purely theoretical. Impact is high since users can be locked out of deposit/withdraw operations, and likelihood is medium given external interactions.",
      "adjustment": {
        "index": 36,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 37,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "medium"
      },
      "reasoning_summary": "The off-by-one logic in the stakeMunchable limit allows an 11th munchable to be staked instead of capping at 10, representing a real functionality bug. The impact is low but trivially exploitable. No false-positive criteria apply.",
      "adjustment": {
        "index": 37,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 38,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "yes",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "info"
      },
      "reasoning_summary": "The contract is compiled with Solidity 0.8.25 and no unchecked blocks are used, so any overflow would auto-revert. Per the overflow false-positive rule, this finding is removed. It’s a logical edge case, not a residual overflow vulnerability.",
      "adjustment": {
        "index": 38,
        "new_severity": "info",
        "should_be_removed": true,
        "comments": "Solidity ≥0.8 reverts on overflow without unchecked, so this is a false positive"
      }
    },
    {
      "finding_index": 39,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "LandManager follows the Checks-Effects-Interactions pattern, applying all state changes before each external updatePlayer call, with no storage writes afterward. Thus there’s no opportunity for reentrancy to corrupt internal state. The finding is a false positive.",
      "adjustment": {
        "index": 39,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "CEI pattern respected; no reentrancy risk"
      }
    },
    {
      "finding_index": 40,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "This off-by-one staking limit bug is neither overflow nor reentrancy nor an access control issue and is uniquely exploitable. It can only cause self-DoS after staking many NFTs, making impact low and likelihood low. Severity stays low.",
      "adjustment": {
        "index": 40,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 41,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "This is a genuine business‐logic flaw allowing free farming by exploiting un-initialized metadata, not an overflow or reentrancy issue. It’s practical to exploit and causes economic loss. Impact is medium with a high likelihood, raising severity to high.",
      "adjustment": {
        "index": 41,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 42,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function updates plotOccupied but never the toilerState.plotId, leading to inconsistent state and incorrect reward calculations. This is a valid bug, not a false positive. The issue may cause moderate financial misallocation but doesn’t enable asset theft.",
      "adjustment": {
        "index": 42,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Missing plotId update causes inconsistent state and reward miscalculations."
      }
    },
    {
      "finding_index": 43,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "high",
        "S_2": "low",
        "S_3": "medium"
      },
      "reasoning_summary": "The underflow case is covered by Solidity ≥0.8 automatic checks and no unchecked block is used. There’s no documented override or exploit chain requiring custom handling. This is a false positive.",
      "adjustment": {
        "index": 43,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "False positive: Solidity 0.8 prevents underflow without unchecked"
      }
    },
    {
      "finding_index": 44,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "This finding identifies a genuine misconfiguration bug in `_reconfigure` rather than an overflow, reentrancy, or access control issue. It’s not a duplicate or false positive and must be fixed. With medium impact on core functionality and low likelihood of exploit, severity is adjusted to low.",
      "adjustment": {
        "index": 44,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 45,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Although transferFrom occurs before state updates, the NFT ownership moves to the contract, preventing a reentrant caller from passing owner checks. Thus practical exploit is infeasible and impact is minimal. Severity reduced to low.",
      "adjustment": {
        "index": 45,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Ownership changes in transferFrom break reentrant path, making exploit impractical."
      }
    },
    {
      "finding_index": 46,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "This is an unchecked array bounds access that will revert under Solidity ≥0.8 causing a denial-of-service panic. It is not an overflow or reentrancy issue and not a false positive. Impact is medium (DoS) and likelihood low (requires misconfigured attributes), yielding low severity.",
      "adjustment": {
        "index": 46,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Unchecked array access can panic and DoS farmers; valid bounds check needed"
      }
    },
    {
      "finding_index": 47,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "PRICE_PER_PLOT can be zero via misconfiguration causing division-by-zero reverts and denial of service locking user operations. Impact is moderate but likelihood of zero config is low. Severity adjusted to low.",
      "adjustment": {
        "index": 47,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Recommend validating PRICE_PER_PLOT > 0 during initialization to avoid division-by-zero."
      }
    },
    {
      "finding_index": 48,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "best practices"
      },
      "reasoning_summary": "This is a best-practice recommendation to validate non-zero addresses for external contract dependencies, not an overflow or reentrancy flaw. The functions are internal or access-controlled and misconfiguration only breaks functionality rather than enabling an exploit. Severity is lowered to best practices.",
      "adjustment": {
        "index": 48,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "Add require checks to ensure config addresses are non-zero to avoid misconfiguration"
      }
    },
    {
      "finding_index": 49,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "best practices"
      },
      "reasoning_summary": "This is an off-by-one business logic bug limiting staked items, not a security flaw. It has low impact and is not about overflow, reentrancy, or access control. It merits a best practices classification rather than removal.",
      "adjustment": {
        "index": 49,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "Use `>=` instead of `>` to enforce the 10-item limit correctly."
      }
    },
    {
      "finding_index": 50,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "yes",
        "F_3": "yes",
        "F_4": "yes",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "The loop is bounded to at most 10 staked tokens, preventing gas exhaustion. The calls inside are intended design for reward calculation. There is no practical DOS risk, so this is a false positive.",
      "adjustment": {
        "index": 50,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Loop bounded to 10 tokens prevents gas DoS; intended behavior."
      }
    },
    {
      "finding_index": 51,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "yes",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "high",
        "S_2": "low",
        "S_3": "medium"
      },
      "reasoning_summary": "Centralized configuration is an intentional design choice with only the admin able to change parameters, not a security flaw. There’s no unauthorized access or unintended behavior. This finding is a false positive.",
      "adjustment": {
        "index": 51,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Centralization is an intended design choice, not a vulnerability"
      }
    },
    {
      "finding_index": 52,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "high",
        "S_2": "low",
        "S_3": "medium"
      },
      "reasoning_summary": "The finding describes an overflow via casting negative signed to unsigned but is not in an `unchecked` block. Solidity ≥0.8 auto-reverts on arithmetic overflow and there’s no requirement to handle it differently. Per overflow rules this is a false positive.",
      "adjustment": {
        "index": 52,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "False positive: arithmetic overflow auto-checked in Solidity ≥0.8 outside unchecked block"
      }
    },
    {
      "finding_index": 53,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "PRICE_PER_PLOT can be zero, leading to an unavoidable division-by-zero that DoS’s core functions. This is a valid misconfiguration vulnerability, not an overflow or reentrancy issue. Medium impact and medium likelihood warrant a medium severity.",
      "adjustment": {
        "index": 53,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 54,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The issue is a real state update bug where the new plotId isn’t written back to storage, leading to stale internal state and misleading events. It isn’t an overflow, reentrancy, or access-control flaw, and it has a practical impact on logic. Severity is medium given the disruption to core staking functionality.",
      "adjustment": {
        "index": 54,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Missing state update bug; genuine issue."
      }
    },
    {
      "finding_index": 55,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "medium"
      },
      "reasoning_summary": "This is an off-by-one logic bug in user staking logic, not an overflow or reentrancy false positive. The check allows an 11th munchable to be staked, which is feasible to exploit. Given low impact but high likelihood, severity should be bumped to medium.",
      "adjustment": {
        "index": 55,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one allows one extra stake; increase to medium severity"
      }
    },
    {
      "finding_index": 56,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "yes",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "yes",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The subtraction underflow in a Solidity 0.8.25 context reverts by design but is exploited to DoS tenants via the shared forceFarmPlots modifier, permanently trapping NFTs. The arithmetic is part of a larger exploit chain, so it’s a true vulnerability. Adjusted severity is Medium given high impact and medium likelihood.",
      "adjustment": {
        "index": 56,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 57,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The function allows staking to an unregistered landlord, causing future farming loops to revert and trap NFTs. This is a practical exploit with high likelihood and moderate user asset loss impact. Severity is set to high to reflect the serious user harm.",
      "adjustment": {
        "index": 57,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 58,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "Converting a potentially negative signed result to uint256 under Solidity 0.8 causes a revert, creating a DoS that can trap NFTs. The calculation lives outside any unchecked block and negative bonuses are plausible. Impact is severe due to asset lock, but likelihood is medium.",
      "adjustment": {
        "index": 58,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 59,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "yes",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The finding describes an access‐control logic flaw where staking to an unregistered landlord irreversibly locks the NFT because later calls revert on missing registration. It is neither overflow nor reentrancy but a missing validation that any user can trigger. Impact and likelihood are both high, so severity stays high.",
      "adjustment": {
        "index": 59,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 60,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "StakeMunchable and similar functions perform an external transferFrom call before updating critical staking state without any nonReentrant guard or CEI pattern. This leaves them vulnerable to reentrancy if the external contract reenters. The issue is valid and warrants medium severity after combining high impact with medium likelihood.",
      "adjustment": {
        "index": 60,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 61,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The finding identifies a genuine off-by-one in plot availability checks that permits continuous reward farming on invalid plots. It is neither an overflow nor reentrancy or access-control issue, and it’s not a duplicate or theoretical. The impact is high and likelihood medium, so severity is downgraded to medium.",
      "adjustment": {
        "index": 61,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Off-by-one in plot detection allows infinite farming; update `<` to `<=` to fix."
      }
    },
    {
      "finding_index": 62,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "yes",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "Converting a negative int256 result to uint256 wraps to a huge value, enabling unlimited minting of schnibbles. This is a practical underflow vulnerability in reward calculation and part of a direct exploit chain. It is not mitigated by compiler checks or intentional design.",
      "adjustment": {
        "index": 62,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 63,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "yes",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "no",
        "S_1": "high",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "Loading tax rate bounds from incorrect config keys allows landlords to set excessive rates >100%, causing underflow in schnibble distribution and tenant denial-of-service. This is a genuine logic/configuration vulnerability, not an overflow or reentrancy false positive. Given its high impact and likelihood, severity remains High.",
      "adjustment": {
        "index": 63,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": "Valid misconfiguration allows tax rates >100% causing denial-of-service and underflow"
      }
    },
    {
      "finding_index": 64,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Solidity 0.8+ auto-reverts on underflow with no unchecked block, so this arithmetic case cannot be exploited except by misconfiguration of a privileged value. It’s not part of a larger chain or a business-required custom handling. Under our overflow rules it is a false positive.",
      "adjustment": {
        "index": 64,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Overflow false positive: Solidity ≥0.8 auto-checks without unchecked blocks."
      }
    },
    {
      "finding_index": 65,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "yes",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The off-by-one check (`> 10`) permits staking an 11th munchable, violating the intended 10-asset limit and granting extra yield. This is a practical bug with clear exploit path by any user, not documented or duplicated. Given medium impact and high likelihood, severity is raised to high.",
      "adjustment": {
        "index": 65,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 66,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "This is a business logic bug where uninitialized plot metadata lets renters exploit a zero tax rate and deprive landlords of revenue. It’s not related to overflow, reentrancy, or access-control issues and has a clear exploit path. Impact is medium and likelihood medium given easy omission of initialization.",
      "adjustment": {
        "index": 66,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 67,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "The stakeMunchable function uses `> 10` instead of `>= 10`, allowing an 11th token and breaking the intended cap, enabling extra rewards. This logic bug is easily exploitable and undermines the economic design. No overflow, reentrancy, or access-control exceptions apply.",
      "adjustment": {
        "index": 67,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 68,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function fails to update the token’s stored plotId in toilerState, so unstaking frees only the old slot and leaves the new one marked occupied, causing a genuine DoS of land slots. This is not an overflow or reentrancy issue and is not a false positive. Severity remains medium given its tangible impact and moderate likelihood.",
      "adjustment": {
        "index": 68,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 69,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function fails to update toilerState.plotId, leading to ghost occupancy and a practical denial-of-service attack. This is a logical bug unrelated to overflow, reentrancy, or access control. The impact on user staking justifies a medium severity assessment.",
      "adjustment": {
        "index": 69,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 70,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "yes",
        "F_3": "yes",
        "F_4": "yes",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "triggerPlotMetadata only performs a one-time state initialization with no arithmetic or external calls, follows CEI, and is intended by design. There is no exploit path or privilege escalation. The finding is a false positive.",
      "adjustment": {
        "index": 70,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "False positive: function logic is safe and intentional"
      }
    },
    {
      "finding_index": 71,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "This issue is neither overflow nor reentrancy or access control, but a true best practices front‐running risk allowing landlords to adjust tax rate at will before farmPlots. Impact is medium, likelihood medium. Recommend cooldown to mitigate.",
      "adjustment": {
        "index": 71,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": "Landlord can front-run renters by changing tax rate immediately before farmPlots; add cooldown."
      }
    },
    {
      "finding_index": 72,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "This issue leads to a generic ERC-721 revert on non-existent tokenIds but does not introduce a security vulnerability. It is primarily a UX clarity concern rather than a protocol flaw. Hence, lowering severity to low is appropriate.",
      "adjustment": {
        "index": 72,
        "new_severity": "low",
        "should_be_removed": false,
        "comments": "Add explicit existence check and custom revert for tokenId"
      }
    },
    {
      "finding_index": 73,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Stake and unstake operations correctly pop elements, capping `munchablesStaked` at 11 entries. There is no net growth beyond the bound. The finding is invalid and should be removed.",
      "adjustment": {
        "index": 73,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Array length is properly bounded by push/pop logic; no unbounded growth"
      }
    },
    {
      "finding_index": 74,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "yes",
        "R_3": "yes",
        "R_4": "yes",
        "R_5": "no",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "The function allows staking to the zero address without check, leading to irreversible token lock. This is a practical risk affecting user funds. It does not meet any false-positive or mitigation criteria.",
      "adjustment": {
        "index": 74,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 75,
      "checklist": {
        "O_1": "yes",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "yes",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Solidity 0.8+ automatically reverts on overflows without unchecked blocks, so the index calculation can only revert rather than lead to an exploit. There is no larger exploit chain or business requirement for custom arithmetic handling. This is a false positive and can be removed.",
      "adjustment": {
        "index": 75,
        "new_severity": "low",
        "should_be_removed": true,
        "comments": "Overflow auto-checks prevent exploit"
      }
    },
    {
      "finding_index": 76,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "Marking munchables dirty permanently is a real bug that can cause permanent loss of rewards if a landlord temporarily reduces then restores plot availability. It isn’t about overflow, reentrancy, or access control and is not duplicated or purely theoretical. Severity remains medium due to moderate impact and likelihood.",
      "adjustment": {
        "index": 76,
        "new_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Valid bug; user rewards can be permanently lost."
      }
    },
    {
      "finding_index": 77,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "yes",
        "F_3": "yes",
        "F_4": "no",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "The stale tax rate behavior is an intentional design detail, not a security flaw or practical exploit risk. No arithmetic overflow, reentrancy, or access-control issue is present. It can be removed as a false positive.",
      "adjustment": {
        "index": 77,
        "new_severity": "low",
        "should_be_removed": true,
        "comments": "Design decision causes noncritical inconsistency; no security impact."
      }
    },
    {
      "finding_index": 78,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "yes",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "Transferring to the same plot only causes misleading events and has no security impact or exploit path. It is a minor best-practice suggestion without risk. Recommend removing as non-security finding.",
      "adjustment": {
        "index": 78,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Minor issue causing misleading events but no security impact"
      }
    },
    {
      "finding_index": 79,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "yes",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "yes",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "best practices"
      },
      "reasoning_summary": "The finding highlights missing slippage protection in reward calculation, allowing landlords to change tax rates just before farming and reduce users’ expected rewards. This is a protocol design oversight rather than a direct security flaw. Recommend best‐practices guidance to add a minimum reward check or lock tax rates before farming.",
      "adjustment": {
        "index": 79,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "Add minimum reward parameter or lock tax rate before farming"
      }
    },
    {
      "finding_index": 80,
      "checklist": {
        "O_1": "no",
        "O_2": "no",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "yes",
        "A_3": "yes",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "Landlords can front-run tax updates without any deadline, reducing staker rewards at will. This creates an exploitable timing risk with clear impact and high likelihood. A timelock or expiration parameter should be introduced.",
      "adjustment": {
        "index": 80,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": "Recommend adding expiration or timelock to tax rate updates to prevent front-running."
      }
    },
    {
      "finding_index": 81,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "yes",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "yes",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "medium",
        "S_3": "medium"
      },
      "reasoning_summary": "This is a logic/design issue where the landlord’s updated tax rate isn’t applied until after the current farming operation, resulting in outdated slippage calculations for one cycle. It is neither an overflow nor reentrancy or access control flaw. The miscalculation can lead to incorrect schnibble distribution but is not a false positive and warrants medium severity.",
      "adjustment": {
        "index": 81,
        "new_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 82,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "medium",
        "S_2": "high",
        "S_3": "high"
      },
      "reasoning_summary": "This finding identifies a real precision mismatch between a percentage-based bonus (/100) and a tax rate scaled by 1e18, causing rounding/truncation errors in schnibbles distribution. It is neither an overflow nor reentrancy or access-control issue, and it has practical impact on reward accuracy. Given medium impact and high likelihood, severity is adjusted to high.",
      "adjustment": {
        "index": 82,
        "new_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 83,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "no",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "yes",
        "F_3": "yes",
        "F_4": "no",
        "F_5": "no",
        "F_6": "yes",
        "S_1": "low",
        "S_2": "low",
        "S_3": "low"
      },
      "reasoning_summary": "This finding flags a missing feature rather than a security vulnerability, is intentional by design, and presents no exploit path. It does not pertain to arithmetic, reentrancy, or access controls. It should be removed as a false positive.",
      "adjustment": {
        "index": 83,
        "new_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Not a security issue; intended absence of oracle use."
      }
    },
    {
      "finding_index": 84,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "high",
        "S_3": "best practices"
      },
      "reasoning_summary": "This is a precision/truncation issue, not an overflow or security vulnerability, and it’s neither duplicated nor theoretical. It does not involve external calls, access control, or unchecked arithmetic. It is best classified as a best-practices recommendation rather than a critical flaw.",
      "adjustment": {
        "index": 84,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "finding_index": 85,
      "checklist": {
        "O_1": "no",
        "O_2": "yes",
        "O_3": "no",
        "O_4": "no",
        "O_5": "no",
        "R_1": "no",
        "R_2": "no",
        "R_3": "no",
        "R_4": "no",
        "R_5": "yes",
        "A_1": "no",
        "A_2": "no",
        "A_3": "no",
        "F_1": "no",
        "F_2": "no",
        "F_3": "no",
        "F_4": "no",
        "F_5": "no",
        "F_6": "no",
        "S_1": "low",
        "S_2": "low",
        "S_3": "best practices"
      },
      "reasoning_summary": "This issue is a rounding/truncation precision loss rather than an arithmetic overflow, reentrancy, or access-control flaw. It causes minor discrepancies in schnibble distribution and does not present an exploit path. It is best categorized as a best-practices suggestion.",
      "adjustment": {
        "index": 85,
        "new_severity": "best practices",
        "should_be_removed": false,
        "comments": "Precision loss due to integer division is expected; consider using rounding or higher precision"
      }
    }
  ]
}