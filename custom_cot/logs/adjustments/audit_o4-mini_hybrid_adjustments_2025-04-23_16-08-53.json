[
  {
    "index": 0,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Valid front\u2010running vulnerability; escalate to high severity due to high likelihood and unfairness impact."
  },
  {
    "index": 1,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Add a nonReentrant guard or reorder effects before external interactions to prevent reentrancy."
  },
  {
    "index": 2,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Valid UX bug; pop the entry after blockhash check to avoid irreversible loss."
  },
  {
    "index": 3,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Misconfiguration can irreversibly break reveals; this is a medium-severity configuration risk."
  },
  {
    "index": 4,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Valid limitation due to blockhash window; users risk losing packs if they wait too long. Consider documenting or mitigating this constraint."
  },
  {
    "index": 5,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Missing metadata availability check in unseal leads to unrevealable packs; add a guard against empty metadataPool."
  },
  {
    "index": 6,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Logical race in pack unseal/reveal tracking leads to mixed reveals; impact medium but low likelihood justifies lowering to low."
  },
  {
    "index": 7,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "Blockhash\u2011based randomness is a miner\u2011bias risk best addressed as a design advisory; consider using a verifiable random source."
  },
  {
    "index": 8,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Legitimate gas\u2011limit DoS vector from unbounded array growth; consider adding caps or cleanup mechanisms."
  },
  {
    "index": 9,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "This external dependency is an intended design choice and represents an operational availability risk, not a direct security vulnerability."
  },
  {
    "index": 10,
    "new_severity": "info",
    "should_be_removed": true,
    "comments": "This is an intentional design rate\u2011limit, not a security vulnerability, so the finding should be removed."
  },
  {
    "index": 11,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "Missing events are a transparency/best\u2010practices suggestion, not a security vulnerability."
  },
  {
    "index": 12,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Valid design flaw: global unsealBlocks allows front\u2011running/DoS. Impact high, likelihood medium \u2192 medium severity."
  },
  {
    "index": 13,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "CEI pattern clears state before external calls, mitigating reentrancy risk; false positive"
  },
  {
    "index": 14,
    "new_severity": "unchanged",
    "should_be_removed": false,
    "comments": "Add a constructor check: require(metadataInterval_ != 0, \"metadataInterval cannot be zero\"); to prevent divide-by-zero."
  },
  {
    "index": 15,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Randomness via blockhash is manipulable by miners/users and biases reward distribution, so severity is raised to high."
  },
  {
    "index": 16,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Permanent bricking after 256 blocks causes irreversible NFT loss; adjust severity to medium."
  },
  {
    "index": 17,
    "new_severity": "best practices",
    "should_be_removed": true,
    "comments": "CEI pattern ensures no state changes occur after external calls; reentrancy risk is purely theoretical."
  },
  {
    "index": 18,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "This is a gas\u2011usage best\u2011practice suggestion with no direct security impact; retain as best practices."
  },
  {
    "index": 19,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Enforce in `mintPack` that `metadataPool[packId].length` is sufficient for the number of packs minted, or cap minting accordingly."
  },
  {
    "index": 20,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Valid issue; severity remains medium."
  },
  {
    "index": 21,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "LIFO handling is a UX/design suggestion, not a security vulnerability; recommend as a best-practices improvement."
  },
  {
    "index": 22,
    "new_severity": "info",
    "should_be_removed": false,
    "comments": "Centralization risk noted but only admins can act; falls under default Info severity for access\u2011control observations."
  },
  {
    "index": 23,
    "new_severity": "unchanged",
    "should_be_removed": false,
    "comments": "Valid theoretical risk of miner bias; remains low severity."
  },
  {
    "index": 24,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": null
  },
  {
    "index": 25,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Blockhash randomness is exploitable via miner bias and can permanently lock packs after 256 blocks, so severity remains medium."
  },
  {
    "index": 26,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "Add input validation in the constructor to ensure metadataInterval > 0 and unsealDelay within [1,255] to prevent broken pack behavior."
  },
  {
    "index": 27,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Keep high severity due to easy exploitability and significant impact."
  },
  {
    "index": 28,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "CEI pattern respected: all state changes occur before any external call, eliminating reentrancy risk."
  },
  {
    "index": 29,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Blockhash-based randomness expires after 256 blocks, causing permanent reverts and locked assets; severity lowered to medium."
  },
  {
    "index": 30,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Valid DoS risk when NFT addresses are misconfigured; likelihood is low, so severity lowered to low."
  },
  {
    "index": 31,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "Recommend adding bounds checking to ensure `unsealDelay` is between 1 and 256 to guarantee reveal functionality and maintain randomness security."
  },
  {
    "index": 32,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Pausing gives admins indefinite freeze power over unseal/reveal with no timelock, posing a serious centralization risk."
  },
  {
    "index": 33,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "Array operations on unsealBlocks are constant time with no iteration, so no gas\u2010DoS risk exists."
  },
  {
    "index": 34,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "Minting to the zero address effectively burns tokens; although OZ._mint reverts on zero, adding an explicit non\u2010zero check is a best\u2010practice parameter validation."
  },
  {
    "index": 35,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "Missing reveal/mint events are non\u2011critical and fall under best practices rather than a security issue."
  },
  {
    "index": 36,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Valid logic vulnerability: global `unsealBlocks` allows front\u2011run theft of another user\u2019s reveal. Severity remains high."
  },
  {
    "index": 37,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "CEI pattern followed; all state updates occur before external calls, mitigating any reentrancy risk."
  },
  {
    "index": 38,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "blockhash-based randomness is vulnerable to miner manipulation and can revert unexpectedly; consider a more secure randomness source or explicit window checks to avoid sealed reverts."
  },
  {
    "index": 39,
    "new_severity": "high",
    "should_be_removed": false,
    "comments": "Valid denial-of-service vulnerability: global unsealBlocks mapping can be manipulated to permanently block other users from unsealing."
  },
  {
    "index": 40,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Valid logical vulnerability; severity remains medium based on impact and likelihood."
  },
  {
    "index": 41,
    "new_severity": "low",
    "should_be_removed": false,
    "comments": "Validate `unsealDelay` in the constructor (e.g. \u2264\u00a0255) to ensure blockhash falls within the retrievable window."
  },
  {
    "index": 42,
    "new_severity": "best practices",
    "should_be_removed": false,
    "comments": "Add a `require(metadataInterval_ > 0)` in the constructor to prevent division\u2011by\u2011zero panics."
  },
  {
    "index": 43,
    "new_severity": "unchanged",
    "should_be_removed": false,
    "comments": "Insecure randomness via blockhash remains a real vulnerability; consider using Chainlink VRF or a commit\u2011reveal scheme."
  },
  {
    "index": 44,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "Global commit\u2011reveal per pack ID allows unauthorized reveals; scope commitments per user or include owner in mapping."
  },
  {
    "index": 45,
    "new_severity": "medium",
    "should_be_removed": false,
    "comments": "State is popped before blockhash check, causing irreversible DoS when blockhash returns zero; severity raised to medium."
  },
  {
    "index": 46,
    "new_severity": "unchanged",
    "should_be_removed": true,
    "comments": "CEI pattern ensures all state updates occur before external mints, preventing any reentrancy risk."
  }
]