[
  {
    "index": 0,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: This is a critical overflow vulnerability with protocol-breaking consequences. No false positive or mitigation applies."
  },
  {
    "index": 1,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Confirmed: plotId is not updated in toilerState during transfer, enabling reward inflation. No mitigating controls or design intent found."
  },
  {
    "index": 2,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The bug allows a user to stake 11 tokens instead of 10, violating the intended invariant but not leading to direct loss or critical manipulation."
  },
  {
    "index": 3,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The finding is valid: a misconfigured PRICE_PER_PLOT can cause a division-by-zero DoS, but only privileged roles can set this value, so likelihood is low. Recommend adding input validation to prevent zero values."
  },
  {
    "index": 4,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Reentrancy is possible due to external calls to AccountManager before all state changes are finalized, and no reentrancy guard is present. The issue is not removed and severity is set to medium."
  },
  {
    "index": 5,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: The missing update to toilerState[tokenId].plotId creates a critical inconsistency that can disrupt core protocol logic and user rewards. No mitigating controls or false positive rationale found."
  },
  {
    "index": 6,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: the dirty flag is never cleared, causing a permanent penalty for users unless they manually unstake and restake. This can lead to confusion and a degraded user experience."
  },
  {
    "index": 7,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The finding is valid and should be fixed for consistency with intended limits, but the impact is minor."
  },
  {
    "index": 8,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The issue is valid as the unchecked cast could result in large, incorrect schnibbles rewards if negative bonuses are possible. However, the exploitability depends on the configuration of bonus arrays, so the likelihood is low."
  },
  {
    "index": 9,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The finding is valid and should be kept as a low-severity optimization issue. It does not affect protocol security or correctness, but optimizing the update pattern would reduce gas costs for users."
  },
  {
    "index": 10,
    "final_severity": "info",
    "should_be_removed": false,
    "comments": "This is a code quality and maintainability concern rather than a direct security vulnerability. It should be clarified or refactored for clarity, but does not require removal as a finding."
  },
  {
    "index": 11,
    "final_severity": "info",
    "should_be_removed": false,
    "comments": "The issue is valid but only results in minor inconsistencies in schnibble distribution, not a critical protocol risk."
  },
  {
    "index": 12,
    "final_severity": "best practices",
    "should_be_removed": false,
    "comments": "No user-facing risk; flagged for code consistency and future-proofing only."
  },
  {
    "index": 13,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "The bug enables permanent asset lock and protocol disruption, with no mitigation or intentional design. High severity is warranted."
  },
  {
    "index": 14,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Division by zero due to misconfiguration is a valid risk; recommend input validation for PRICE_PER_PLOT."
  },
  {
    "index": 15,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The lack of reentrancy protection on functions making external calls and updating state after those calls presents a real risk. Recommend adding nonReentrant or restructuring to follow CEI."
  },
  {
    "index": 16,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The bug allows a minor violation of the intended staking limit, but does not enable critical abuse or loss."
  },
  {
    "index": 17,
    "final_severity": "best practices",
    "should_be_removed": false,
    "comments": "The lack of IERC721Receiver implementation only affects interoperability and user experience, not protocol security or funds safety."
  },
  {
    "index": 18,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: the missing update to toilerState[tokenId].plotId allows duplicated plot occupation and breaks reward accounting, matching the original finding's assessment."
  },
  {
    "index": 19,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Confirmed: The off-by-one bug allows exceeding the intended staking limit, which could break invariants and cause further logic errors. The finding is valid and should be addressed."
  },
  {
    "index": 20,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Overflow is possible if BASE_SCHNIBBLE_RATE is set maliciously or by mistake, and would brick all farming operations. The risk is real but requires admin/configuration error, so medium severity."
  },
  {
    "index": 21,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The issue is not a code bug but a configuration risk: if the wrong storage keys are used, the protocol becomes unusable. Recommend adding type checks or explicit config validation to prevent accidental misconfiguration."
  },
  {
    "index": 22,
    "final_severity": "unchanged",
    "should_be_removed": false,
    "comments": "The finding is valid and not a false positive. The impact is limited to a single user and is unlikely unless the stake limit is bypassed."
  },
  {
    "index": 23,
    "final_severity": "info",
    "should_be_removed": false,
    "comments": "This is a UX/state consistency issue, not a security vulnerability. No false positive criteria apply; informational severity is appropriate."
  },
  {
    "index": 24,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "The finding is valid and severe: incorrect config keys for core parameters can break protocol economics and logic. No evidence of intentional design or mitigation."
  },
  {
    "index": 25,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The issue is valid: users' NFTs can become 'dirty' and stop earning rewards with no notification, which is a significant UX and protocol trust concern."
  },
  {
    "index": 26,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Confirmed: Underflow in schnibbles reward calculation can block farming and unstaking for users, causing protocol disruption. Not a false positive."
  },
  {
    "index": 27,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The logical error could allow users to stake more than the intended maximum, potentially leading to unexpected behavior or system assumptions being violated."
  },
  {
    "index": 28,
    "final_severity": "unchanged",
    "should_be_removed": true,
    "comments": "The use of uint8 for the loop counter is safe due to the enforced limit on staked Munchables, making overflow impossible in practice."
  },
  {
    "index": 29,
    "final_severity": "unchanged",
    "should_be_removed": true,
    "comments": "The order of the staked Munchables array is not relied upon by the contract, and swap-and-pop is a standard, intentional Solidity pattern for efficient removal. No security or functional risk is present."
  },
  {
    "index": 30,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "Explicit bounds checks on REALM_BONUSES and RARITY_BONUSES would improve robustness, but the current risk is limited to transaction reverts rather than silent state corruption or loss."
  },
  {
    "index": 31,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The finding is valid: the lack of plot metadata initialization check can result in landlords not receiving tax, but the impact is limited to reward distribution and does not threaten protocol integrity."
  },
  {
    "index": 32,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "The finding is accurate: reentrancy is possible due to unguarded external calls before state changes are finalized, and the function is externally accessible."
  },
  {
    "index": 33,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Confirmed: The missing update to toilerState[tokenId].plotId can cause protocol state inconsistencies and user-facing issues. No mitigating controls or design intent found."
  },
  {
    "index": 34,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Unchecked array access can halt core protocol operations if attribute or bonus arrays are misconfigured. Severity is medium due to the potential for protocol-wide DoS, but not high since it requires a specific misconfiguration."
  },
  {
    "index": 35,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: division by zero in _getNumPlots can block all staking/farming actions if misconfigured, leading to a denial-of-service. No evidence of config validation or mitigation."
  },
  {
    "index": 36,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: a failure in _farmPlots can block all staking/unstaking/transfer operations, causing a protocol-level DoS. No evidence of mitigation or intentional design."
  },
  {
    "index": 37,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The off-by-one error is valid and could allow users to exceed the intended staking cap by one, but the impact is minor."
  },
  {
    "index": 38,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: The schnibbles bonus calculation can underflow and wrap, breaking protocol logic and allowing any user to DOS their account and related landlord logic. No mitigation or privileged access restricts this."
  },
  {
    "index": 39,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: the lack of a reentrancy guard and broken CEI around external calls to accountManager exposes the contract to re-entrancy attacks that can corrupt mappings and arrays, potentially freezing or breaking protocol logic."
  },
  {
    "index": 40,
    "final_severity": "unchanged",
    "should_be_removed": false,
    "comments": "Confirmed: the off-by-one bug allows more than 10 staked NFTs, and the uint8 loop counter can cause a self-DOS. Impact is limited to the user, so Low severity is appropriate."
  },
  {
    "index": 41,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "Confirmed: the code allows tax-free farming by exploiting uninitialized plot metadata. The issue is not a false positive and is correctly rated as low severity."
  },
  {
    "index": 42,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: The missing update to toilerState[tokenId].plotId creates a critical state inconsistency that can be exploited or cause protocol malfunction. No false positive criteria are met."
  },
  {
    "index": 43,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: The unchecked cast from negative int256 to uint256 in schnibbles reward calculation can be exploited for massive rewards. This is a high-severity arithmetic bug with protocol-wide impact."
  },
  {
    "index": 44,
    "final_severity": "unchanged",
    "should_be_removed": false,
    "comments": "The finding is valid: using inappropriate storage keys for configuration values can break tax rate logic and protocol safety. No evidence of mitigation or intentional design."
  },
  {
    "index": 45,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "CEI violation confirmed; no reentrancy guard; external call to potentially untrusted contract before state update."
  },
  {
    "index": 46,
    "final_severity": "unchanged",
    "should_be_removed": true,
    "comments": "The only effect of out-of-bounds access is a revert, which is expected and safe in this context. No silent corruption or privilege escalation is possible."
  },
  {
    "index": 47,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Division by zero in a core calculation can break staking/unstaking for all users if misconfigured, and no explicit check prevents this scenario."
  },
  {
    "index": 48,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "Zero address checks should be added to prevent accidental misconfiguration, but the risk is mitigated by privileged access control."
  },
  {
    "index": 49,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The bug allows users to stake one more Munchable than intended, but does not introduce a security risk or protocol-wide impact."
  },
  {
    "index": 50,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The issue is valid: the unbounded loop with external calls can cause DoS for users with many staked tokens, but the impact is limited to individual users' ability to harvest or unstake."
  },
  {
    "index": 52,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: unchecked cast allows protocol-wide inflation. Immediate fix required."
  },
  {
    "index": 53,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Division by zero in _getNumPlots is a valid DoS risk if PRICE_PER_PLOT is set to zero. Severity is medium due to protocol impact, but requires a misconfiguration."
  },
  {
    "index": 54,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The issue is valid and should be fixed to prevent inconsistent state and misleading events, but does not pose a critical risk."
  },
  {
    "index": 55,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The issue is valid and should be fixed to enforce the intended stake limit, but its impact is minor."
  },
  {
    "index": 56,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: Underflow in _farmPlots can cause a revert that blocks unstaking, resulting in permanent NFT lock and DoS. No mitigation or design intent found."
  },
  {
    "index": 57,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: the lack of landlord registration check can permanently lock user NFTs, which is a critical and likely issue."
  },
  {
    "index": 58,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "The finding is valid and critical: a negative bonus can cause a revert, blocking unstake and trapping user assets. No mitigations or guards are present."
  },
  {
    "index": 59,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: The lack of landlord registration check allows any NFT to be locked irreversibly, with no mitigation or design intent. This is a high-severity, high-likelihood issue."
  },
  {
    "index": 60,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: reentrancy is possible due to external calls before state mutation and lack of guard, enabling staking/unstaking logic to be bypassed or corrupted."
  },
  {
    "index": 61,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: The off-by-one logic flaw enables unlimited reward farming on invalid plots, which is a critical vulnerability."
  },
  {
    "index": 62,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: The unchecked cast from negative int256 to uint256 in schnibblesTotal calculation allows a critical underflow exploit. No false positive reason applies."
  },
  {
    "index": 63,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "Confirmed: Arbitrary tax rates can break schnibble accounting and DoS the protocol. No false positive or mitigation found."
  },
  {
    "index": 64,
    "final_severity": "high",
    "should_be_removed": false,
    "comments": "The finding is valid and critical: missing validation of DEFAULT_TAX_RATE can break core protocol logic and block user actions."
  },
  {
    "index": 65,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The check should be changed to '>= 10' to enforce the intended maximum of 10 staked munchables per account."
  },
  {
    "index": 66,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: missing plot metadata initialization allows renters to stake at a 0% tax rate, depriving landlords of revenue. No false positive criteria are met."
  },
  {
    "index": 67,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: the off-by-one error allows users to bypass the intended staking cap, which can lead to excessive rewards and undermines protocol fairness."
  },
  {
    "index": 68,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The missing update to toilerState[tokenId].plotId in transferToUnoccupiedPlot can cause ghost plot occupancy and denial-of-service for land slots. The issue is real and should be fixed."
  },
  {
    "index": 69,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Confirmed: The missing update of toilerState[tokenId].plotId enables ghost occupancy and DoS. No false positive or mitigating controls are present."
  },
  {
    "index": 70,
    "final_severity": "unchanged",
    "should_be_removed": true,
    "comments": "No vulnerability present; function is safe by design and intent."
  },
  {
    "index": 71,
    "final_severity": "best practices",
    "should_be_removed": false,
    "comments": "The finding is valid as a best practice recommendation; no direct exploit, but a cooldown would improve economic predictability for users."
  },
  {
    "index": 72,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The lack of a custom error for non-existent tokenId results in unclear error messages, but does not introduce a security vulnerability. Severity is downgraded to low due to limited impact."
  },
  {
    "index": 73,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Confirmed: repeated stake/unstake can cause unbounded array growth, leading to gas and DoS risks. No mitigation or design intent found."
  },
  {
    "index": 74,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The lack of zero address validation in stakeMunchable can cause permanent loss of user tokens, justifying a medium severity."
  },
  {
    "index": 75,
    "final_severity": "unchanged",
    "should_be_removed": true,
    "comments": "The only possible outcome is a revert, not a silent overflow or incorrect state. This is not exploitable and does not require mitigation."
  },
  {
    "index": 76,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The issue is valid: once a token is marked dirty, it is never farmed again, even if the plot becomes available later. This can result in permanent loss of rewards for users, justifying a medium severity."
  },
  {
    "index": 77,
    "final_severity": "unchanged",
    "should_be_removed": true,
    "comments": "The contract intentionally updates the tax rate only after farming, which is a design decision rather than a vulnerability. No security impact is present."
  },
  {
    "index": 78,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "The issue is valid and should be addressed to prevent misleading event emissions and improve user experience, but it does not pose a significant security risk."
  },
  {
    "index": 79,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Confirmed: No slippage/minimum output parameter in schnibbles calculation, and users are exposed to last-minute tax rate changes by landlords. The issue is not a false positive and is appropriately rated medium severity."
  },
  {
    "index": 80,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: tax rate changes are not time-bound, allowing landlords to front-run or time updates to the detriment of toilers. Consider adding a deadline or timelock to mitigate this risk."
  },
  {
    "index": 81,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "The finding is valid: the use of a cached tax rate in schnibbles distribution can cause inconsistencies and user confusion, and is not clearly documented as intentional."
  },
  {
    "index": 82,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Precision mismatch in schnibbles and tax rate calculation could lead to user confusion or minor financial discrepancies, but does not enable direct exploitation or loss of funds."
  },
  {
    "index": 83,
    "final_severity": "unchanged",
    "should_be_removed": true,
    "comments": "No oracle is required for the contract's intended functionality; this is not a security issue."
  },
  {
    "index": 84,
    "final_severity": "medium",
    "should_be_removed": false,
    "comments": "Precision loss in schnibbles calculation can lead to users receiving less than their fair share, but does not enable direct exploitation or loss of funds."
  },
  {
    "index": 85,
    "final_severity": "low",
    "should_be_removed": false,
    "comments": "Precision loss due to integer division is real but only results in minor schnibble loss for small values; not a critical protocol risk."
  }
]