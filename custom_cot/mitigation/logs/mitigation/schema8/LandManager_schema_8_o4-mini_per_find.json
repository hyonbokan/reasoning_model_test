{
  "document_id": "schema_8",
  "findings": [
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "yes"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "O_1 yes and O_3 yes show that the narrowing cast of a negative int256 to uint256 bypasses auto-checks, causing a wrap to ~2^256 and unlimited mint. removal_reason=none; severity=high.",
      "adjustment": {
        "index": 0,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Validate bonus inputs or clamp signed bonus before casting to uint256 to prevent underflow wrap."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The toilerState.plotId is never updated on transfer, breaking invariants and enabling retroactive rewards. No false-positive flags apply (removal_reason=none). Severity is set to medium (impact medium, likelihood medium).",
      "adjustment": {
        "index": 1,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The off-by-one logic in stakeMunchable allows an eleventh stake and is combined with unguarded external ERC-721 calls (R_1–R_4 = yes), so it is not a false positive. The issue has low impact but trivial exploitability, yielding medium severity.",
      "adjustment": {
        "index": 2,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Change the length check to `>= 10` to enforce the cap and prevent the eleventh stake."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "Configured PRICE_PER_PLOT may be zero, causing division-by-zero and freezing core functions. No false-positive flags apply (removal_reason=none). Medium impact and medium likelihood yield medium severity.",
      "adjustment": {
        "index": 3,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Validate that PRICE_PER_PLOT is non-zero during initialization or configuration updates to prevent division by zero."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "yes"
          },
          "removal_reason": "guarded"
        },
        "severity": null
      },
      "reasoning_summary": "State updates precede the external accountManager calls (R_2 no), so the CEI pattern is respected and thus guarded=true; finding removed.",
      "adjustment": {
        "index": 4,
        "final_severity": "unchanged",
        "should_be_removed": true,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot updates plotOccupied but fails to update toilerState.plotId, leading to inconsistent staking state (A_3=yes); no false-positive conditions apply (removal_reason=none); final severity is medium.",
      "adjustment": {
        "index": 5,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Ensure to update toilerState[tokenId].plotId to the new plotId within transferToUnoccupiedPlot."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The dirty flag is never reset once set, permanently disabling farming for affected Munchables. No false-positive conditions apply. As this is a user-experience nuisance rather than a security flaw, it is classified as low severity.",
      "adjustment": {
        "index": 6,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Add logic to clear `dirty` when a landlord’s plot count is restored or provide a mechanism to re-enable farming without requiring unstake/retake."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "An off-by-one logic check (`length > 10` allows 11 stakes) is a valid bug with no false-positive flags (`removal_reason=none`); severity is set to medium due to low impact but trivial exploit.",
      "adjustment": {
        "index": 7,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "yes"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "A cast of a negative int256 to uint256 bypasses Solidity 0.8 overflow checks (O_3 yes), so the finding is not removed; final severity is low.",
      "adjustment": {
        "index": 8,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Unchanged severity: low impact/low likelihood of exploit via negative bonus wrap."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "This is a non-security gas inefficiency where updatePlayer is called per token instead of per landlord; removal_reason=none so the finding is retained; final severity set to best practices.",
      "adjustment": {
        "index": 9,
        "final_severity": "best practices",
        "should_be_removed": false,
        "comments": "Consider aggregating landlord updates and calling accountManager.updatePlayer() once per landlord to reduce gas costs."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "This finding highlights potential misalignment of storage keys in parameter retrieval, not an exploitable bug. removal_reason=none due to no false-positive criteria met. Final severity is info.",
      "adjustment": {
        "index": 10,
        "final_severity": "info",
        "should_be_removed": false,
        "comments": "Verify and align StorageKey enum values with getUint/getAddress usage to prevent misconfiguration."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The function allows staking to landlords whose plotMetadata.lastUpdated is zero, leading to a default zero tax rate; not a false positive (removal_reason=none); severity is medium due to potential landlord financial loss.",
      "adjustment": {
        "index": 11,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Add a check that plotMetadata[landlord].lastUpdated != 0 or initialize metadata to prevent zero tax rates."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The missing state update in transferToUnoccupiedPlot causes a stale plotId, leading to incorrect plot freeing and reward miscalculations. No false-positive flags apply (removal_reason=none). Given the user-level denial of service and trivial exploit, severity is medium.",
      "adjustment": {
        "index": 13,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "PRICE_PER_PLOT can be zero and cause a division-by-zero revert in core functions; no false-positive criteria apply, so the finding stands; severity is high.",
      "adjustment": {
        "index": 14,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Add a require check to ensure PRICE_PER_PLOT is non-zero before dividing, e.g. in _reconfigure or at declaration."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "External calls to `munchNFT.transferFrom` and `accountManager.updatePlayer` occur before state writes in `stakeMunchable` and without any `nonReentrant` guard (R_1–R_4 yes), so reentrancy protection is absent; removal_reason=none; severity escalated to high.",
      "adjustment": {
        "index": 15,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The off-by-one logic uses `> 10` instead of `>= 10`, allowing an unintended 11th stake; no false-positive flags apply; severity remains low.",
      "adjustment": {
        "index": 16,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The contract lacks IERC721Receiver support causing safeTransferFrom calls to revert (interop risk); false-positive checks do not apply, so removal_reason=none; finalized as best practices.",
      "adjustment": {
        "index": 17,
        "final_severity": "best practices",
        "should_be_removed": false,
        "comments": "Implement IERC721Receiver.onERC721Received to support safeTransferFrom and improve token interoperability."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "A missing update to `toilerState.plotId` corrupts plot occupancy tracking, FP gating yields `none` so the finding stands, and the matrix gives high severity.",
      "adjustment": {
        "index": 18,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The off-by-one logic in the staking check (length > 10) allows an 11th token to be staked; it’s not a false positive. The bug has low impact on protocol integrity but is trivially exploitable. Severity set to low.",
      "adjustment": {
        "index": 19,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "yes"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "auto_checked"
        },
        "severity": null
      },
      "reasoning_summary": "Overflow auto-reverts under Solidity ≥0.8.0 (O_2 yes, O_3 no), so removal_reason=auto_checked; finding removed.",
      "adjustment": {
        "index": 20,
        "final_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Removed as the unchecked multiplication overflow always reverts in Solidity 0.8+, preventing silent wrap."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "Misconfigured storage keys load 20-byte addresses as enormous numeric constants, disabling core gameplay functions; not a false positive; severity set to high due to protocol-wide denial-of-service risk.",
      "adjustment": {
        "index": 21,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The loop counter is a uint8 (O_1 yes, O_2 yes, O_3 no), so overflowing at 255 reverts under Solidity 0.8, and there’s no bypass. removal_reason=none; severity is low due to limited impact and unlikely occurrence.",
      "adjustment": {
        "index": 22,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Consider using a uint256 counter or enforcing a maximum stake length to avoid this overflow."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function fails to update lastToilDate, so next farmPlots yields zero schnibbles. No external calls occur (R_1 no), so it's retained (removal_reason=none). Classified as an info‐level best practice recommendation.",
      "adjustment": {
        "index": 23,
        "final_severity": "info",
        "should_be_removed": false,
        "comments": "Consider refreshing toilerState.lastToilDate in transferToUnoccupiedPlot to avoid zero‐yield confusion."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "StorageKey enums are mismatched when loading critical parameters in `_reconfigure()`, causing system-wide misconfiguration; no false-positive condition applies; final severity is high.",
      "adjustment": {
        "index": 24,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "This is a user‐experience issue where stale Munchables silently stop earning rewards (no overflow, reentrancy, or access control concern), so removal_reason=none; severity is classified as a best practices recommendation.",
      "adjustment": {
        "index": 25,
        "final_severity": "best practices",
        "should_be_removed": false,
        "comments": "Consider informing users when their staked NFT becomes dirty to avoid confusion."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "yes"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "auto_checked"
        },
        "severity": null
      },
      "reasoning_summary": "Signed-to-unsigned cast under Solidity 0.8 auto-reverts on negative values (O_2 yes, O_3 no), so removal_reason=auto_checked; finding removed.",
      "adjustment": {
        "index": 26,
        "final_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Solidity 0.8 runtime checks prevent negative-to-uint conversion underflow."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "An off-by-one logical error (munchablesStaked.length > 10) allows an 11th Munchable; no false-positive flags apply so the finding is kept; final severity is low.",
      "adjustment": {
        "index": 27,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Change the check to >= 10 (or > 9) to enforce the intended 10-item limit."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "yes"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "auto_checked"
        },
        "severity": null
      },
      "reasoning_summary": "The uint8 loop counter overflow would auto-revert under Solidity 0.8.25 (O_2 yes, O_3 no), so this is a false positive due to built-in overflow checks; finding removed.",
      "adjustment": {
        "index": 28,
        "final_severity": "unchanged",
        "should_be_removed": true,
        "comments": "False positive: uint8 increment auto-reverts on overflow under Solidity 0.8.25."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The swap-and-pop removal pattern intentionally optimizes gas but reorders the staked Munchables array (FP decision: none, removal_reason=\"none\"); this is categorized as a best practice recommendation.",
      "adjustment": {
        "index": 29,
        "final_severity": "best practices",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "Index for REALM_BONUSES and RARITY_BONUSES is derived from external attributes and not validated. No false‐positive filter applies so the finding remains. Severity is low due to limited impact and unlikely occurrence.",
      "adjustment": {
        "index": 30,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The function transferToUnoccupiedPlot fails to update toilerState.plotId (R_4=yes), causing state and event inconsistency. No false-positive conditions apply. Impact is low but the issue is easily triggered, yielding medium severity.",
      "adjustment": {
        "index": 33,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Missing state update due to logic bug; medium severity for misallocation risk."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "Unchecked indexing of REALM_BONUSES and RARITY_BONUSES without bounds checks can revert during farming (O_1 no, not overflow). No false-positive flags apply (removal_reason=none). Impact is a DoS of farming, leading to a medium severity per the impact×likelihood matrix.",
      "adjustment": {
        "index": 34,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "PRICE_PER_PLOT division by zero is not an overflow (O_1=no), so the finding isn’t auto-removed. The missing zero-check can cause Denial-of-Service for staking and farming. Medium impact and low likelihood yields low severity.",
      "adjustment": {
        "index": 35,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Add a require(PRICE_PER_PLOT != 0) check or enforce non-zero configuration to prevent division by zero."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "Failures in `_farmPlots` (e.g., out-of-bounds or external call revert) can block staking/unstaking, so the finding is valid (removal_reason=none). The DoS risk has moderate impact and medium likelihood. Final severity is set to medium.",
      "adjustment": {
        "index": 36,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "An off-by-one logic error in `stakeMunchable` allows an 11th token to be staked (R_1 yes, R_4 yes) so it’s a true finding. The FP decision is none, and the issue warrants low severity.",
      "adjustment": {
        "index": 37,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Revise the staking limit check to `>= 10` or change to `length >= 10` to enforce the intended cap."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "yes"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "Casting a negative bonus through uint256 conversion bypasses Solidity’s overflow checks (O_3 yes), causing wrap and DoS. removal_reason=none. final severity=high.",
      "adjustment": {
        "index": 38,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "External calls to accountManager.updatePlayer occur before subsequent state changes under the forceFarmPlots modifier (R_1 yes, R_2 yes) and no nonReentrant guard is present, breaking CEI; removal_reason=none; final severity is medium.",
      "adjustment": {
        "index": 39,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Introduce a nonReentrant guard or apply the checks-effects-interactions pattern around accountManager.updatePlayer calls to prevent reentrancy."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The uint8 loop index in _farmPlots can overflow after staking beyond 255 NFTs (O_1 yes, O_2 yes, O_3 no), causing auto-revert and self-DOS. No false-positive flags apply so removal_reason=none. Final severity remains low.",
      "adjustment": {
        "index": 40,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "Default-initialized `currentTaxRate` is zero for landlords who never call `triggerPlotMetadata()`, enabling tax-free farming. No false-positive flags apply so removal_reason=none. Severity is medium due to straightforward exploitability and economic impact.",
      "adjustment": {
        "index": 41,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Enforce MIN_TAX_RATE when reading uninitialized metadata or initialize `currentTaxRate` on first use to prevent zero-rate exploits."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The function fails to update `toilerState[tokenId].plotId`, causing state inconsistency when transferring plots. No false‐positive flags apply (removal_reason=none), and incorrect reward calculation is likely and impactful. Final severity is high.",
      "adjustment": {
        "index": 42,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "yes"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "A narrowing cast of a potentially negative `finalBonus` (O_3 yes) can underflow into massive uint256 rewards; auto-checks don’t cover type-casts so removal_reason=none; final severity is high.",
      "adjustment": {
        "index": 43,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Severity remains high due to protocol-wide economic risk"
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "Configuration values are fetched with incorrect storage keys, triggering external calls and storage writes without guards; no false-positive condition applies, so removal_reason=none. Misconfiguration could lead to protocol-wide taxation bypass, upgrading severity.",
      "adjustment": {
        "index": 44,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Increased to high due to critical misconfiguration of tax rate keys allowing potential protocol-wide bypass."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "stakeMunchable invokes an external transferFrom before any state updates (R_1 yes, R_2 yes) and lacks a reentrancy guard (R_3 yes), breaking CEI (R_4 yes). removal_reason remains none. Severity is low (low impact, low likelihood).",
      "adjustment": {
        "index": 45,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Add a nonReentrant guard or reorder to apply state changes before external calls."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "Unchecked array access in _farmPlots is not an overflow or reentrancy issue (O_1 no, R_1 no), so removal_reason=none. Out-of-bounds indices can cause a panic and DoS. Severity is low due to limited impact and unlikely attacker control.",
      "adjustment": {
        "index": 46,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Add explicit bounds checks for REALM_BONUSES and RARITY_BONUSES before indexing to prevent out-of-bounds panics and potential denial-of-service."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "PRICE_PER_PLOT can be zero if misconfigured, causing _getNumPlots to revert by division by zero when staking or transferring plots; no false-positive flags apply. This issue halts critical user flows and so merits a medium severity.",
      "adjustment": {
        "index": 47,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Validate or require PRICE_PER_PLOT > 0 in initialization or configuration to prevent division by zero."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The `_reconfigure` function lacks zero‐address validation for critical external contracts, so misconfiguration can break core functionality. FPDecision.removal_reason=none, thus the finding is retained. Severity is set to medium given the significant but recoverable impact and moderate likelihood.",
      "adjustment": {
        "index": 48,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The off-by-one in the stakeMunchable limit check is a valid business-logic bug (not auto-checked or guarded) so we retain the finding with low severity.",
      "adjustment": {
        "index": 49,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The loop over staked tokens is inherently bounded by the max stake limit (≤10), so gas DoS is not a real risk; this is a code-quality matter. No false-positive flags apply and the issue remains as a best-practices recommendation.",
      "adjustment": {
        "index": 50,
        "final_severity": "best practices",
        "should_be_removed": false,
        "comments": "Loop is bounded by stake limit; no vulnerability present, classify as best practices."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "yes"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "design_intent"
        },
        "severity": null
      },
      "reasoning_summary": "Centralized configuration is an intentional design choice (design_intent), so this is not a security bug and is removed.",
      "adjustment": {
        "index": 51,
        "final_severity": "info",
        "should_be_removed": true,
        "comments": "Configuration centralization is a conscious design decision, not an exploitable vulnerability."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "yes"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The unchecked cast from a negative int to uint (O_3 yes) allows wraparound, so the finding is not a false positive (removal_reason=none) and due to the potential for protocol‐wide inflation the final severity is high.",
      "adjustment": {
        "index": 52,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Clamp finalBonus or enforce bounds to prevent negative values below -100 before applying the percentage adjustment."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "Division by zero in `_getNumPlots` will revert if `PRICE_PER_PLOT` is zero, DoS-ing staking and farming. No false-positive flags apply so removal_reason=none. Impact and likelihood are both medium, so severity remains medium.",
      "adjustment": {
        "index": 53,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function fails to update toilerState[tokenId].plotId, causing stale state. No false-positive conditions apply (removal_reason=none). Final severity is low.",
      "adjustment": {
        "index": 54,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Add an assignment toilerState[tokenId].plotId = plotId in transferToUnoccupiedPlot to maintain correct state."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The stake limit check uses `> 10` allowing an 11th stake, this is a logic error (O_1 no overflow) and not removed (removal_reason=none); impact is low but likelihood high, so severity is medium.",
      "adjustment": {
        "index": 55,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Change the condition to `>= 10` in `stakeMunchable` to enforce the limit correctly."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "An underflow in the timestamp subtraction (O_1 yes, O_2 yes, O_3 no) reverts and causes a DoS trap for NFTs; FP decision removal_reason=none; final severity set to high.",
      "adjustment": {
        "index": 56,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "No check ensures the landlord is registered before staking, so _farmPlots reverts on unregistered landlord and traps NFTs; removal_reason=none; final severity=high.",
      "adjustment": {
        "index": 57,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Maintain high severity; validate landlord registration to prevent NFT trapping."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "Negative finalBonus in signed-to-unsigned conversion triggers a revert (O_1 no, O_2 yes), so it cannot be auto-removed; severity matrix yields high.",
      "adjustment": {
        "index": 58,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The function allows staking to unregistered landlords (A_1 yes), causing irreversible NFT lock‐up; no false-positive flags apply (removal_reason=none); final severity is high.",
      "adjustment": {
        "index": 59,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Add validation in stakeMunchable to ensure landlord is registered to prevent NFT lock-up."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "External ERC-721 transferFrom call occurs before updating critical staking state with no nonReentrant guard (R_1 yes, R_2 yes, R_3 yes), so removal_reason=none; severity is high.",
      "adjustment": {
        "index": 60,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Apply a nonReentrant modifier or move state updates before external calls to enforce CEI and prevent reentrancy."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "An off-by-one in the off-plot detection logic (using `<` instead of `<=`) means invalid plots are never marked dirty, allowing infinite reward farming. FPDecision removal_reason=none since this is a true positive logic bug. Impact and likelihood are both high, yielding a high severity.",
      "adjustment": {
        "index": 61,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Replace `<` with `<=` in the plot validity check to ensure invalid plots are marked dirty and prevent perpetual farming."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The calculation can underflow when finalBonus≤–100 and cast to uint256 (O_1 yes), no false-positive conditions apply (removal_reason=none), yielding a high severity per the matrix.",
      "adjustment": {
        "index": 62,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Ensure finalBonus remains ≥–99 or clamp numerator before casting to uint256 to prevent underflow."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "Misconfigured MIN_TAX_RATE and MAX_TAX_RATE allow landlords to set rates above 1e18, triggering an underflow in `(schnibblesTotal - schnibblesLandlord)` and DoS for tenants. No false-positive flags apply (removal_reason=none). Final severity is high (Impact: high, Likelihood: medium).",
      "adjustment": {
        "index": 63,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "yes"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "yes"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "high",
          "likelihood": "medium",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "Unchecked subtraction underflows when DEFAULT_TAX_RATE>1e18 (O_1 yes, O_3 no) due to missing bounds check; false-positive gate fails (removal_reason=none); severity high.",
      "adjustment": {
        "index": 64,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The off-by-one logic in `stakeMunchable` (length > 10) permits an 11th stake. removal_reason=none since this is a valid logic error. Impact is limited (low) but trivial to exploit, yielding medium severity.",
      "adjustment": {
        "index": 65,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Change the check to `>= 10` to enforce the 10-munchable limit."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "StakeMunchable fails to require plotMetadata initialization, so latestTaxRate defaults to zero and landlords receive no revenue. This is a valid finding (removal_reason=none). Given medium impact on revenue and trivial exploit, final severity is medium.",
      "adjustment": {
        "index": 66,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The staking limit check uses `> 10` instead of `>= 10`, allowing an eleventh munchable to be staked; no false-positive conditions apply so removal_reason=none. The issue is trivial to exploit (likelihood high) with moderate protocol impact (impact medium), yielding medium severity.",
      "adjustment": {
        "index": 67,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The missing toilerState.plotId update causes ghost occupancy (A_1 yes), this is a true bug (removal_reason=none), and with medium impact and high likelihood the matrix yields high severity.",
      "adjustment": {
        "index": 68,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "yes"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The transferToUnoccupiedPlot function fails to update toilerState.plotId, allowing ghost occupancies and denial-of-service; FP checks all negative so the finding stands; severity is medium per impact and likelihood.",
      "adjustment": {
        "index": 69,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Logic bug causes DoS by ghost occupancy; severity unchanged."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "yes"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "design_intent"
        },
        "severity": null
      },
      "reasoning_summary": "triggerPlotMetadata only initializes state without external calls or unsafe math (O_1 no, R_1 no), matching intended design. removal_reason=design_intent; finding removed.",
      "adjustment": {
        "index": 70,
        "final_severity": "info",
        "should_be_removed": true,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "There is no delay on updating tax rates (A_3 yes), enabling landlords to front-run schnibble farming. removal_reason=none; severity set to best practices.",
      "adjustment": {
        "index": 71,
        "final_severity": "best practices",
        "should_be_removed": false,
        "comments": "Introduce a cooldown or timelock on updateTaxRate to prevent front-running and unpredictable economic outcomes."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "This is a UX clarity issue rather than a security flaw, so it is not removed (removal_reason=none) and is classified as a best practices finding.",
      "adjustment": {
        "index": 72,
        "final_severity": "best practices",
        "should_be_removed": false,
        "comments": "Add an explicit existence check for tokenId to provide clear error messaging when staking non-existent tokens."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "yes"
          },
          "removal_reason": "guarded"
        },
        "severity": null
      },
      "reasoning_summary": "The array is explicitly capped at 10 entries and uses swap-and-pop on unstake, so growth is bounded; removal_reason=guarded, finding removed.",
      "adjustment": {
        "index": 73,
        "final_severity": "unchanged",
        "should_be_removed": true,
        "comments": "Length cap of 10 and swap-and-pop guard against unbounded growth; false positive."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The function allows staking to the zero address, causing irreversible token lock. No false-positive flags apply so the finding remains. Severity is set to high due to high likelihood of permanent asset loss.",
      "adjustment": {
        "index": 74,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "This is an out-of-bounds array indexing issue rather than an arithmetic overflow (O_1 no), so no auto-revert on overflow applies. FPDecision removal_reason=none, finding retained. Severity low due to limited impact and low likelihood.",
      "adjustment": {
        "index": 75,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "Dirty flag logic incorrectly skips toilers forever once marked dirty, removal_reason=none; severity set to medium due to significant user reward loss and high likelihood.",
      "adjustment": {
        "index": 76,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "This is a logical/design inconsistency, not an overflow or security bug (O_1 no). No false-positive flags apply, so the finding remains. The design issue has low impact and is rated Low severity.",
      "adjustment": {
        "index": 77,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The function already reverts on any occupied plot (including the current one), preventing same‐plot transfers; removal_reason=none; final severity low.",
      "adjustment": {
        "index": 78,
        "final_severity": "unchanged",
        "should_be_removed": false,
        "comments": "Consider adding an explicit `require(plotId != oldPlotId)` check to avoid misleading leave/take events."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "yes"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "yes"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "design_intent"
        },
        "severity": null
      },
      "reasoning_summary": "The contract intentionally uses a stored `latestTaxRate` from the last farm (or stake) rather than the current rate, preventing last-minute tax front-runs; removal_reason=design_intent; finding removed.",
      "adjustment": {
        "index": 79,
        "final_severity": "unchanged",
        "should_be_removed": true,
        "comments": "False positive: tax rate is locked-in per farm cycle to avoid slippage."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "yes"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "yes"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "updateTaxRate is callable by any landlord without deadline parameters (A_1 yes, A_3 yes), enabling trivial timing-based MEV front-running. Removal_reason=none. Impact is medium and likelihood high ⇒ final severity high.",
      "adjustment": {
        "index": 80,
        "final_severity": "high",
        "should_be_removed": false,
        "comments": "Add expiration or slippage parameters to updateTaxRate to prevent front-running and protect toilers."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "medium",
          "likelihood": "high",
          "matrix": "high"
        }
      },
      "reasoning_summary": "The schnibbles distribution uses the stale `_toiler.latestTaxRate` instead of the up-to-date `currentTaxRate`, causing incorrect landlord/renter split; this is a functional logic error (removal_reason=none); final severity is medium.",
      "adjustment": {
        "index": 81,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "yes"
          },
          "R_2": {
            "answer": "yes"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "yes"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "yes"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "The issue is a precision mismatch between a percentage-based bonus (divided by 100) and an 18‐decimal tax rate (divided by 1e18), leading to rounding discrepancies. It is not an overflow or auto-checked case, so the finding is not removed. Given its limited impact on in‐game accounting, the severity is set to low.",
      "adjustment": {
        "index": 82,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "no"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "low",
          "matrix": "low"
        }
      },
      "reasoning_summary": "No arithmetic, re-entrancy, or access-control issues are present (all facts no) and FP removal_reason is none. This is an informational best-practice finding noting absence of oracle integration. Final severity remains info.",
      "adjustment": {
        "index": 83,
        "final_severity": "info",
        "should_be_removed": false,
        "comments": null
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "no"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "medium",
          "matrix": "low"
        }
      },
      "reasoning_summary": "This is a precision‐loss logic issue, not an overflow (O_1 no), so it is not a false positive (removal_reason=none). The division before multiplication truncates rewards, causing underpayment. It’s assessed as low severity due to its limited financial impact.",
      "adjustment": {
        "index": 84,
        "final_severity": "low",
        "should_be_removed": false,
        "comments": "Reorder the calculation to multiply before dividing (e.g., `(schnibblesTotal * (100 + finalBonus)) / 100`) to avoid truncation."
      }
    },
    {
      "strategy": {
        "facts": {
          "O_1": {
            "answer": "no"
          },
          "O_2": {
            "answer": "yes"
          },
          "O_3": {
            "answer": "no"
          },
          "O_4": {
            "answer": "no"
          },
          "O_5": {
            "answer": "no"
          },
          "R_1": {
            "answer": "no"
          },
          "R_2": {
            "answer": "no"
          },
          "R_3": {
            "answer": "no"
          },
          "R_4": {
            "answer": "no"
          },
          "R_5": {
            "answer": "no"
          },
          "A_1": {
            "answer": "yes"
          },
          "A_2": {
            "answer": "no"
          },
          "A_3": {
            "answer": "no"
          },
          "A_4": {
            "answer": "no"
          }
        },
        "fp": {
          "duplicate": {
            "answer": "no"
          },
          "design_intent": {
            "answer": "no"
          },
          "auto_checked": {
            "answer": "no"
          },
          "guarded": {
            "answer": "no"
          },
          "removal_reason": "none"
        },
        "severity": {
          "impact": "low",
          "likelihood": "high",
          "matrix": "medium"
        }
      },
      "reasoning_summary": "The calculation for schnibblesLandlord suffers precision loss due to integer division truncation, not overflow (O_1 no), so it is not removed (removal_reason=none). Given the low impact but high likelihood of rounding-to-zero errors, severity is set to medium.",
      "adjustment": {
        "index": 85,
        "final_severity": "medium",
        "should_be_removed": false,
        "comments": "Consider reordering multiplication before division or using higher-precision fixed-point arithmetic to reduce rounding errors."
      }
    }
  ]
}