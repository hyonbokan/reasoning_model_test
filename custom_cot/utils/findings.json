[
    {
        "Issue": "Any pack owner can front\u2011run and reveal someone else\u2019s unsealed copy",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract stores every pending unseal in a single global array that is keyed only by `packId`:\n\n```solidity\nmapping(uint256 => uint256[]) public unsealBlocks; // packId => list of ready\u2011to\u2011reveal blocks\n```\n\nWhen `reveal` is executed the function simply pops **the last element of that array**, irrespective of **which address performed the matching `unseal`**:\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    ...\n    uint256 idx = unsealBlocks[packId].length - 1;\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    unsealBlocks[packId].pop();   // \u2190 the entry is consumed\n    ...\n    _burn(msg.sender, packId, 1); // burns caller\u2019s pack copy\n    ...\n}\n```\n\nAttack scenario:\n1. Alice and Bob both own at least one copy of the same `packId`.\n2. Alice calls `unseal(packId)` and waits the required `unsealDelay` blocks.\n3. Before Alice manages to call `reveal`, Bob (or a bot front\u2011running her transaction) calls `reveal(packId)` first.\n4. Bob\u2019s call pops **Alice\u2019s** unseal entry, burns **Bob\u2019s** pack copy, and mints the three NFTs to Bob.\n5. Alice is forced to `unseal` again and wait another delay period.\n\nImpact: an honest user can continuously have her randomness commitment stolen, losing time and facing potential opportunity cost while an attacker reaps the NFT rewards. Because every owner of the same `packId` shares the same queue, the attack is cheap and repeatable.\n\nLikelihood is high (only requires holding one pack token and the ability to send a quicker transaction). The impact is medium \u2013 users do not lose tokens, but the protocol\u2019s fairness is broken and the attacker gains an advantage over honest participants.",
        "Recommendation": "",
        "Detector": "context_scan_default_o3-2025-04-16_0",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 0
    },
    {
        "Issue": "Re\u2011entrancy risk in `reveal` due to external NFT mints",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "`reveal` interacts with three external NFT contracts after it has already modified critical state:\n\n```solidity\nfunction reveal(...) {\n    ...\n    metadataPool[packId][index] = ...;\n    metadataPool[packId].pop();              // state mutated\n    _burn(msg.sender, packId, 1);\n    _mint(msg.sender, 0, 1, \"\");            // \u2199\ufe0e ERC1155 hook may call back\n    NFT(nft1).mint(msg.sender, id);          // external call 1\n    NFT(nft2).mint(msg.sender, id);          // external call 2\n    NFT(nft3).mint(msg.sender, id);          // external call 3\n}\n```\n\nIf `msg.sender` is a contract it will receive an `onERC1155Received` callback during `_mint`, giving it control flow **before** `reveal` has finished. Inside the callback the attacker can call back into `Packs` (e.g.\n`reveal` again for the same or another `packId`, or `unseal`) while the first execution is still on the stack.\n\nAlthough the current logic appears resistant to direct double\u2011spend, this re\u2011entrancy breaks the single\u2011step assumption of the code base and may enable subtle exploits (e.g., draining much more of the `metadataPool` in one transaction, bypassing the `AlreadyUnsealedThisBlock` guard with different pack IDs, or interacting with yet\u2011to\u2011be\u2011audited future functions). A simple `nonReentrant` guard would close the surface.",
        "Recommendation": "",
        "Detector": "context_scan_default_o3-2025-04-16_0",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 1
    },
    {
        "Issue": "`unsealBlocks` entry is removed before block\u2011hash validity is checked, causing irreversible loss when hash expires",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "Within `reveal` the stored unseal record is deleted **before** the contract verifies that the corresponding block\u2011hash is still available:\n\n```solidity\nuint256 idx = unsealBlocks[packId].length - 1;\nuint256 unsealBlock = unsealBlocks[packId][idx];\nunsealBlocks[packId].pop();          // removed first\nbytes32 bh = blockhash(unsealBlock);\nif (bh == bytes32(0)) {              // block\u2011hash already pruned\n    revert Sealed(packId);           // \u21e0 but the entry is already gone\n}\n```\n\nIf the caller waits more than 256 blocks after the `unsealBlock`, `blockhash` returns zero and the function reverts, but the user\u2019s unseal entry has been **irretrievably deleted**. The user must start a new unseal cycle and wait the full delay again, effectively losing the first attempt.\n\nA malicious actor could grief other users by encouraging them to wait (e.g., via social engineering) or by mining with a very long `unsealDelay` configured by an inattentive administrator. The bug is not fatal but results in poor UX and wasted gas.",
        "Recommendation": "",
        "Detector": "context_scan_default_o3-2025-04-16_0",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 2
    },
    {
        "Issue": "Administrator can brick all packs by setting `unsealDelay` > 255 blocks",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "`reveal` relies on `blockhash(unsealBlock)` being non\u2011zero. The EVM only keeps block\u2011hashes for the most recent 256 blocks. If an administrator deploys the contract with, or later migrates to, an `unsealDelay` greater than 255, **every reveal will necessarily revert with `Sealed(packId)`**, because the block\u2011hash will have been pruned before users are even allowed to call `reveal`.\n\nWhile this requires privileged mis\u2011configuration (or a compromised admin key), it would permanently freeze the protocol\u2019s core functionality and strand user funds inside packs.",
        "Recommendation": "",
        "Detector": "context_scan_default_o3-2025-04-16_0",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 3
    },
    {
        "Issue": "Lost packs due to blockhash availability constraint",
        "Severity": "High",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "Ethereum only stores blockhashes for the last 256 blocks. In the `reveal` function, if a user waits too long to reveal their pack after the unseal delay period, the blockhash will no longer be available:\n\n```solidity\nbytes32 bh = blockhash(unsealBlock);\nif (bh == bytes32(0)) {\n    revert Sealed(packId);\n}\n```\n\nIf the blockhash returns zero (which happens when trying to access a blockhash older than 256 blocks), the transaction will revert with the `Sealed` error, effectively making it impossible for users to reveal their packs. This means that users have a limited window to reveal their packs after the unseal delay period:\n\n- If unsealDelay < 256, users have (256 - unsealDelay) blocks to reveal\n- If unsealDelay >= 256, there's a very small or no window at all for revealing\n\nUsers who miss this window will permanently lose the ability to reveal their packs, resulting in a loss of the pack's value without compensation.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 4
    },
    {
        "Issue": "Users can unseal packs when metadata pool is empty",
        "Severity": "High",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `unseal` function does not check if there is available metadata before allowing a user to unseal a pack:\n\n```solidity\nfunction unseal(uint256 packId) external override onlyPackOwner(packId) {\n    if (paused) revert Paused();\n    if (packId == 0) {\n        revert InvalidPack(packId);\n    }\n    // ... other checks ...\n    \n    // No check for metadataPool[packId].length > 0\n    \n    unsealBlocks[packId].push(block.number + unsealDelay);\n    emit Unsealed(msg.sender, packId, block.number);\n}\n```\n\nHowever, the `reveal` function does check for metadata availability:\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    if (metadataPool[packId].length == 0) {\n        revert OutOfMetadata(packId);\n    }\n    // ... rest of function ...\n}\n```\n\nThis creates a situation where users can unseal packs that will never be revealable if the metadata pool is exhausted. Users who unseal packs when no metadata is left will have their packs effectively stuck in an unsealed state forever, resulting in a permanent loss of the pack's value.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 5
    },
    {
        "Issue": "Lack of user-specific unsealing tracking",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract tracks unsealed packs globally per pack ID rather than tracking which specific user unsealed which specific pack. In the `unseal` function:\n\n```solidity\nfunction unseal(uint256 packId) external override onlyPackOwner(packId) {\n    // ... checks ...\n    if (unsealBlocks[packId].length >= balanceOf(msg.sender, packId)) {\n        revert NoAvailablePacks(msg.sender, packId);\n    }\n    unsealBlocks[packId].push(block.number + unsealDelay);\n    // ...\n}\n```\n\nAnd in the `reveal` function:\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    // ... checks ...\n    uint256 idx = unsealBlocks[packId].length - 1;\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    unsealBlocks[packId].pop();\n    // ...\n}\n```\n\nThis implementation can lead to two issues:\n\n1. If User A unseals a pack and then transfers it to User B, both users could try to reveal it, creating a race condition.\n\n2. The contract always uses the most recently unsealed block for revealing (LIFO order), regardless of which user unsealed it. This means if multiple users unseal packs of the same ID, they'll be revealing each other's unsealed packs rather than their own, potentially leading to confusion and contention.\n\nThis race condition could be exploited in scenarios where the blockhash might generate more favorable random outcomes for certain metadata selections.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 6
    },
    {
        "Issue": "Blockhash-based randomness has predictability limitations",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract uses block hashes as a source of randomness for selecting which metadata ID to assign during pack revelation:\n\n```solidity\nbytes32 bh = blockhash(unsealBlock);\n// ...\nuint256 index = uint256(bh) % metadataPool[packId].length;\nuint256 id = metadataPool[packId][index];\n```\n\nWhile the delayed reveal mechanism (through unsealDelay) adds some protection, block hashes can still be influenced by miners/validators to some extent. A miner with sufficient resources could potentially manipulate the outcome by selectively including/excluding transactions or adjusting block attributes.\n\nThe unseal delay does mitigate this risk considerably, as it requires predicting or influencing a future block hash, which becomes increasingly difficult with longer delays. However, it's not a perfect source of randomness, and particularly valuable NFT rewards might incentivize sophisticated attempts at manipulation.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 7
    },
    {
        "Issue": "Potential gas issues due to unbounded array growth",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `unsealBlocks[packId]` array can grow indefinitely if many users unseal packs but never reveal them. This could happen due to the blockhash availability limitation or users simply abandoning their packs after unsealing:\n\n```solidity\nfunction unseal(uint256 packId) external override onlyPackOwner(packId) {\n    // ... checks ...\n    unsealBlocks[packId].push(block.number + unsealDelay);\n    // ...\n}\n```\n\nThe array only shrinks when packs are revealed:\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    // ... checks ...\n    uint256 idx = unsealBlocks[packId].length - 1;\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    unsealBlocks[packId].pop();\n    // ...\n}\n```\n\nIf the array grows very large, operations involving it could consume excessive gas or even hit block gas limits, potentially making it difficult or impossible to perform certain operations on affected pack IDs. While this requires abnormal usage patterns, it remains a possible vector for denial of service.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 8
    },
    {
        "Issue": "Reliance on external NFT contracts",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract depends on three external NFT contracts for minting rewards to users:\n\n```solidity\nNFT(nft1).mint(msg.sender, id);\nNFT(nft2).mint(msg.sender, id);\nNFT(nft3).mint(msg.sender, id);\n```\n\nIf any of these external contracts becomes dysfunctional (e.g., if they're upgraded with incompatible interfaces, paused, or run out of tokens to mint), the `reveal` function will revert. This could temporarily or permanently prevent users from revealing their packs.\n\nWhile these NFT contracts are likely managed by the same entity managing the Packs contract, this external dependency introduces a potential point of failure that's outside the direct control of the Packs contract itself.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 9
    },
    {
        "Issue": "Per-block unsealing limitation",
        "Severity": "Info",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract restricts users from unsealing more than one pack per block, regardless of pack ID:\n\n```solidity\nfunction unseal(uint256 packId) external override onlyPackOwner(packId) {\n    // ... other checks ...\n    if (lastUnsealBlock[msg.sender] == block.number) {\n        revert AlreadyUnsealedThisBlock(msg.sender, block.number);\n    }\n    lastUnsealBlock[msg.sender] = block.number;\n    // ...\n}\n```\n\nThis limitation means users who want to unseal multiple packs must spread their transactions across multiple blocks, which could be frustrating for users with many packs. While this is likely an intentional design choice to prevent certain attacks or spread out the unsealing process, it's a limitation users should be aware of.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 10
    },
    {
        "Issue": "Missing events for key actions",
        "Severity": "Info",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract emits events for metadata addition, paused state changes, and unsealing, but lacks events for other key actions:\n\n```solidity\n// These events exist\nevent MetadataAdded(uint256 packId, uint256 amount);\nevent PausedStateChanged(bool toState);\nevent Unsealed(address indexed user, uint256 indexed packId, uint256 atBlock);\n\n// But there are no events for these actions\nfunction mintPack(address to, uint256 packId, uint256 amount) {...}\nfunction reveal(uint256 packId) {...}\n```\n\nWhile the standard ERC1155 transfer events would capture some aspects of minting and burning, having explicit events for all key actions would improve contract transparency, simplify off-chain monitoring, and enhance user interfaces that need to track these actions. The lack of a reveal event makes it particularly difficult to monitor when packs are revealed and what NFTs are obtained.",
        "Recommendation": "",
        "Detector": "context_scan_default_claude-3-7-sonnet-20250219_1",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 11
    },
    {
        "Issue": "Global unsealBlocks mapping allows front\u2011running and DoS of pack reveals",
        "Severity": "High",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract uses a single, global array per pack ID to track all unseal events, with no association to the user who unsealed. As a result, any pack owner can steal another user\u2019s unseal entry by calling `reveal` and burning one of their own packs, and a malicious owner can saturate the global unseal queue to prevent others from unsealing. For example:\n\n```solidity\nmapping(uint256 => uint256[]) public unsealBlocks;\n...\nfunction unseal(uint256 packId) external onlyPackOwner(packId) {\n    // record reveal block globally\n    unsealBlocks[packId].push(block.number + unsealDelay);\n}\n\nfunction reveal(uint256 packId) external onlyPackOwner(packId) {\n    // pop the last global unseal event, regardless of who unsealed\n    uint256 idx = unsealBlocks[packId].length - 1;\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    unsealBlocks[packId].pop();\n    // then burn one pack and mint NFTs\n    _burn(msg.sender, packId, 1);\n    NFT(nft1).mint(msg.sender, id);\n    // ...\n}\n```\n\nBecause `unsealBlocks` is shared by all users, any pack holder can call `reveal` on someone else\u2019s unseal event (front\u2011running) and receive the NFTs, and a user with many packs can unseal them all to fill the queue and block others (DoS).",
        "Recommendation": "",
        "Detector": "context_scan_default_o4-mini-2025-04-16_2",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 12
    },
    {
        "Issue": "No reentrancy guard in `reveal` allowing malicious NFT contracts to reenter",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `reveal` function clears state and then calls out to three external NFT contracts (`nft1`, `nft2`, `nft3`) without any reentrancy protection. A malicious NFT implementation could reenter the `Packs` contract during one of the `mint` calls and manipulate internal arrays or balances, leading to duplicate reveals or metadata corruption:\n\n```solidity\nfunction reveal(uint256 packId) external onlyPackOwner(packId) {\n    // state changes\n    unsealBlocks[packId].pop();\n    _burn(msg.sender, packId, 1);\n    _mint(msg.sender, 0, 1, \"\");\n    // external calls\n    NFT(nft1).mint(msg.sender, id);\n    NFT(nft2).mint(msg.sender, id);\n    NFT(nft3).mint(msg.sender, id);\n}\n```\n\nBecause there is no `nonReentrant` modifier or similar guard, a malicious `mint` on any `NFT` could reenter `reveal` (or other functions) and corrupt `unsealBlocks` or `metadataPool`.",
        "Recommendation": "",
        "Detector": "context_scan_default_o4-mini-2025-04-16_2",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 13
    },
    {
        "Issue": "`metadataInterval` not validated; packId\u00a0%\u00a0metadataInterval can divide by zero",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The constructor sets `metadataInterval` without checking it is non-zero. If `metadataInterval` is zero, any use of `packId % metadataInterval` will revert with a division\u2011by\u2011zero error. For example:\n\n```solidity\nuint256 public override metadataInterval;\n...\nfunction addMetadata(uint256 packId, uint256 amount) external onlyRole(ADMIN_ROLE) {\n    // dividing by zero if metadataInterval == 0\n    if (packId == 0 || packId % metadataInterval != 0) revert InvalidPack(packId);\n    ...\n}\n\nfunction mintPack(address to, uint256 packId, uint256 amount) external onlyRole(MINTER_ROLE) {\n    // also divides by zero\n    if (packId == 0 || packId % metadataInterval != 0) revert InvalidPack(packId);\n    ...\n}\n```\n\nDeploying with a zero `metadataInterval` would brick both `addMetadata` and `mintPack`.",
        "Recommendation": "",
        "Detector": "context_scan_default_o4-mini-2025-04-16_2",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 14
    },
    {
        "Issue": "Randomness can be manipulated by miners and selectively used by users (weak commit\u2011reveal scheme)",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The protocol tries to provide unbiased randomness by storing `block.number + unsealDelay` at the moment of `unseal()` and later using `blockhash(unsealBlock)` inside `reveal()` to pick a metadata index:\n\n```solidity\n// unseal()\nunsealBlocks[packId].push(block.number + unsealDelay);\n\n// reveal()\nbytes32 bh = blockhash(unsealBlock);\nuint256 index = uint256(bh) % metadataPool[packId].length;\n```\n\nBecause the un\u2011sealing transaction is public, the exact block number that will be queried is known in advance.  \n\u2022 A block\u2011producer (PoW miner, PoS validator, or bribed builder/relayer) can decide whether to publish or re\u2011order the block that becomes `unsealBlock`, choosing a hash that favours a desired `index`.  \n\u2022 After the hash is fixed, the pack owner can calculate the resulting `id` off\u2011chain (the metadata pool is public) and **decide to skip calling `reveal()` when the outcome is unfavourable**, keeping the unsealed entry in storage. Nothing prevents them from abandoning that entry and unsealing another copy to try again.  \nTogether these two vectors allow either miners or users (or both in collusion) to bias the distribution and harvest the most valuable NFTs.\n\nSince the contract attempts to guarantee fair random assignment of rewards, the ability to systematically influence the outcome breaks the intended economic security of the system.",
        "Recommendation": "",
        "Detector": "context_scan_default_2_o3-2025-04-16_3",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 15
    },
    {
        "Issue": "Unsealed copies become permanently unusable after 256 blocks (DoS / value loss)",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "If the owner forgets to call `reveal()` within 256 blocks after the stored `unsealBlock`, the required block\u2011hash is no longer available and Solidity returns `bytes32(0)`, which is treated as an error:\n\n```solidity\nbytes32 bh = blockhash(unsealBlock);\nif (bh == bytes32(0)) {\n    revert Sealed(packId);\n}\n```\n\nBecause the function reverts **before** removing the unseal entry, the owner can retry, but every attempt will keep reverting with `Sealed(...)` once the 256\u2011block window has passed. The pack copy is effectively bricked: it was already removed from the user\u2019s inventory during `unseal()` (the check `unsealBlocks.length < balanceOf(...)` will forbid un\u2011sealing it again) and can never be revealed, leaving the user without either the pack or the NFTs.\n\nAn attacker can exploit this by spamming very small `unsealDelay` values (if configurable) or simply waiting for the victim to be inactive, causing financial loss and cluttering storage with dead entries.",
        "Recommendation": "",
        "Detector": "context_scan_default_2_o3-2025-04-16_3",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 16
    },
    {
        "Issue": "External callbacks during `_mint` can re\u2011enter `Packs` because no re\u2011entrancy guard is used",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "`reveal()` performs two ERC\u20111155 transfers that trigger the receiver hook on **msg.sender** if it is a contract:\n\n```solidity\n_burn(msg.sender, packId, 1);\n_mint(msg.sender, 0, 1, \"\");   // executes onERC1155Received on caller\n```\n\nInside this callback the caller can immediately call back into `Packs` (e.g. `unseal()` or `reveal()` on another pack) while the outer call stack is still running.  Although the current implementation seems safe because all state\u2011changing assignments happen **before** the external transfer, future modifications or the addition of new functions could introduce exploitable scenarios.  Without a `nonReentrant` modifier the contract provides no hard guarantee against such attacks and violates a common best\u2011practice for contracts that transfer ERC\u20111155/721 tokens to arbitrary receivers.",
        "Recommendation": "",
        "Detector": "context_scan_default_2_o3-2025-04-16_3",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 17
    },
    {
        "Issue": "Very large `metadataInterval` or `amount` in `addMetadata` can make the function run out of gas",
        "Severity": "Best Practices",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "`addMetadata()` appends `amount` entries to the pool in a `for` loop:\n\n```solidity\nfor (uint256 i = 0; i < amount; i++) {\n    metadataPool[packId].push(packId + currentLen + i);\n}\n```\n\nAlthough the function caps the final length at `metadataInterval`, there is no explicit upper\u2011bound on `metadataInterval` itself.  A careless administrator could set it to a very large number (e.g. 10\u00a0000) and later call `addMetadata` with a correspondingly large `amount`, causing the transaction to exceed the block gas limit and making it impossible to add the metadata pool in one go.  Keeping tight, sanity\u2011checked limits prevents accidental lock\u2011ups due to gas exhaustion.",
        "Recommendation": "",
        "Detector": "context_scan_default_2_o3-2025-04-16_3",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 18
    },
    {
        "Issue": "Excessive Minting Risk Without Metadata Availability Check",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract allows minting an unlimited number of packs without verifying if there's enough metadata available for all potential reveals. When a pack is revealed, one metadata entry is consumed from the pool for that pack ID. If all metadata entries are consumed but packs still exist, those pack owners will never be able to successfully reveal their packs.\n\n```solidity\nfunction mintPack(address to, uint256 packId, uint256 amount)\n    external\n    override\n    onlyRole(MINTER_ROLE)\n{\n    if (packId == 0 || packId % metadataInterval != 0) {\n        revert InvalidPack(packId);\n    }\n    _mint(to, packId, amount, \"\");\n}\n```\n\nNotice that the function doesn't check if there's enough metadata available for the amount of packs being minted. If too many packs are minted and the metadata pool is exhausted, users who try to reveal will encounter the following check in the reveal function:\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    if (metadataPool[packId].length == 0) {\n        revert OutOfMetadata(packId);\n    }\n    // ...\n}\n```\n\nThis could result in users holding packs that can never be revealed, effectively losing the value of those packs.",
        "Recommendation": null,
        "Detector": "context_scan_default_2_claude-3-7-sonnet-20250219_4",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 19
    },
    {
        "Issue": "Blockhash Unavailability for Long Delays",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "Ethereum only maintains blockhashes for the most recent 256 blocks. If `unsealDelay` is set to a value close to or exceeding 256, users attempting to reveal their packs might find that the blockhash has become unavailable, preventing them from ever revealing their packs.\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    // ...\n    bytes32 bh = blockhash(unsealBlock);\n    if (bh == bytes32(0)) {\n        revert Sealed(packId);\n    }\n    // ...\n}\n```\n\nWhile the contract does check for a zero blockhash and reverts with `Sealed(packId)`, this means that if the blockhash becomes unavailable, the pack will remain sealed forever. Users would have unsealed their packs but would be unable to reveal them, resulting in a permanent loss of value.",
        "Recommendation": null,
        "Detector": "context_scan_default_2_claude-3-7-sonnet-20250219_4",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 20
    },
    {
        "Issue": "LIFO Behavior for Unsealed Packs Reveal",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The current implementation of the `reveal` function always processes the most recently unsealed pack (LIFO - Last In, First Out) rather than the oldest unsealed pack (FIFO - First In, First Out).\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    // ...\n    uint256 idx = unsealBlocks[packId].length - 1;\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    unsealBlocks[packId].pop();\n    // ...\n}\n```\n\nThis could lead to user confusion as they might expect their oldest unsealed pack to be revealed first. When a user has multiple unsealed packs of the same ID, they cannot choose which specific unsealed pack to reveal - it's always the most recent one. This behavior could be particularly problematic if different unsealing blocks have different properties or if users are tracking specific unseals.",
        "Recommendation": null,
        "Detector": "context_scan_default_2_claude-3-7-sonnet-20250219_4",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 21
    },
    {
        "Issue": "Centralization Risks",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract grants significant powers to addresses with the ADMIN_ROLE, including the ability to pause functionality indefinitely, change metadata URIs, and add metadata. This centralization presents risks if the admin account is compromised or acts maliciously.\n\n```solidity\nconstructor(...) {\n    // ...\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(ADMIN_ROLE, msg.sender);\n    _grantRole(MINTER_ROLE, msg.sender);\n}\n```\n\n```solidity\nfunction switchPaused() external override onlyRole(ADMIN_ROLE) {\n    paused = !paused;\n    emit PausedStateChanged(paused);\n}\n```\n\nIf the admin were to pause the contract indefinitely, users would be unable to unseal or reveal their packs, effectively locking their assets. Similarly, changing URIs could impact the perceived value of the NFTs.",
        "Recommendation": null,
        "Detector": "context_scan_default_2_claude-3-7-sonnet-20250219_4",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 22
    },
    {
        "Issue": "Predictable Randomness Mechanism",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract uses the blockhash of the unsealing block plus a delay as a source of randomness when revealing packs. While this provides some unpredictability, it's not truly random and could potentially be manipulated under specific conditions.\n\n```solidity\nbytes32 bh = blockhash(unsealBlock);\nif (bh == bytes32(0)) {\n    revert Sealed(packId);\n}\nuint256 index = uint256(bh) % metadataPool[packId].length;\n```\n\nTheoretically, a miner with enough resources could manipulate which block they mine to influence the blockhash. Although the unsealDelay makes this more difficult, it's still a potential vector for manipulation, especially if the delay is small. This could enable a determined actor to obtain more valuable NFTs than they would with truly random selection.",
        "Recommendation": null,
        "Detector": "context_scan_default_2_claude-3-7-sonnet-20250219_4",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 23
    },
    {
        "Issue": "Global unseal state shared across users allows theft and DoS",
        "Severity": "High",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract tracks unsealing only by `packId`, not by user. All unseal events are stored in a single array per `packId`:\n\n```solidity\nmapping(uint256 => uint256[]) public unsealBlocks;\n...\nfunction unseal(uint256 packId) external onlyPackOwner(packId) {\n    // record a future block at which reveal is allowed\n    unsealBlocks[packId].push(block.number + unsealDelay);\n}\n```\n\nWhen any holder calls `reveal`, it always pops and consumes the _last_ unseal entry for that `packId`, regardless of who unsealed it:\n\n```solidity\nuint256 idx = unsealBlocks[packId].length - 1;\nuint256 unsealBlock = unsealBlocks[packId][idx];\nunsealBlocks[packId].pop();\n// use blockhash(unsealBlock) for randomness, then burn and mint\n```\n\nBecause unseal blocks are global:\n1. A malicious holder can call `reveal` on another user\u2019s unseal entry, stealing their right to reveal (but still burning the attacker\u2019s own pack).\n2. Once one user unseals, no other user can unseal until someone calls `reveal` (DoS) because `unsealBlocks[packId].length >= balanceOf(msg.sender, packId)` will block further `unseal` calls for others.\n\nThis design breaks per-user isolation of unsealed packs, allowing theft of randomness slots and denial of service.",
        "Recommendation": "",
        "Detector": "context_scan_default_2_o4-mini-2025-04-16_5",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 24
    },
    {
        "Issue": "Blockhash-based randomness is insecure and time\u2011limited",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "Randomness and reveal timing rely solely on `blockhash(unsealBlock)`, which has two critical issues:\n\n```solidity\nbytes32 bh = blockhash(unsealBlock);\nif (bh == bytes32(0)) {\n    revert Sealed(packId);\n}\nuint256 index = uint256(bh) % metadataPool[packId].length;\n```\n\n1. Miner manipulation: the miner of `unsealBlock` can influence `blockhash(unsealBlock)` and thus control which metadata ID is chosen, enabling biased or front\u2011run reveals of rare items.\n2. 256\u2011block window: `blockhash` only returns non\u2011zero for the 256 most recent blocks (excluding current). If a holder fails to call `reveal` within 256 blocks after `unseal`, `blockhash` returns `0`, causing permanent revert (`Sealed`) and locking the unsealed pack slot. Since the revert undoes the pop but leaves the unseal entry in place, the user is then unable to unseal again (`unsealBlocks.length >= balanceOf`) yet cannot reveal\u2014effectively burning their pack without reward.",
        "Recommendation": "",
        "Detector": "context_scan_default_2_o4-mini-2025-04-16_5",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 25
    },
    {
        "Issue": "Missing constructor input validation for `metadataInterval` and `unsealDelay`",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "Neither `metadataInterval` nor `unsealDelay` passed to the constructor is validated, which can break core logic:\n\n```solidity\nconstructor(..., uint256 unsealDelay_, uint256 metadataInterval_, ...) {\n    unsealDelay = unsealDelay_;\n    metadataInterval = metadataInterval_;\n    // no checks for metadataInterval_ != 0 or unsealDelay_ <= 256\n}\n```\n\n- If `metadataInterval` is set to zero, calls to `addMetadata` or `mintPack` will revert with division by zero (`packId % metadataInterval`).\n- If `unsealDelay` is configured >256, blockhash of `unsealBlock` will always be zero, making `reveal` permanently impossible.\n\nProper input validation (e.g., `metadataInterval > 0` and `unsealDelay > 0 && unsealDelay < 256`) should be enforced.",
        "Recommendation": "",
        "Detector": "context_scan_default_2_o4-mini-2025-04-16_5",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 26
    },
    {
        "Issue": "Unsealed packs are not tracked per\u2011owner, allowing delay bypass and DoS against honest users",
        "Severity": "High",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "`unsealBlocks` is indexed only by `packId`, not by both `packId` **and** the address that performed the unseal.  As a consequence, every unsealed copy of a given pack is stored in a single shared array that any holder of that pack can later consume.\n\n```solidity\n//  Packs.unseal()\nif (unsealBlocks[packId].length >= balanceOf(msg.sender, packId)) {\n    revert NoAvailablePacks(msg.sender, packId);   // <\u2011\u2011 global length compared to *individual* balance\n}\nunsealBlocks[packId].push(block.number + unsealDelay);  // <\u2011\u2011 owner information is lost\n\n//  Packs.reveal()\nuint256 idx         = unsealBlocks[packId].length - 1;   // <\u2011\u2011 always takes the **last** entry\nuint256 unsealBlock = unsealBlocks[packId][idx];\nunsealBlocks[packId].pop();                             // <\u2011\u2011 entry is consumed by the caller\n```\n\nImpact:\n1. **Delay bypass / front\u2011running.**  An attacker who holds at least one copy of `packId` can skip the whole unseal period by letting honest users unseal first and immediately calling `reveal()`.  They burn *their* pack but use *someone else\u2019s* unsealed entry, obtaining rewards without waiting `unsealDelay` blocks.\n2. **Denial\u2011of\u2011Service.**  Because the guard in `unseal()` compares the *global* length of `unsealBlocks[packId]` to the caller\u2019s personal balance, one user\u2019s unseals block all other users:\n   \u2022 Two users each own 1 pack.\n   \u2022 User A calls `unseal()`.  `unsealBlocks.length` becomes\u00a01.\n   \u2022 User B now fails because `1\u00a0>=\u00a0balanceOf(B,packId)` \u21d2 `NoAvailablePacks`.\n   \u2022 Until somebody reveals and pops the entry, no one else can unseal.\n3. **Unfair metadata distribution.**  Since `reveal()` always pops the *last* element (LIFO), users can game the order in which unseals are consumed, further skewing randomness and reward allocation.\n\nLikelihood is high\u2014no special privileges are required and a single transaction can trigger the problem.  Impact ranges from permanently blocking other users to letting the attacker bypass the intended waiting period, so the overall severity is **High**.",
        "Recommendation": "",
        "Detector": "context_scan_none_o3-2025-04-16_6",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 27
    },
    {
        "Issue": "Missing re\u2011entrancy protection in reveal() allows nested calls via ERC1155 callbacks",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "`reveal()` performs several state\u2011changing operations and then mints a new ERC\u20111155 token **to the caller**:\n\n```solidity\n_burn(msg.sender, packId, 1);\n_mint(msg.sender, 0, 1, \"\");           // <\u2011\u2011 triggers onERC1155Received if caller is a contract\nNFT(nft1).mint(msg.sender, id);          // external call\nNFT(nft2).mint(msg.sender, id);          // external call\nNFT(nft3).mint(msg.sender, id);          // external call\n```\n\nWhen `msg.sender` is a contract, the `_mint` call executes `_doSafeTransferAcceptanceCheck`, which invokes `onERC1155Received` on the recipient **before** `reveal()` finishes.  During that callback the recipient can re\u2011enter `Packs` and call arbitrary functions such as another `reveal()` or `switchPaused()` (if it also has `ADMIN_ROLE`).  Since the contract lacks a `nonReentrant` guard, nested execution is possible.\n\nWhile the current storage updates performed before the external call (popping `unsealBlocks`, burning a pack, etc.) limit obvious double\u2011spend vectors, the pattern leaves the protocol fragile:\n\u2022 Future refactoring may introduce exploitable state inconsistencies.\n\u2022 Re\u2011entrancy can still be abused to drain gas pools, grief users, or chain reveals in unexpected order.\n\nGiven the mitigations already in place (pack balance check after `_burn`) and the need for a malicious contract address, the likelihood is low and the overall severity is **Low**.",
        "Recommendation": "",
        "Detector": "context_scan_none_o3-2025-04-16_6",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 28
    },
    {
        "Issue": "Blockhash unavailability can permanently lock user assets",
        "Severity": "High",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `reveal` function relies on the blockhash of a previous block to determine randomness for pack reveals:\n\n```solidity\nbytes32 bh = blockhash(unsealBlock);\nif (bh == bytes32(0)) {\n    revert Sealed(packId);\n}\n```\n\nHowever, Ethereum only stores block hashes for the last 256 blocks. If a user waits too long to call `reveal()` after the unsealing delay expires, the blockhash will be zero and the transaction will revert with `Sealed(packId)`.\n\nThis creates a permanent locking situation where users who don't reveal their packs within this window will permanently lose access to their assets. There's no recovery mechanism implemented for this scenario.\n\nThis is particularly concerning because:\n1. The `unsealDelay` parameter is set in the constructor without validation\n2. If set close to or greater than 256 blocks, it would create a very small window of opportunity for users to reveal\n3. Users may not be aware of this blockchain limitation\n4. The locked assets cannot be recovered through any mechanism in the contract",
        "Recommendation": "",
        "Detector": "context_scan_none_claude-3-7-sonnet-20250219_7",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 29
    },
    {
        "Issue": "Missing validation for NFT contract addresses",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The constructor accepts three NFT contract addresses but doesn't validate that they are non-zero or valid contract addresses:\n\n```solidity\nconstructor(\n    NFT nft1_,\n    NFT nft2_,\n    NFT nft3_,\n    uint256 unsealDelay_,\n    uint256 metadataInterval_,\n    string memory metadataURI_\n) {\n    nft1 = nft1_;\n    nft2 = nft2_;\n    nft3 = nft3_;\n    // ...\n}\n```\n\nIf any of these addresses is the zero address (0x0) or an invalid contract address, the `reveal` function will fail when trying to mint NFTs:\n\n```solidity\nNFT(nft1).mint(msg.sender, id);\nNFT(nft2).mint(msg.sender, id);\nNFT(nft3).mint(msg.sender, id);\n```\n\nSince these addresses are immutable after deployment, setting incorrect addresses would permanently break the contract's core functionality, making it impossible for users to ever reveal their packs.",
        "Recommendation": "",
        "Detector": "context_scan_none_claude-3-7-sonnet-20250219_7",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 30
    },
    {
        "Issue": "No validation of unsealDelay parameter",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The constructor sets the `unsealDelay` without any validation:\n\n```solidity\nconstructor(\n    // ...\n    uint256 unsealDelay_,\n    // ...\n) {\n    // ...\n    unsealDelay = unsealDelay_;\n    // ...\n}\n```\n\nIf `unsealDelay` is set too high (>256), users will never be able to reveal their packs due to blockhash unavailability as Ethereum only stores the last 256 block hashes. Conversely, if it's set too low, it undermines the security of the randomness mechanism by making it easier for miners to predict or manipulate the outcome.\n\nThis is particularly concerning as this parameter directly affects both the security of the randomness mechanism and the usability of the contract, yet has no bounds checking or sanity validation.",
        "Recommendation": "",
        "Detector": "context_scan_none_claude-3-7-sonnet-20250219_7",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 31
    },
    {
        "Issue": "High centralization risk with pausing mechanism",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The contract includes a pausing mechanism that gives substantial power to addresses with ADMIN_ROLE:\n\n```solidity\nfunction switchPaused() external override onlyRole(ADMIN_ROLE) {\n    paused = !paused;\n    emit PausedStateChanged(paused);\n}\n```\n\nWhen the contract is paused, users cannot unseal or reveal packs, as seen in these checks:\n\n```solidity\nfunction unseal(uint256 packId) external override onlyPackOwner(packId) {\n    if (paused) revert Paused();\n    // ...\n}\n\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    // ...\n    if (paused) revert Paused();\n    // ...\n}\n```\n\nThis creates a significant centralization risk where admins can freeze user assets indefinitely without any time-delay mechanisms or multi-signature requirements. Users have no recourse if the contract is paused, and there's no guarantee it will ever be unpaused.",
        "Recommendation": "",
        "Detector": "context_scan_none_claude-3-7-sonnet-20250219_7",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 32
    },
    {
        "Issue": "Potential DoS with gas limit due to unbounded array growth",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `unsealBlocks` array for a pack ID can grow without bounds, potentially leading to gas limit issues:\n\n```solidity\nfunction unseal(uint256 packId) external override onlyPackOwner(packId) {\n    // ...\n    unsealBlocks[packId].push(block.number + unsealDelay);\n    // ...\n}\n```\n\nWhile there is a check to ensure a user doesn't unseal more packs than they own, there's no global limit on how large the array can grow across all users. For popular pack IDs with many owners, this array could become very large, potentially causing functions that iterate through or manipulate this array to hit gas limits.\n\nThis could make it expensive or even impossible to perform certain operations on popular packs, especially in the `reveal` function which needs to manipulate the array.",
        "Recommendation": "",
        "Detector": "context_scan_none_claude-3-7-sonnet-20250219_7",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 33
    },
    {
        "Issue": "Lack of protection against zero address in mintPack",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `mintPack` function doesn't check if the recipient address is the zero address:\n\n```solidity\nfunction mintPack(address to, uint256 packId, uint256 amount)\n    external\n    override\n    onlyRole(MINTER_ROLE)\n{\n    if (packId == 0 || packId % metadataInterval != 0) {\n        revert InvalidPack(packId);\n    }\n    _mint(to, packId, amount, \"\");\n}\n```\n\nWhile the underlying ERC1155 implementation might have this check, it's a best practice to explicitly validate important parameters at the entry point. Minting to the zero address would effectively burn tokens, which is likely not the intended behavior and represents a potential loss of assets.",
        "Recommendation": "",
        "Detector": "context_scan_none_claude-3-7-sonnet-20250219_7",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 34
    },
    {
        "Issue": "Missing events for critical operations",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "While the contract emits events for unsealing packs and adding metadata, it doesn't emit specific events when packs are revealed or when NFTs are minted to users:\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    // ... (no event emission for revealing or NFT minting)\n    NFT(nft1).mint(msg.sender, id);\n    NFT(nft2).mint(msg.sender, id);\n    NFT(nft3).mint(msg.sender, id);\n}\n```\n\nStandard ERC1155 events like `TransferSingle` will be emitted due to inheritance for the burn and mint operations, but specific pack-reveal events would make tracking these activities off-chain easier and more reliable. This limits the ability of external systems to track important state changes and can complicate integration with other platforms.",
        "Recommendation": "",
        "Detector": "context_scan_none_claude-3-7-sonnet-20250219_7",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 35
    },
    {
        "Issue": "Global unseal event misassociation allows theft of pack rewards",
        "Severity": "High",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `unsealBlocks` mapping is declared per `packId` without associating unseal events to specific users, enabling any holder of that pack to call `reveal` and consume someone else\u2019s unsealed pack. For example:\n\n```solidity\n// Global unsealed blocks by packId\nmapping(uint256 => uint256[]) public unsealBlocks;\n...\nfunction reveal(uint256 packId) external onlyPackOwner(packId) {\n    // Pops the last unseal block regardless of who unsealed\n    uint256 idx = unsealBlocks[packId].length - 1;\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    unsealBlocks[packId].pop();\n    // ... further operations ...\n    _burn(msg.sender, packId, 1);\n    NFT(nft1).mint(msg.sender, id);\n    NFT(nft2).mint(msg.sender, id);\n    NFT(nft3).mint(msg.sender, id);\n}\n```\n\nBecause unseal events are not tied to the calling address, a malicious user B holding any pack tokens can front-run user A\u2019s unseal. B calls `reveal`, pops A\u2019s unseal event, burns one of B\u2019s own packs, and receives the NFT reward intended for A. User A retains their pack token but loses their reward. This breaks the intended per-user delayed-reveal mechanism, allowing theft of pack rewards.",
        "Recommendation": "",
        "Detector": "context_scan_none_o4-mini-2025-04-16_8",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 36
    },
    {
        "Issue": "Lack of reentrancy guard in reveal allows nested reveals",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `reveal` function performs state updates (popping unseal and metadata entries, burning the pack, and minting token ID 0) and then makes external calls to NFT contracts without a reentrancy guard. If a recipient is a malicious contract implementing `onERC1155Received`, it can re-enter `reveal` or `unseal` on the `Packs` contract during the external call. This could allow draining multiple unseal events and metadata entries in a single transaction. For example:\n\n```solidity\n// External NFT mints in reveal(), unprotected from reentrancy:\nNFT(nft1).mint(msg.sender, id);\nNFT(nft2).mint(msg.sender, id);\nNFT(nft3).mint(msg.sender, id);\n```\n\nA malicious `msg.sender` contract could use the `onERC1155Received` callback to call `reveal` again, repeatedly consuming unseal events and NFTs beyond intended limits.",
        "Recommendation": "",
        "Detector": "context_scan_none_o4-mini-2025-04-16_8",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 37
    },
    {
        "Issue": "Use of blockhash for randomness is manipulable and can revert unexpectedly",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The `reveal` function uses `blockhash(unsealBlock)` as the sole source of randomness to pick a metadata ID and relies on its value to revert if unavailable:\n\n```solidity\nbytes32 bh = blockhash(unsealBlock);\nif (bh == bytes32(0)) {\n    revert Sealed(packId);\n}\nuint256 index = uint256(bh) % metadataPool[packId].length;\n```\n\nThis approach has two issues:\n1. Miners can influence the hash of the target block, especially when the metadata pool is small, allowing them to bias NFT selection.\n2. Calls made too early (in the same block as `unsealBlock`) or too late (more than 256 blocks after) will cause `blockhash` to return zero, reverting with `Sealed`. Without explicit `block.number` checks, honest users may be unable to reveal within the correct window.",
        "Recommendation": "",
        "Detector": "context_scan_none_o4-mini-2025-04-16_8",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 38
    },
    {
        "Issue": "Global unsealBlocks mapping can cause DoS on unsealing",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The unseal function uses a single global array unsealBlocks[packId] to track unseal events for all users rather than per-user. It then compares its length against the caller's balance:\n\n```solidity\nfunction unseal(uint256 packId) external override onlyPackOwner(packId) {\n    if (paused) revert Paused();\n    if (packId == 0) revert InvalidPack(packId);\n    if (lastUnsealBlock[msg.sender] == block.number) {\n        revert AlreadyUnsealedThisBlock(msg.sender, block.number);\n    }\n    lastUnsealBlock[msg.sender] = block.number;\n    // BUG: unsealBlocks is global, not per-user\n    if (unsealBlocks[packId].length >= balanceOf(msg.sender, packId)) {\n        revert NoAvailablePacks(msg.sender, packId);\n    }\n    unsealBlocks[packId].push(block.number + unsealDelay);\n    emit Unsealed(msg.sender, packId, block.number);\n}\n```\n\nBecause unsealBlocks[packId].length grows with every unseal by _any_ user, a single user can push it to a value \u2265 another user\u2019s balance, permanently blocking that user from unsealing until someone else reveals and pops events.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 39
    },
    {
        "Issue": "Cross\u2011user reveal allows stealing someone else\u2019s unseal",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The reveal function pops from the same global unsealBlocks[packId] and burns the caller\u2019s pack, regardless of who scheduled it:\n\n```solidity\nfunction reveal(uint256 packId) external override onlyPackOwner(packId) {\n    if (metadataPool[packId].length == 0) revert OutOfMetadata(packId);\n    if (paused) revert Paused();\n    if (packId == 0) revert InvalidPack(packId);\n    if (unsealBlocks[packId].length == 0) revert NoneUnsealed(packId);\n\n    uint256 idx = unsealBlocks[packId].length - 1;\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    unsealBlocks[packId].pop();               // pops someone else's unseal\n    bytes32 bh = blockhash(unsealBlock);\n    if (bh == bytes32(0)) revert Sealed(packId);\n    // burn and mint happen for the caller\n    _burn(msg.sender, packId, 1);\n    _mint(msg.sender, 0, 1, \"\");\n    NFT(nft1).mint(msg.sender, id);\n    ...\n}\n```\n\nBecause the array is global, any holder of one copy can call reveal and consume the last unseal scheduled by another user, burning their own pack and claiming the metadata intended for someone else.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 40
    },
    {
        "Issue": "Unbounded unsealDelay can make all reveals revert",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The constructor does not validate unsealDelay_, and reveal uses blockhash(unsealBlock) which only works for blocks in the past 256 blocks. If unsealDelay \u2265 256 the stored unsealBlock = block.number + unsealDelay will always be out of range or in the future and blockhash(...) == 0, causing every reveal to revert with Sealed(packId):\n\n```solidity\nconstructor(..., uint256 unsealDelay_, ...) {\n    unsealDelay = unsealDelay_;\n    ...\n}\n\nfunction unseal(uint256 packId) { \n    unsealBlocks[packId].push(block.number + unsealDelay);\n}\n\nfunction reveal(uint256 packId) {\n    uint256 unsealBlock = unsealBlocks[packId][idx];\n    bytes32 bh = blockhash(unsealBlock);\n    if (bh == bytes32(0)) { revert Sealed(packId); }\n    ...\n}\n```\n\nWithout an upper bound check on unsealDelay, blockhash will always return zero and breaks the reveal mechanism permanently.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 41
    },
    {
        "Issue": "metadataInterval not validated against zero causing divide\u2011by\u2011zero",
        "Severity": "Best Practices",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The constructor accepts metadataInterval_ without ensuring it is non\u2011zero. Later, addMetadata and mintPack perform packId % metadataInterval:\n\n```solidity\nconstructor(..., uint256 metadataInterval_, ...) {\n    metadataInterval = metadataInterval_;\n}\n\nfunction addMetadata(uint256 packId, uint256 amount) {\n    if (packId == 0 || packId % metadataInterval != 0) {\n        revert InvalidPack(packId);\n    }\n    ...\n}\n\nfunction mintPack(address to, uint256 packId, uint256 amount) {\n    if (packId == 0 || packId % metadataInterval != 0) {\n        revert InvalidPack(packId);\n    }\n    ...\n}\n```\n\nIf metadataInterval is zero, both operations will revert with a division\u2011by\u2011zero at runtime. It is best practice to validate metadataInterval_ > 0 on construction.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 42
    },
    {
        "Issue": "Insecure Randomness via blockhash",
        "Severity": "Medium",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "The reveal() function uses blockhash for randomness:\\n\\nbytes32 bh = blockhash(unsealBlock);\\nif (bh == bytes32(0)) { revert Sealed(packId); }\\nuint256 index = uint256(bh) % metadataPool[packId].length;\\n\\nBlockhash can be influenced by miners and is predictable within the 256-block window, allowing adversaries to manipulate or bias pack reveal outcomes.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 43
    },
    {
        "Issue": "Incorrect Commit-Reveal Mapping Allowing Unauthorized Reveals",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "Commit blocks are tracked only by packId, not by user. In unseal():\\n\\nunsealBlocks[packId].push(block.number + unsealDelay);\\n\\nAnd in reveal():\\n\\nuint256 unsealBlock = unsealBlocks[packId][idx];\\nunsealBlocks[packId].pop();\\n\\nSince commit entries are global per pack, any holder of packId can reveal using a commit block created by another user, leading to unauthorized reveals and unfair pack consumption.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 44
    },
    {
        "Issue": "Denial-of-Service via CommitBlock Loss on Invalid blockhash",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "In reveal(), the commit block is popped before validating blockhash, then reverts if blockhash returns zero:\\n\\nuint256 unsealBlock = unsealBlocks[packId][idx];\\nunsealBlocks[packId].pop();\\nbytes32 bh = blockhash(unsealBlock);\\nif (bh == bytes32(0)) { revert Sealed(packId); }\\n\\nIf unsealBlock is outside the valid range (older than 256 blocks or not yet mined), blockhash is zero and the revert occurs after the pop. The commit entry is irreversibly lost, permanently preventing that pack from being revealed.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 45
    },
    {
        "Issue": "Missing Reentrancy Protection on External NFT Mints",
        "Severity": "Low",
        "Contracts": [
            "Packs.sol"
        ],
        "Description": "reveal() makes external calls to NFT.mint without any reentrancy guard:\\n\\nNFT(nft1).mint(msg.sender, id);\\nNFT(nft2).mint(msg.sender, id);\\nNFT(nft3).mint(msg.sender, id);\\n\\nIf any NFT contract implements malicious logic in mint(), a reentrant call could manipulate contract state (e.g., unsealBlocks or token balances) during reveal, leading to inconsistent or exploitable behavior.",
        "Recommendation": "",
        "Detector": "specialized_agents",
        "Mitigation": null,
        "CounterArgument": null,
        "Justification": null,
        "index": 46
    }
]